Machine learning:
-allows computers to take as input some data & make decision by learning from it
-learning from data and keep getting smarter
-core of every machine learning there are numbers
-everything can be seen as a formula, bits an bytes
-computer looks for patterns in order to solve the majority of the problems
-translates in some kind of function from ML program (called models)
-Requiring more powerful methods than typical handcrafted ones
-needs a lot of data to be able to work (1000s of sample sometimes millions)
-neural network model based on human brain
-every datasets is composed of sample
-each datasets need to be in a particular format or math would be difficult
-each sample is stored in the form of array value and normalised between a certain range
-everything in ML uses one or more datasets 
-features is like loopy for(8) and straight line for(1)
-ML will try to memorise the way to recognise those features and knowledge for every new input
-Functional approximation is if the model is big enough then it will able to approximate many    different function & letting it learn the function in an automatic fashion
-by trial and errors it fixes more and more and getting faster and faster
-Functions with million of parameters impossible to solve by hand for that we need millions of variable of tune
-Black box = dark with no details available
-Tree decision = top is root, where sample start fro going from top to bottom (Tree must have a split, 2 branches start from & decision is made based on features of input depending on the result and different path is taken
-decision tree continues to move input down a certain path, deciding what to do at each split
-when no splits are available anymore input is said to have reached a leaf
-decision tree will make decision based on which leaf input ended up at
-learning tree = deciding a loan amount/ doesn't require human supervision
-decision tree only good at predicting something = weak classifier = simple decision
-combing multiple trees together all performing same task = strong classifier = forest
-regression = technique used to simplify your data and its trends (when data is composed by value) = monetary data, measurement, years
-regression tries to model a function that explain data as best as possible in simple way (height of person in easy way)


Top 1% programmer in world:
-How does your source code get to a point where the CPU can understand it? How does your program allocate and de-allocate memory
-never code, concepts. Once you understand how it works, you can be unstoppable in any landscape
-concept is king
-Data structures are extremely important, understanding the efficiency of the operations you’ve chosen (big O), and what ALL of the data boils down to (1s and 0s).
-super-structured datasets that relate and have rules on input/output
-bundle of software manipulating a database.
-software manipulating data
-encryption/decryption software, a credit card validation tool.
-RF communication
-top programmer can break down any problem into its smallest parts to be solved piece by piece
-compare only with your past self
-great programmer are great readers
-discipline 
-ability to turn off distractions and concentrate
-ability to think what the user would like so you are not dependent on the product manager
-Pattern of Enterprise Application Architecture
-understand the customer, I understand the business issues. The fact that I program gives me the ability to solve business issues
-Architecture - be the person who can design scalable, distributed system with enormous throughput from scratch

Languages - be the person who can design new programming languages, be the person who is an absolute expert in a specific language

Data science - be the person who can solve complex problems that involve tons of math

Application design - be the person who understands all about designing applications, like uncle bob
-Excellent intuition around data structures, algorithms, and their characteristics

You should be able to look at a function and understand how it scales, and if it has any bias for certain inputs (e.g. lists are optimal for iteration but not searching).

Wide range of programming patterns and idioms under your belt that you can pick between as appropriate

Example: you should know error handling patterns like the back of your hand: exceptions, Either types, error codes, promise rejections...

Deep knowledge of several languages from different programming paradigms - definitely at least one functional language and one systems language

Especially C++, Java/C#, JavaScript/TypeScript

High-level understanding of organizing large code bases

Isolation of concerns, effective testing, APIs + integration points

Strong platform knowledge

You shouldn't just know what your code does, but have a pretty good idea for how it works on the underlying platform (operating system, actual CPU, web browser...)
-


Artificial intelligence:
-It teaches the computer how to simulate intelligence in order to behave like human
-humans makes association to understand a topic
-Handwriting recognition = machine tries to understand the handwriting
-Speech recognition = similar, but tries to understand meaning and sentiment or sentences
-translation = machine create a bridge between 2 different languages
-spam filtering = used with emails (extendable to other domains) unwanted is filtered
-automation = reducing a task where a human is needed
-game AI
-planning


-The Metropolis Algorithm for Monte Carlo. Through the use of random processes, this algorithm offers an efficient way to stumble toward answers to problems that are too complicated to solve exactly
-Simplex Method for Linear Programming. An elegant solution to a common problem in planning and decision-making.
-Krylov Subspace Iteration Method. A technique for rapidly solving the linear equations that abound in scientific computation.
-The Decompositional Approach to Matrix Computations. A suite of techniques for numerical linear algebra.
-The Fortran Optimising Compiler. Turns high-level code into efficient computer-readable code.
-QR Algorithm for Computing Eigenvalues. Another crucial matrix operation made swift and practical
-Quick-sort Algorithms for Sorting. For the efficient handling of large databases.
-Fast Fourier Transform. Perhaps the most ubiquitous algorithm in use today, it breaks down waveforms (like sound) into periodic components.
-Integer Relation Detection = fast method for spotting simple equations satisfied by collections of seemingly unrelated numbers
-Fast Multipole Method = breakthrough in dealing with complexity of n-body calculations, applied in problems ranging from celestial mechanics to protein folding.


Deep learning:
-uses Artificial neutral (ANN) to make decision and lot more powerful stuff


Android development:
-java runtime allows to write clean code and understandable programming language
-native or cross platform application
-don't too much ads at the beginning of an application
-put ads only after 50k or 100k downloads
-copying the description of your competitor is a good idea
-if app is working offline then no need to worry about scalability
-if app fetches the data from the server = focus on scaling
-using AWS free tier till got 500k users
-you can released your first app then add new features 
-release beta version of the app
-increase traffic
-always try to learn new stuff like MVVM architect, compose, tegor
-spend some money on ads
-update your apps on monthly bases
-don't use copyright images and videos
-make sure play store account don't get suspended or terminate
-using bitting to get ads (CPM increases)
-use flat-icon
-Security: -Use end-to-end encryption
	   -Use a strong encryption algorithm (strong enough to prevent attack by even most 		  sophisticated hackers)
	   -Generate unique encryption keys for each chat
	   -Do not store encryption keys on the server (only be stored on users' devices)
	   -Use a secure authentication method
	   -Keep the app up to date (regularly updated with latest security patches)
-use website publicly (if you are using web view)
-making a portfolio is really important 
-marketing is important for your app (by 10000- 15000 is good enough)
-regular updates are important
-use mediation apps
-use google absence
-Data class = used to hold data
-Money: -sponsorships (partner with brands to create sponsored content) (displaying ads for brand, creating branded content, or running contests and giveaways)
	-Monetisation	
	-Advertisement
	-google admob
	-In-app purchases (users to purchase additional features or content within an app)
	-Affiliate marketing (promoting other products or services within their apps & earn a                      each time a user clicks on the link and makes a purchase)
	-referral marketing -CPA (cost per acquisition
			   -CPC (cost per click)
			   -crowdfunding (kick starter apps)
			   -premium and valuable services
			   -paid application
			   -physical services


Languages:
[Html, Js, Css, Java, Kotlin, Php, Python, C, C++]


Hacking:
-Rainbow Table = compares the hashed form
-Dictionary attack
-Brute force attack


[Dropshipping]


Software for hacking:
-Deepsound
-ProtonMail
-Raspberry pi
-RSA secureID
-Kali linux
-John and Ripper
-Flexispy
-social-engineering-toolkit
-Metasploit and Meterpreter
-Tastic RFID Thief


Youtube:
-use sunlight in front
-podcast microphone
-cover the floors and wall with towels
-have a rough script
-editing apps = Vita and deviancy resolve
-think like a third person
-don't copy 


Global community:
-have fun & explore


Website:
-instamojo
-make proper landing page and link for that


Blogging:
-test and enter all relevant keyword
-most relevant result
-Google aims to provide users with the most relevant results for their queries
-Content types usually fall into one of five buckets: blog post, product, category, landing page, or video
-Build an email list
-try offering free ebook, course 
-Reach out to people mentioned in your post
-Boost important posts with internal links
-relevant, high-authority pages to those pages that need boost can help improve their performance in the search engines
-build links
-Promote content in communities (but don't spam shit out of them)(booted & banned)
-use & make unique, distinct, and memorable images
-Share your content on Reddit 
-Refresh and republish your content
-Repurpose your content into a Twitter thread
-Run ads
-Pay a platform, & you’ll get traffic almost instantly (Quora, Twitter, or even display advertising)
-Publish original research (you’re creating opportunities for top-tier publications to link to you)
-Boost important posts with internal links ( links from one page to another within the same domain)
-high-authority pages to those pages
-Backlinks are an important Google ranking factor
-guest blogging


Kunal Kushwaha:
-MLH Fellowship Evaluations
-make projects
-don't submit competitive programming profiles & Leetcode solutions (straight rejected)
-be honest in interviews or application
-remember that interviewer wants you to succeed
-be patient
-read code of conduct carefully 
-don't spam


NFTs:
-ICO = initial coin offering
-IDO = initial dex offering
-crypto-punk
-ether rock
-nouns
-degen ape academy
-fidenza
-decertraland
-bored ape


Remote Jobs:
-DSA and CP is kind of important
-core forces (stars)
-mergify
-google summer of code
-CO
-developing product is important
-India startups are not good enough
-try to create something on your own
-GitHub profile is important
-its good to stay active in social media 
-learning in public
-engaging in communities & events & joint com...
-engaging in webinars
-you don't need hug hug following
-being introvert is not bad but don't shy
-it helps when you teach also
-never buy single course with anything try new things
-40lakh base pay is actual 13 lakh base pay
-devOps
-learn what is in demand
-build something fun, interesting & something helpful
-in 100s of no, you only need to get 1 yes
-larger companies have less impact & small companies have big impact (in contribution)
-communities (CNCF)
-git ops
-blockchain infrastructure 
-machine learning
-try to get job at product based company & not in some random bullshit service based company
-exporter
-gatekeepers in open source
-practice on hacker rank, interview bit, leet-code, code-chef, scoge, geeks-for-geeks 
-make nice GitHub profile
-neural network
-growing on twitter (massive community of programming)
-discrimination will be their 
-make blogs can be good idea
-jobs: -developer advocate
       -google summer of code mentee
       -ISL
       -organisation & internships
       -industries standard


Workstation:
-speaker
-phone
-mouse (logitech)
-keyboard (mechanical)
-M1 mac-mini (extremely fast)
-large size monitor (LG)


DevOps:
-concept, culture, collection of tools
-Operating System & linux
-network happens in cloud
-set of practices that software 
-coding to deployment to maintenance to update
-server administration -linux, unix, windows
-networking & security
-servers (web-server & apache, nginx, tomcat) (caching, databases, no sequel & sequel)
-mongodb, aws, mysql
-infrastructure in code
-ansible, puppet
-container: docker, kubernetes 
-terraform, google deployment manager
-CI/ CD (Jenkins)
-monitoring & logging
-cloud (gcp, was, asure)


Kubernetes:
-earlier it was costly to buy server & run applications in it
-1 machine you have many machines (virtual machines)
-cloud hosting platforms (AWS, azure, digital ocean)
-configuration management (ansible) (immutability) (at runtime you can not make changes) 
-provides reliability
-package manager = we don't need separate VM for every task
-managing containers
-monolithic application = front-end, back-end, database, app, networking (need to scale all parts in application to scalp & not very good design)
-micro-services = every part is running in its own container (like s1, s2, s3)
-1 app on 1 Vm (not cool for scaling)
-orchestral= helps us deploying  managing containers dynamically
	     0 downtime updates
	     self heal containers
	     cloud native
-before virtual machines in wasting
-container orchestration system
-K8S
-nodes are nothing but server
-deploying website in docker container
-brew link minikube
-minikube version
-minikube status
-minikube ip
-kubectl get pod
-kubectl get nodes
-minikube dashboard
-kubectl config view
-minkube docker-env
-docker container ls
-minikube ssh
-docker ps
-kubectl pods
-kubectl get pods
-kubectl config current-context
-kubectl get all
-kubectl get deployments
-minikube start --driver=virtualbox
-minikube start 


[curl -s https://raw.githubusercontent.com/kubescape/kubescape/master/install.sh | /bin/bash]


Open source:
-contributing is important
-enhance your resume
-non-code contributions


[Fandom]


Computer Science:
-garbage collector = allocate & dislocate memory when object no longer reference to variable
-double = doubles amount of memory
-memoization = If function already been called it will use existing value instead of recomputing it from scratch 
-search engines
-logic board  microchips
-mathematics, graphics, networking
-linux = omnipresent in enterprise world, space agencies
-cloud computing = using someone else server (on rent)
-firmware is just like software but integrated in particular hardware & cannot be upgrade
-thread = takes CPU core & breaks it into  (JS is single threaded)
-concurrency model
-bare metals
-Icann
-node-js = server side run time based on javascript
-NPM = node package manager
-localhost = remote like server
-docker makes 
-function = block of code then takes input & performs specific operation 
-boolean data types = true false
-expression = code that produces value
-statement = when code does something
-dynamic programming = problem is broken down into many sub problem


[cloud converter]


Reverse debugging:
-program crashing problem
-tracking value of variables
-GNU debugger, Microsoft visual studio debugger, valgren debugger, radar-to debugger


Device driver:
-operating system know everything about webcam, space, which device, function of hardware device
-printer = external hardware for your computer
-device driver = CD, website of printer, background connection by wire (tells computer about external hardware system)


Run-time error:
-infinite loop
-number at alphabet


Terraform:
-modeling cloud infrastructure
-AWS account


Docker:
-containerise application = makes it easy to scale


Cryptography:
-hash = chop & mix (md5) (argon2)
-salting
-HMAC = hash-based message authentication code
-encryption
-key-pairs
-signing


SEO:
-search engine optimisation
-own, manage, monetise, or promote online content
-easier for search engines to crawl, index, and understand your content
-small modifications = big difference
-If your site's robots.txt file disallows crawling of these assets, it directly harms how well our algorithms render and index your content
-Create unique, accurate page titles
-avoid long titles


Machine Learning algorithms used:
-Logistic Regression 
-Naive Bayes 
-Support Vector Machine (Linear) 
-K-Nearest Neighbours 
-Decision Tree 
-Random Forest 
-XGBoost 
-Artificial Neural Network with 1 Hidden layer 


Algorithm:
-Secret Message (has so much possibility)
-Page rank = tells importance of website
	     if 1 page is link to all page then that page is important
	     problem is someone can inflate page artificially
	     linked to more important pages
	     Random suffer model (how many times does user visit page)
	     Damping factor 
-Bloom filter = data structure that contains array of bits
		each bit can turned on & off
		pass book name in hash function & check if that bit is on & off
		you can use multiple hash functions (3 functions same input, 3 different output) check if all 3 bits are turned on 
-Dijkstra's Algorithm = update estimate
			choose next vertex -chose shortest time taken path
			width of algorithm should be non negative
-Elo rating = player's skills & winning in every match
	      more you lose or win your rating goes up and down
-Minimax = general purpose in game
	   optimal play = ensuring best outcome even in worst case scenario
	   terminal state = state when game is over
-Hamming code = data corrects itself
		we need extra information in data we correct -parity bit = counts no of 1
		we will use 3 p.bits 
		with just little bit of extra info = make something memory efficient
-Dekker Algorithm = avoid race conditions
		    game tree
		    some games can go long & take many moves & have many choices
		    can take so much processing power
		    giving program signal light
		    make sure that at one time only one region can be access (critical section)
-Randomness & Kolmogorov Complexity = patternless
				       only problem it is un-computed
				       how much information it takes to represent piece of data
-Computer built like dominos = chain reaction
-simple logic gates = small electronic units
-Elevators
-Halting
-Three pass protocol = 2 locks in box of message (still has vulnerability) (man-in-middle attack)
-how fast computer can be = bits/sec
-Advanced Encryption Standard 
				    

Data science:
-learn SQL
-you just need to fast & correct
-solving real company problems using data
-data product
-data recommendations
-writing model
-data visualisation
-leaving our footprint in digital world
-conditional probabilities
-Bayes theorem
-binomial distribution
-normal distribution
-descriptive statistics
-law of large numbers
-central limit theorem
-linear regression
-success metrics & tracking metrics


Software:
-instruction + data structures + documentation
-collections of various programs
-Generic products & customised products
-Model = start to end to make software
-umbrella activity = making anything before deadline
-Waterfall model = not suitable for large products/ not wage requirement/ only ready at end/ only for small projects/
-Incremental Model = dividing parts according to functionality/ initially less engineers/ easy false detecting/ more cost/ easy repair/ fast delivery/ 
-RAD (Rapid Application Development) model = diving in teams & simultaneous development/ high    cost/
-Spiral model = 1st, 2nd, 3rd iterations/ flexible/ large project/ time consuming/ never ending till software is made/ 
-Agile methodology = basic prototype/ involvement of iterative incremental delivery/ 
-Scrum = scrum master (task listing & giving to developer team)/ customer/ stakeholder/ product owner/ priority wise tasks/ scrum meeting/ everyday for 15 min/ 
-Requirement = 2 meaning = ambiguous/ SRH document creating & maintaining/ no unnecessary requirement/ grammatically correct/ feasible (not dangerous)/ 
-Activities in Requirement Engineering 
-SRS requirement specification = meeting/ document (software requirement specifications)/ IEE /involve with customer/ cannot be automate/ requirement change with time/ highly quality means less cost/ SRS should be easy to understand/ consistency (no clash between requirements)/ 
-Line of code (LOC) = estimating size of code/ no comments counted/ 
-Software-testing = unhiding all bugs & errors in software/ user experience should be good/ independent tester should always test software/ 
-unit tester = when particular module is ready/ driver/ stub/ testing 1 model at time/ identifies problems at starting/ cost can be saved in future/ cannot detect integrity/ can be time consuming/ 
-validation testing


Big data:
-volume = amount of data generated every second
-velocity = data is moving fast & on time
-80% data is unstructured
-veracity = trust worthiness of data
-value generator from Data
-giant hardware]


Cryptography:
-internet is very unsafe place & dangerous place
-only authorised people can access (confidential)
-protect at rest & protect at motion
-CIA Triad
-message need to be integrity
-OSI model security architecture = basic security services & architecture identifications/ guidelines & standard to communicate with other computer/ 
Interact with other layers/ different services/ prevention & recovery from hack/ 
-security services = enhancing service/ authorised user/ denied of message handling
-we different security mechanism
-security audit = tells acceptable activity or suspicious activity to attack/
-routing control = sending message with different & multiple routes
-passive attacker = doesn't modify anything
-eavesdropping = listen & reads sensitive details
-active attacker = keeps specific communication packet to himself & use them to show that he is authorised users/ pretends to be authorised user/ 


Software engineer things to keep in mind:
-you have to raise your own voice (many times people take your credit)
-don't be too nice
-find write balance between "yes" or "no"
-interact with different people
-problem arrive after 10-15 years
-you have to learn new things every 2-3 years
-your skillset should be your friend (so that you can do transition)
-service & product company
-never show fake experience
-criminal record check, PF going from multiple places
-don't work that hard work (people will give you more & more work) (if you are young then work hard)
-never quit & then ask for new job
-always know what going on in market


[geeksforgeeks]
[filmzilla]
[glass-door]


System design:


Windows:
-Microsoft windows is everywhere (75% of desktop market)
-administrate it, support it, fix it, break it
-window is popular & an frequent target to hack & insecure (because its popular)
-if you are writing malware you will write that for mass
-windows is required in admin support perspective
-born in 1985 GUI for MS. Dos 
-window 3.0 was groundbreaking
-windows98 (improved USB support & multiple monitors)
-windows-me/millennium (terrible but with automatic update, window movie maker)
-windows 2000 (server version of same name & brought in active directory)
-windows XP (people use this OS forever)
-windows vista (no 1 liked it but windows search, windows defender, user account control)
-windows7 (only good replacement for windowsXP & good security) 
-windows8 (everyone hated & took our task bar)
-windows10 
-windows11 (gave us virtual desktop & better UI)
-windows servers -windows NT 3.1 
		-maybe in company they might be running windows 2022 in data centre
		-centrally managing user account through a little tool called active directory
		-instead of admin going to each machine (tedious, time consuming
		-rather launch doc or active director users 7 computer to create new user
		-server running active directory will handle authentication
		-server also act as centralised storage, creating shares through file & storage service
		-creates network folder that can be accessed by anyone given permission using SMB protocol
		-group policy = allow them to control everything about workstation in company
		-local group policy (kind of dangerous & got to be careful)
		-disable removable USB drive
		-Bad USB cannot hurt you
-task manager = shows information about about performance & other stuff
-making sure to have x84 & x84 system
-MacBooks are built with armed processors 9armed based OS)
-user knowledge & admin knowledge
-cloud = aser (Microsoft data center)


Product based & service based:
-

[knowing about company you are going to join must]


[IdeaBix]
[smart india hackathon 2020]


Joma Startup:
-MVP
-don't make your target market too wide or too narrow (make is correct)
-Investors care about ROI
-be unique & have some competitive advantage
-(activated my trump card/ act-2/ 


MySQL:
-SQL helps use to create, retrieve, update, delete data data from database
-database helps us to keep track of this data electronically
-Relational database = excel spreadsheet (rows & column) (concept of keys) (SQL) 
-Non-relational database = anything but a table (including key-value pairs, json file, graph data structure) (NoSQL)
-DBMS (database management system) (workspace for us to write SQL statements & generally to just work with database) (MySQL, MicrosoftSQLserver, ORACLE, postgreSQL)
-1st install MySQl in your system


How computer works:
-every information can be represented in terms of 0s & 1s (on or off)
-circuits
-circuits in computers are way way faster
-computer circuits are microscopic nowadays
-smaller circuit = less electrical circuit
-pixel/ resolution/ millions of RGB triplets/ 


Secret to become an successful software engineer:
-don't over engineer
-solve problems on time
-mentor others & learn from others
-understand business impact
-improve culture
-find problem & be independent
-read code & reviewing PR
-be subject matter person
-do something that is attainable & realistic & practical
-be customer obsessed


Open source platforms:
-Microsoft Open Source Program
-LFX Mentorship
-MLH Fellowship
-Google Summer of Code
-LFN Mentorship Program
-Linux Kernel Mentorship Program
-GNOME
-Outreachy
-Google Summer of Docs
-x.org/ Foundation
-Julia Season of Contributions
-Summer of Haskell
-Open Mainframe Projects
-25PullRequests
-Open Innovation Projects
-Hyperledger Mentorship Program
-Season of KDE
-DataONE
-Free Software Foundation
-Processing Foundation Fellowship
-Hacktober Fest
-Foss Asia
-Driven Data
-Kubernetes Shadow Program


Java:
building web applications and micro-services. It provides a wide range of features, dependency injection, MVC architecture, AOP, ORM (Object Relational Mapping), CRUD operations, MVC ,building enterprise-level web applications, data validation, input processing, 
Vaadin: rich, interactive user interfaces,
Apache Stripes: AJAX support, custom tags,
Apache Wicket:
JavaServer Faces (JSF): dynamic, data-driven web applications. It provides a set of reusable UI components and supports AJAX, custom tags
Spark Framework: APIs


[Remote jobs are better than Faang Companies]
[Always clean your laptop & PC on regular basis]


Intel 8080 emulator on the mini computer
Marketing: eMarketer, Factual, Mail-gun, Owler
Sales and Support: BuiltWith, Congra, GetFeedback, Salesforce Sales Cloud
Product and Design: Blossom, Cage, Google Fonts, Sketch
Analytics: DialogTech, Google Analytics, MicroStrategy, StatCounter
HR: AngelList Jobs, Connectifier, CrowdFlower, Hired
Finance and Accounting: Bango, Fortumo, SpringCM
Productivity: Board-vantage, Do, Google Drive, Throttle
TRP: television rating point (people meter connect set top box of area) (monitoring team)
HayStack 
Scribe
Cassandra
LAMP
Turning Machine
CPU
Transistor
Bit
Byte
Character Encoding ASCII
Binary
Hexadecimal
Nibble
infinite loop
Wifi pineapple
Machine Code
RAM
Memory Address
I/O
Location monitoring
PAAS
IAAS
SAAS
Phone in microwave (block signals)
Cellphone tower
Wifi pineapple
Kernel (Drivers)
Shell
56bit
Command Line Interface
SSH
Mainframe
Programming Language
Exclusive 
Abstraction
Interpreted
IP-table
Compiled
Executable
Data Types
Security bypass
Login credential
Variable
Dynamic Typing
Static Typing
Pointer
Garbage Collector
int 
signed / unsigned
float 
Double
Char
string
Big endian
Little endian
Array
Linked List
Set
Stack
Queue
Hash
Tree
Payload
Graph
Nodes and Edges
Algorithms
Functions
Return
Arguments
Operators
Boolean
Expression
Statement
Conditional Logic
While Loop
For Loop
Iterable
Void
Recursion
Call Stack
Stack Overflow
Base Condition
Big-O
Time Complexity
Space Complexity
Brute Force
Coder vs maker
Divide and conquer
Dynamic Programming
Memoization
Greedy
Dijkstra's Shortest Path
Backtracking
Declarative
Functional Language
Imperative
Procedural Language
Multiparadigm
OOP
Class
Properties
Methods
Inheritance
Design Patterns
Instantiate
Blue-print
Heap Memory
UPS patch
Inbox
Auditorium
Race condition of program
Reference
Threads
Parallelism
Concurrency
Bare Metal
Shred command
Virtual Machine
IP Address
URL
DNS
TCP
Packets
SSL
HTTP
API
Printers
Engine
Xkeycode
Sleeper programmer
Data-correction map
Polygraph
Screen-saver
File-replicating virus
Direct kernel attack
Manual control
Garbage file
Connection terminated
Abort
HipHop
Headquarter
Public network
IP-spoffing
Hacking power-supply
Apache-server
Highly classified information
Prank
Fisa warrent
Patch of security
Ear cast
Vp9 AVR & web RTC
Users pay for all the bandwidth
Hadoop and Hive
Thrift
Mobile social trafic
SSH
Covering the home with aluminium foil (to stop radio signal)
Proprietary programming language
Raspberry pie + worm
Sending IP addresses without encrypting from different IP addresses
Nuclear power plant cooler pump destroying
RDP (Remote Desktop)
Payload
Institutional protect
DPI
Dd-wrt.com (can change way of working of router)
Memory term
Encrypted
Radiation suit
Proxy server
bluetooth receiver
Satellite shot
Single user mode (no activity record, full access to server)
SDK home directory
Mount command
Option security in crypto
Face recognition
Dedox attack
Strong magnetic field
Navigation system
Self driving car
Open source (redhat, centos, fedora)
Reprogramming the satellite
Mother satellite
Changing handle's name
Tor browser
Telecommunications
Phoneline
Changing IP address for more earning
Dark web (criminal organisation)
Cyber attack charges
Key locker/ key logger
Pacesnaker
CIA
Cigava
Halogen build
Trogen horse
Voice changer
Sulphuric acid
Decoding message
Git
Build files
Two factor authentication
Remotely access our server
Read access
Lower bandwidth medium
Decoding the machine
Video tap
Sound proof room
Call bounce (bounce from country & satellite)
House blueprint
Voice command
Cryptography
Fire-alarm
Matrix
public directory
Root access in python web-server
Connecting to server in right order & in right time
Reboot system
Internet breach
Black hat list
Hard drive
Message telecast
Mass effect 3
Backup system
Portable hard drive
-access card
-fiber optic cable
-NOC (non objection certificate)
-turing test
-body (hardware) DNA (software)
-wet-ware
Fire-sell -3 steps systematic attack
	  -transportation (off)
	  -financial based & telecom (off)
	  -gas, water, electricity, nuclear (off)
-spam emails
-mailing list
-website is live
-same link
-invaluable website
-file executing
-destroying him
-taking backup
-recovery data
-ups patch re-update
-halocarbon fiber suspension system
-air-control system
-floppy drive
-proxy account
-special landline connection for being untraceable
-secondary phone
-microphone
-developing stage
-transaction fees
-AMA (ask me anything)
-talkgold.com
-sceptre.com
-pineapple wifi
-showing them fake landing page
-deploy 
-high traffic area
-sweep on area
-going mobile
-compression ratio
-grown up rebuilt
-zip file bomb (decompression bomb)
-admin access
-disk is spinning at 100% 
-fork bomb
-not responding
-crash
-servers are down
-domino effect
-overheating
-data storage network
-Mac addresses
-self-correcting
-libraries to firmware
-wire transfer
-compressing the manifest
-extension cords
-root-kit
-server bootup (virus also reload)
-Cs30 ,cs51
-linear tap
-thermostate
-systematic hacking
-Apn
-payload
-penetration phone (pawn phone)
-navigation system
-computer record
-unlimited access
-sabotaging system
-rectifying database
-system format
-making signature operating system online
-pager
-virtual world
-recording brain memory
-isos
-activating of telephone line
-changing of IP address constantly
-Trojan horse virus
-mirroring
-daemons
-advance moves by reading documentation
-intrusion in system
-breaching firewalls
-launching cyber nuke
-frying system
-blocking all IDs
-autopilot
-access denied
-auto function
-self destruction 
-biometric access
-call recording
-AI images
-premium text presets
-graphic templates
-cinematic sound pack
-2 factor authentication
-read access
-credit card information
-


Audruino


[VirusTotal.com]
[AlternativeTo.net]
[FileHippo.com]
[hdtodaytv.nl]
[capital trade]
[litsolutions.org]
[prmmovies]
[imfdb]
[wikipedia]


Joma:
-programming = telling set of instructions to computer what to execute
	       computer can generate bugs not because of them but because of human's code
-academic career
-resources, contacts
-MVP (minimum viable product)
-dropbox
-leveraging amazon CDN, load balancer, lambda's
-modularise using infrastructures using micro-service
-elastic scaling
-cost efficient solution
-Node js backend + react frontend
-crawler for searching best Video
-writing pipelines to funnel them in website
-more request handling by servers
-first company generally means best company
-brand themselves however they want
-pivot
-target market
-active users
-extension to make things easy
-logging every website
-duel match
-catching errors
-transition between android & IOS
-consumption smoothing (stop using this excuse to more)
-blockchain -liquidity on table
	    -liquidity provider
	    -decentralised reserved currency
	    -stability, credibility, utility 
	    -addiction in investing on different finance product
	    -getting rich on paper
	    -getting real cash by dumping fake government token on them


Animation:
-24 frames per second usually
-12 frames per second & 6 FPS when low in budget
-story, character, humour, story telling
-voice comes 1st before animation
-12 principles of animation
-rigging character fir moving arms & elbow
-there is no limitations in your story


[GRE]


Accessing Dark-web safely:
-Snowden level security
-dark web has tones of legitimate uses
-you stuff is for sale in this place (passwords, emails, logins)
-perfect breeding ground for all types of illegal activity
-


Social networking hacking scene:
-university used to have public directories for students & faculty
-Harvard various houses like Adams, Lowell, Kirkland
-apache is most widely used web servers own internet
-uses indexes (can get pages that returns with links to every image used in certain directory)
-wget = network utility that comes with Mac/ linux used to download files from internet
-wget -A.jpg -r -nd(we want any file with jpeg file extension)(recursively download each file until no more remaining)(don't create anymore directory)
-empty search returns all record
-emacs
				

Interview:
-take it easy
-PRP 100
-listen carefully
-do coding questions faster
-use hacker earth 1 to 1
-speak out loud


Hacking:
-sending email with dangerous links inside


VPN:
-virtual private network
-without VPN anyone can track your IP addresses & even your location
-encrypted
-highly secure 
-AWS (EC2 = sever helps us to deploy virtual machine in cloud)


Raspberry pie:
-SD card


CPU/GPU/DPU:
-using Vm ware we can take all server & take them all in 1 server
-we have switches, routers, firewalls & all kinds of security appliances
-encrypting & decrypting traffic, transferring lot of data, network going faster CPU is slow
-GPU is only for graphics & AI stuff
-Ethernet cable NIC
-DPU = offload stress from CPU
	server inside server
	network traffic is coming to DPU
	has its own OS
	firewall is installed in DPU
	more RAM, power efficient, high performance data


Reality of social media:
-ads goes to those who can afford them
-attention of people is most valuable thing
-ads are shown where more audience is there
-taking data of people
-make patterns with data
-data scientist
-like, share, comments are like trackers & digital footprints
-avoid accepting cookies
-third party cookie
-google advertising, Microsoft advertising, amazon advertising, Facebook audience network
-multiple times enquiry
-conspiracy theory
-they just want you to keep on using their apps
-sleep is biggest enemy
-data mining & targeted content
-don't use all social media applications 
-far right & far left people comes in lime light
-everything is interconnected


AI on software engineering impact:
-no 1 has seen future
-engineers are decreasing
-job opportunities have increased (many companies are opening their tech centres)
-startups are increasing day by day
-need of engineers will always be there (skilled 1s)
-competition has increased very much as compared to jobs supply
-memorising DSA cannot help you (understanding things is really important)
-Zerodha has only 32 engineers team
-fundamentals should be very clear to clearing all bugs
-use your AI to do your work
-you will get job 


Remote work taxes:
-scenario-1: staying in India working for an Indian company
-they talk in basely not in CTC
-maximum 30% taxes on more than 10 lakh rupees
-contract based = 30% taxes
-full time employee = hired on paper by Indian company (remote.com, deal.com)(same tax slab)
-PF component (non-taxable) (insurance & FD)
-labour laws 
-freelancing (getting 44ADA only on 50% of your income)
-depreciation & appreciation in Rupee & dollar should be considered
-Singapore & Dubai has really low taxes
-getting your income in USDC (has both pros & cons)
-having an amazing open source profile


Open source contribution:
-competitive programming is not that important
-no discrimination
-next level work culture outside India (going globally)
-platforms are free to access, use, modify (sometimes depends upon your licenses)


Discrimination from companies:
-Not from IITs, not from CS branch, not from degree
-learn from other experiences (take guidance from strugglers)
-go global & not only in India
-take guidance from extraordinary people
-The more desperate you are for early success the more vurneable you are for misguided
-always believe in yourself
-challenges, hardwood, struggle are different things
-some people go from 1 to another to another & then go to big tech companies
-some people get directly their desired roll


73 job offers stories:
-be heavily involved in open source
-Masters can be good option after Bachelors (not necessary you have to do that)
-take help from community
-getting people involved in cloud native projects
-designing entire production engineering curriculum for MLS fellowship
-doing lot of evens & workshops with Facebook engineers
-creating your own luck
-don't rely on college or anyone 
-always try to do challenging things & keep learning new things
-learn while contributing
-bootcamps & course
-communication as engineer is very important
-co cloud, cncf
-experience is really important
-always focus on numbers


Are remote jobs secure:
-might not be secure
-work-life balance is better
-still remote jobs are best
-both big tech companies & remote companies can be risky
-15-20 years of money made in fang companies can be made in remote companies in just 2-3 years


College placements if not sitting:
-if your college has decent placements then have backup plan
-never argue with teachers at any cost
-many college are not supporting & have toxic environment (but its ok it makes you stronger)
-resume template story
-just go with flow say yes to them (naan sir, ok sir, bilkul, bilkul, bilkul)
-what they think about you does not mean anything to you 
-what your community members & co-worker think about you matters
-you need to prove anything to anyone


Web scraping:
-data on internet is very deep (data mining)
-puppeteer (headless browser) (hatch bunch of different API method that help you parse webpage)
-finding trending products on eBay --> build dataset --> GPT4 to analyse that data (write reviews, advertisings, ad copy, automate any other task) --> 
-(amazon don't want traffic of bots & may block ip address)
-bright-data provides proxy network
-connecting to remote browser
-(access bank parameter)
-don't have to worry about proxies & drivers
-scrapping at scale 
-using chrome driver
-process of automatically extracting data from website 
-website employees javascript or requires some users interaction (clicking & hovering)
-headless browser = not required any graphical user interface that run in background (controlled by  programming language) (no GUI)
-stimulates human interaction with website enabling developers to scrape data 
-protected by protected software (may lead to block)
-GUI browsers are less likely to be detected by bot retention
-scraping browser (uses high level APIs (puppeteer, playwright) (capabilities for unblocking websites) (solving captchas, browsing fingerprints, selecting headers, cookies
Rendering javascripts)
-no popup window
-bypass blocks
-CDP protocol 


Content Delivery Network (CDN):
-makes your website faster


Virtual radio access network:
-Radio unit
-base band unit
-virtual central unit
-virtual distribution unit


Twitter vs linkedin:
-twitter is better for developer community
-highly customisable in twitter
-be active on both


Clean-code:
-documentation comments (used when people are consuming your API) & clarification comments
-explain functions with doc code
-use naming convention rather than always using comments
-don't comment your code just delete it
-use Guard clauses when writing heavy code like game development
-every class should have only one responsibility
-don't unnecessarily refactor your code
-there is no such thing called perfect code
-refactor small bits at time
-show code idea & do code review


-desktop environment


ReactJS:
-declarative, efficient, & flexible JavaScript library
-improve speed
-JavaScript virtual DOM is faster than the regular DOM
-develop User Interfaces (UI)


Switch:
-ethernet cables
-comes in different sizes (8 ports/ 48 ports)
-electrical signals
-its smarter than hub
-packet tracer
-ping message (ping IP address)
-stores information in CAM table (content addressable memory)
-MAC address (layer 2 address)
-physical wire & electrical signals (layer 1)
-switch frames layer 2
-wireless connection is more like hub


Linux:
-terminal emulator = let us use terminal in graphical way
-shell = CLI (take all my commands as inputs --> output)
-root = username of current user
-hostname of server
-executable file
-Commands:
-ls -a
-ls -l
-ls -al
-ls -R
-open . (Opens home directory)
-cd ../pictures
-mkdir foldername
-cd (change directory)
-cd .. (going back folder)
-echo $PATH
-.bash/ bash rc/ bash underscore files
-cat .zshrc
-cat /etc/zshrc
-cat ~/.zprofile
-one path: another path: existing path
-export MY_PATH = "Ankur"
-pwd


Algorithm trading:
-equal weight version of S&P 500 
-we some APIs
-making & using computer to make investment decisions
-python is often used as glue language to trigger code
-numpy has numpy-array which allows to store & manipulate 1 & 2 dimensional data-structure 
-backtesting in as many market as possible is good
-real API token
-sandbox API token provides random data & free
-IRS code API
-generating excel documents of executed trades
-interact with your software & potentially control someone else software
-IE x cloud API
-database of financial data & importing that into our python script
-GET request to gather data from IEX cloud API
-POST add data to database exposed by API (create only)
-PUT add & overwrites data in database exposed by API (create or replace)
-DELETE deletes all data from API
-


Trading system:
-I5 processor, 8GM ram, 500 GM hard drive, 128 GM SSD & 8 monitors
-viewing different charts 


Programming concepts:
-recursion = going deeper & deeper until reach base case
-Big O notation = calorie count of code (low calorie count --> low big O)(efficient & code's speed)
-Lambda function = secret agents of code (short, sweet & to point) (quick operation & disappear leaving no traces behind)
-functional programming = no side effect, no mutation, just pure clean function
-memoization = cheat sheet of code, saves result for later use instead of recalculation over & over again
-monads = black sheep of code, incredibly powerful, (box to put your code in), suddenly code becomes easier to work with
-continuation passing style = passing code from 1 function to next (passing in relay)
-higher order function = take other function & turn them into something powerful
-category theory
-tail call optimisation 
-constructor = special method used to create object (when created constructor used to call & initialise object)
-overloading = ability to define multiple methods (same name & different parameter)
-single responsibility principal = ever class has 1 responsibility
-open closed principals = 
-mutability = ability of object to be changed after its created
-


Risk in software engineering:
-slip disc, lower body pain, obesity, sugar, multiple deficiency can happen (just stay fit & exercise daily & you will be fine)
-buying good chair is important for body posture
-getting some sunshine is important
-avoid caffeine
-professional goals are temporary but personal life is permanent
-your learning is much more important than your earning
-be open mind try to be friendly as much as you can
-best software developers are made through collaborations
-be ready to work overtime (it can happen sometimes)
-rapid changes in industry
-exploitation is very high
-negotiation is important


[There are not much good software developer out there as long as you are good 1 you will get job & paid well]


Arduino:
-electricity = type of energy travel from 1 place to another
-static electricity = electricity gathers in 1 place
-current electricity = moves from 1 place to another 
-lightning also happens due to static electricity
-similar charges repel & different charges attract
-atoms = protons & electrons
-static electricity may damage electrical components
-always put components in anti-static packets
-voltage = force make electrons moves in wire (electromotive force)(EMF)
-water analogy = less pressure means less water flowing
-current flows opposite to direction of electron (I=q/t)
-current always takes least resistive path
-microprocessors = brain of any computer (CPU) + need additional peripheral (RAM & ROM)
-micro-controllers = integrated chips (tiny components & powerful enough to do many task like controlling motor pumps other appliances, sending sensor data to internet cloud, basic displays, intermediate level robotics (has inbuilt flash chips)(cheaper than microprocessor)
-arduino board = circuit board with microcontroller on it
-hardware & software is open source
-no need of assembly language
-technical specification = atmega328 (main chip), operating voltage (5V), input voltage recommended (7-12V), input limit(6-20V), 14 digital I/O pins(PWM capable), 6 analog pins (use to connect Arduino sensors to arduino), ADC (analog to digital converter), I/O pins capable of 40mA DC current/I/O pin), DC current for 3.3V pin pf 50mA, flash memory (32kb)(0.5 used in boot loader)(1000-2000 lines of code), SRAM (2kb), clock speed (16mHz)
-Text-editor + compiler = bear minimum requirement for coding
-USB cable (specific serial port)
-LED blinking means successfully uploaded code
-breadboard = meant to make quick non-permanent connections between electronic components, covered with tiny socket holes connected in rows
-cannot connect to any pin more than 5V
-never connect 5V pin to ground pin (short)
-cannot connect + & - terminal of pin
-usb power is more than enough
-sensor signals = output 
-processed signal (depends of programming) = input
-input and output devices are fixed reference to computer
-Input devices = rotatory potentiometer, force sensing resistor, light dependent resistor, triple axis accelerator, Joystick, touch sensor, rotary encoding, ultrasonic distance sensor, temperature sensor, temperature & humidity sensor, infrared sensor
-Output devices = light emitting diode, RGB LED, buzzer, loudspeaker, seven segment display, dot matrix display, DC motor, servo motor (stopping at particular angle), stepper motor (entire rotation is dived into equal steps)(lifting heavy load)
-signal = time varying quantity(voltage or current) with some sort of information (video, audio, encode data)
-serial monitor


Routers:
-connects network
-ARP
-broadcast address


Age limit in software engineering job:
-There is not age limit but you need to be skilful
-hard-work is important
-try to start as early as possible


Fiber optic cable:
-extremely fast internet (1GB/sec)
-old copper ethernet cables were good but 
-not electrical signals but light pulses travelling through this cable (31% slower in speed) (100s of TBs per seconds)
-it can go even further & crazy far (upto 100kms or 60 miles) (without hurting signals)
-very low attenuation rate
-attenuation = any medium rate at which signal decreases
-advantage over ethernet 
-no EMI & no electromagnetic field issues
-single mode fiberoptic = core is small (5-9 microns) (more expensive) (helps in connecting buildings, campuses) (uses glass)
-multimode fiberoptic = core is big (made up of plastic or sometimes glass) (10x than single mode fibre) (50 & 62.5 microns)
-need to use repeaters to repeat light signals
-Total internal refraction (not exactly speed of light because of going into another medium)
-never ever bend your cable
-critical angle
-cladding = special layer around core to prevent light from going outside
-more expensive than ethernet
-making sure to have right connector with right cable
-duplex fibre optic cable = goes both ways (receiving & transmitting)
-SFP (small form factor pluggable)
-helps in connecting floor switches & my IDF closets & main server
-ton of bandwidth 
-FS community 


APIs:
-some api can also on run on server-less function
-most api are free & open-source & free tier
-alpaca = mix of stripe(payment processor for developer) & robin hood (easy way to trade 0 commissioned stocks)
-web-socket protocol
-real-time updates without polling server
-every receipt, invoice, documentations are stored in pdf
-words Api = generates insane amount of data & information of one word/ if application has some language feature/ 
-IGDB api = robust gaming database
-crowd sourced internet databases is an awesome thing
-


Project ideas:
-making pixelated version of artwork & having to guess what that artwork is ???
-


Elon musk way of coding:
-best part is no part & best process is no process
-simple machine are best (less errors)
-built simplest possible logic
-internal combustion engines are complicated than electric engine
-most complex takes more time
-keep on adding feature later on


Scaling API Design:
-tricky part is to have cohesive sense of platform 
-portfolios of api
-thought-works technology radar every year (great source for trending technology)
-we want to look our api to like product that customer see & not like system they are build on
-


Installing linux in system:
-install iso image file
-Rufus software or universal usb installer
-create a bootable pendrive
-unplug your pen-drive
-f12 key in dell laptop & f10 key in hp laptop
-boot from usb storage


E-commerce business:
-sales is important
-


YouTube algorithm:
-click through rates
-watch time 
-retention rate (how much video person watches in percentage)
-if video speed = 25% less (retention rate increase to 400%)
-community guidelines


Dark web:
-never ever open this (only when you are pro)
-.onion
-tor & onion browser
-90% content is illegal & fake also
-never click on any pop up ads or even cross 
-impossible to ban it
-task forces
-monitor dark web
	

Programming options:
Full-Time Employment = Working as programmer for company on salaried or hourly basis
Freelancing = Offering your programming services independently to clients through freelancing platforms
Software Development = Creating & selling software products, such as mobile apps, web applications, or desktop programs
Web Development = Building websites for individuals/ businesses
Mobile App Development = Creating mobile applications for platforms like iOS or Android
Game Development = Designing & developing video games for various platforms
Web Design = Focusing on visual & user interface aspects of website development
Consulting = Providing expert advice & guidance on technical matters to individuals/ organisations
Teaching & Tutoring = Sharing your programming knowledge by offering courses, online tutorials, private tutoring
Open Source Contributions = Contributing to open-source projects & getting paid through sponsorships, donations, grants
Software Maintenance & Support = Offering ongoing maintenance, updates & technical support for software applications
Remote Work =  Working as programmer remotely for clients companies located in different geographical regions
Bug Bounties = Participating in bug bounty programs, find & report security vulnerabilities in software exchange for rewards
Algorithmic Trading = Developing trading algorithms & software for automated trading financial markets
Content Creation = Creating programming-related content, tutorials, videos, blog posts, monetising it through advertising & sponsorships
Building & Selling Digital Products = Creating & selling digital assets like themes, templates, plugins for websites software platforms
Data Analysis & Visualisation = Utilising programming skills to analyse & visualise data for businesses/ researchers
Artificial Intelligence & Machine Learning = Developing AI models, algorithms, applications for various industries
Internet of Things (IoT) = Building software solutions & applications for IoT devices & systems
Blockchain Development = Working on blockchain projects, developing smart contracts, building decentralised applications (dApps)
Software Testing = Offer your expertise in testing software for functionality, performance, security, usability issues
UX/UI Design = Combine programming skills with user experience (UX) & user interface (UI) design to create intuitive & visually appealing software
Code Review: Provide code review services to help developers improve the quality, efficiency, and maintainability of their code
Technical Writing = Create documentation, tutorials, technical articles on programming topics for software companies, blogs, publications
Project Management = Utilise your programming knowledge to manage software development projects, including planning, coordination, & resource management
Virtual Reality (VR) & Augmented Reality (AR) = Develop VR or AR applications, games, experiences for various industries
Ethical Hacking and Security Consulting = Help organisations identify vulnerabilities in their systems & provide recommendations for improving security
API Development = Design & develop APIs (Application Programming Interfaces) that allow different software applications to communicate & integrate with each other
Data Science and Analytics: Apply programming skills to analyse and extract insights from large datasets, perform predictive modelling, or build machine learning models.
E-commerce Solutions: Build custom e-commerce platforms, shopping carts, or payment gateways for businesses.
Cryptocurrency & Blockchain: Develop blockchain-based applications, smart contracts, or cryptocurrency-related software.
Automation Scripts: Create scripts or tools that automate repetitive tasks or streamline workflows for individuals or businesses.
Voice Assistants and Chatbots: Develop voice-activated applications or chatbots using natural language processing (NLP) technologies.
API Integration: Assist businesses in integrating third-party APIs into their applications or building custom APIs for their services.
Cloud Computing: Provide expertise in deploying, configuring, and managing applications and infrastructure on cloud platforms like AWS, Azure, or Google Cloud.
Software Localisation: Adapt software applications to different languages and cultures, ensuring they are culturally appropriate and function correctly in various regions.
WordPress Development: Specialise in developing custom themes, plugins, websites using WordPress content management system
Internet Marketing and SEO: Help businesses optimise their online presence, improve search engine rankings, or create effective digital marketing strategies.
Mobile Game Development: Create mobile games for platforms like iOS and Android, leveraging your programming skills and game design knowledge.
IT Support and Troubleshooting: Provide technical support, diagnose and fix software or hardware issues, or assist with system administration tasks.


TUTORIALS:
Sorting Algorithms:
Selection sort:
-selecting an element & putting that in right position
-swap with correct index
-can be done with both minimum & maximum element
-if n elements then there are n-1, n-2, n-3, n-4 comparison
-total comparison = 1 + 2 + 3 + .... + (n-1)
-runs good in small arrays / lists
-already in correct position & ignore it


Hash-map:
-items are not in sorted order
-


Count sort:
-non-comparison sorting algorithm
-good for smaller numbers
-frequency array is when index number = element number
-way too simple
-ideal best way is to use array


Radix sort:
-divides number into buckets & sorts it according to it
-initially its going to take largest number (more numbers of digits)
-1s ,10s, 100s place
-sorting array using count sort
-digit by digit starting from least
-faster than quick sort or merge sort (for big data)
-growing linearly with number of digit


Huffman Coding Greedy Algorithm:
-reducing size of an algorithm
-any & every digital information in this world is in form of bits (0s & 1s)
-lossless compression algorithm (data will not be lost)
-2 hash maps (encoders & decoders)
-transform sequence of some character ---> bits (encoder)
-decoder (opposite of above)
-passing main string
-making frequency map
-for every key in frequency map -> create node -> insert node in minimum heap/ priority queue
-remove 2 element from heap & combine them
-insertion & removal


[gates notes]


Springboot:
-always install long term support JDK on your system, apache maven, 
-framework to built web & enterprise application in java
-makes easy with minimal configuration to make production ready applications
-development process is simplified (set of tools)
-spring-boot is part of larger spring ecosystem (boiler plate code & more beneficial) 
-spring framework you have to do many things manually (like dependencies, configurations)
-focus on developing rather than doing all configurations 
-setting up http requests & management of databases
-use spring initialiser
-we don't build in xml file
-you can also change maven path in settings of IDE
-spring-boot annotations 
-creating controller to handle http requests 


Load balancer:
-NAS (network attached storage) or plex server 
-you need load balancer called kemp 
-few websites
-by exposing only 1 port in network you can securely access anything from anywhere
-only 1 public address 
-every website using SSL certificate
-Kemp 
-you need to be host on hypervisor (esxi or kvm)(proxmox)
-cloud flare account & domain name
-when so much of traffic happens (CPU is crashing, ram is freaking out)
-load balancer distributes traffic systematically
-running website with millions of users & immensely popular
-sending traffic out into in internet (cloud)
-putting load balance between application server & cloud internet
-
-dynamically serve according to need
-round-robin = 1 - 2 - 3 - 1 - 2 
-smart load balancer 
-random select 
-9 algorithm


Hacking tactics:
-


Machine learning:
-Mimic human brain (jaarvis, ultron, terminators)
-estimating result form previous data 
-machine learning (way to achieve AI)
-y = mx + c (m & c are given by machine)
-generalised answer ---> formula ---> future prediction
-taking sum of all errors & trying to minimise error as much as possible 
-model trained when reached point of minimised error 
-replaying algorithm with artificial neural network (deep learning)


Linear search:
-checking each element in array until you get what you want to search
-index value & I pointer
-best case O(1) constant (not depending on size of array)/ worst case O(N) (you do not find item after checking entire array)
-time & size graph is going linearly (worst case)
-straight horizontal line graph (best case)


Putting up website online using GitHub:
-using GitHub pages (free, easy to use, helps us to follow best practices)
-repository is basically like folder
-upload existing file
-you need to buy domain name from domain registrar (company that are certified to sell domain name)
-.com = cost around $10-$15/year
-namecheap
-web-server = just piece of software that communicate with browser
-by typing URL in browser we can ask web server for certain files
-web servers are just software they need computer to run
-server running on web server 
-Setting up DNS record inside our Domain registrar 
-taking IP addresses & making DNS record for each of them
-setting up subdomain name
-could take up to 12-48 hours for domain to register


Different roles as software engineering:
-SDE (software development engineering) (good knowledge in DSA & good projects can help you, competitive coding) 
-Tester (quality assure engineer) (QAE) (making products) 
-software development engineer testing (both development & testing)
-DevOps (operational team that put that feature into servers & managing server & high traffic) (operating system & computer network)
-cloud architecture (making full architecture of business of company)
-data engineer (structured & unstructured data & scrapping data 
-data analyst 


Docker:
-micro-services are the future
-when your download particular module --> you are unable to execute (because of errors) --> mismatch of modules
-when company releases new package --> they upgrade & depreciate lot of existing functions & module 
-key (software) --> value (version)
-containerisation is more optimised solution than virtual machine
-without docker engine there is no point having docker container
-virtual machines have their own operating system, dedicated storage & CPU
-host engine is where you install docker & docker engine handles container (like an entry point)
-docker containers are light weighted & you can easily transport them
-docker container = lunchbox (contains programs, dependencies or libraries & configurations (recipes) or settings)
-program is heart of docker container


[codechef]
[codeforces]
[coding-ninja]
[hackerrank]
[MLH fellowship]


[never do unpaid internship]


Product vs service based company:
-improving of products = product based company (hires specific people) (difficult interviews & more technical)
-service based company = outsourcing service based company for making their product


Things to remember in interview:
-always know what their requirements are & what they are expecting from you
-ask questions
-accept what you know & what you don't know
-always dry run your code in your mind & be confident
-there is actually no language barrier
-practicing variety of questions is important
-quality of code is important


[automation, testing, full stack web development, backend development]


BlockChain development roadmap:
-blockchain is basically like network of different blocks
-Web 2.0 (login, signing, liking, posting & so on)
-Web 1.0 (only Html, css, & barely some javascript)
-Web 3.0 (nobody owns your data) (transaction can be accessed by anyone) (network of block)
-no technology till now to hack all block chains
-written or smart contacts is extra thing to write in block chain
-javascript, typescript, python
-solidity programming language to write smart contracts
-gas fees for doing any transaction
-polygon/ solana
-remix IDE/ hardhat/ mocha
-NFT (non fungible token projects) (opens/wallet app)
-finding open source projects


Aptitude test in coding interviews:
-mathematical problems, blood relation, train problems, time & work, English, profit & loss
-math problem 
-never be overconfident
-never memorise maths
-start preparing form 3rd year
-study from videos
-give mock test (very important)
-never take any question on your ego 


Git & Github & Github desktop:
-git = type of software called version control system & tracks & changes the file which tracks changes to file (runs on command line)
-GitHub desktop = program that runs on git on your computer
-detect all code changes & can record different version of files at different point at time
-each developer can work on copy of project on their own computer (copy is stored in folder connected with git called local repository)
-developers can send their code changes to main repository stored online & get code changes made by other developer 
-collaborating with other users & discover other open source repository
-branches are 1 version of codebase & you can have multiple branches
-


Uploading any folder or file in Github or git:
-adding --> committing --> pushing


Git and GitHub:
-project folder 
-collaboration with new people
-GitHub held us to identify who, when, which about project
-CIL (helps us to manipulate file structures using commands)
-remote = working with urls
-our code that not finalised yet might contain some errors (should go on separate brach where users are not affected)
-commits are pushed
-git status
-git add . 
-git commit -m "rollno modified"
-git log
-ls .git
-git remote -v
-git push origin master


Backend developer:
-Node Js = runtime that allows us to run javascript on server
-most servers are written on java & php
-when request is received we can use node to handle that request (listing URL that points to your server)
-lots of low level implementations
-nvm package for Mac & linux
-REPL (read of owl print loop)
-ctrl + c (to stop terminal)
-allow node to push intensive operation to separate thread (very fast non-blocking operations happens)
-file system = file system module called fs (read, write, delete files)(blocking & non-blocking)
-promises are asynchronies & non-blocking
-module = javascript file that executes its code node & has bunch of built-in module like fs
-npm = node package manager
-express = web application framework & most popular 3rd party node modules
-never touch node module
-app engine of google


Web-sockets:
-building 2 way connecting between client & server
-multiplayer game & leaderboard is constantly changing
-how to broadcast update -refreshing browser window every 2 seconds
			-using interval takes data every few seconds to pull server for new data
-TCP/IP 
-bidirectional connection (connection stays open until 1 party drops off) (TCP resources will be unallocated)
-full duplex connection
-webRTC
-webTransport


How you-tubers update their videos automatically:
-API (2 pieces of software talk to each other)
-REST (representational state transfer) (restful apis are stateless) (clients & server don't know anything about each other internal state) (simply passes messages back & forth)
-get request = accessing data but not modifying it
-post request = making some new data on server 
-YouTube has API explorer (we can look at raw HTTP messages)
-URL = resource or entity & verb defines what you want to do do with that
-header = contains additional metadata about request & also about authorisation
-status code = tells what happened to request (200 -> good, 400 -> something wrong, 500 -> server failed)
-body = actual content that server sending back to client
-cloud function = making calls  & with nodes runtime
-SDK simplifies making call to API 


Firebase:
-backend-as-a-service (Baas)
-SDKs are highly optimised
-need nodes installed in your system
-firebase is just extension for google cloud platform (helps to connect with backend cloud infrastructure)
-app can be for IOS, android or javascript that share same database & backend server
-firebase CLI (connecting command line to cloud)
-firebase hosting = web application will be deployed (storage bucket available on internet)(making app more fast around world)
-


Recursion:
-


Being up to date about software engineer:
-make learning part of your job
-follow on twitters
-attend events


How CPU works:
-programming language code --> executed as machine code in cpu 
-CPU (carefully crafted piece of metals & silicons contains billion of tiny transistors)
-modern chips contains billions of transistors (that can be flipped billions of times per second)
-state of CPU synchronised by oscillator known as clock generator
-gamers sometimes overclock their CPU to gain more performance at cost of high temperature & low life expectancy
-connecting with RAM (instruction cycle) 
-fetch phase = set of software program store in RAM & CPU has registers temporarily store address & memory to interact with
-decode phase = control units parses actual bits in instruction (opt code contains instruction (add/subtract) & operand is address in memory to perform that operation on)
-execute stage = takes decoded information passes it as electrical signals to relevant parts of CPU
-ALU (arithmetic logic unit can perform maths & store result in RAM to change state of the program
-Cycle is repeated billions of time
-modern chips utilises multiple CPU crore to run multiple computations in parallel
-apple machines are beating intel machines
-apple silicon chip is collection of many chips (system on chip) (faster & energy efficient)
-CPU, GPU, IO engine, ML controller are all co-located 
-Intel machine = CPU as single chip & memory is located somewhere else on motherboard (more time consuming & more energy needed)
-c & c++, javascript, mobile apps, unity = M1 cheap works best
-.net apps = Pc with windows


Fancy Programming Words:
-idempotent = operation when applied multiplied multiplied many times produces same result (get, put, delete always implemented in idempotent) (For example payment system)
-ephemeral = last for specific time (RAM is ephemeral) & (hard dish is persistent memory can be retrieve later) (used in cloud computing)(instead of persistent servers we can have ephemeral servers)(ephemeral IP address = address reassigned after server shuts down)
-anonymous = global group of hackevist fight against censorship (defines functions don't have name & functions defined as argument)
-predicate = function that return single boolean value (true & false)
-memoization = cache return value of function 
-abstraction = process of hiding implementation details from end user
-serialisation = java does not understand php code but we can take code from either language & serialise it formate that both can understand (taking data --> converting into more generic formate understood by other program)


Roadmap for software engineering:
-java -> DSA -> levelling up (300 questions) -> participate in leet-code contest every Sunday 8) 
-> sorting algorithm -> DP & graphs -> development (minimum 3 projects) 
-hackathon, competitions, workshop
-profile, LinkedIn, resume
-post on liked after 10-15 days milestone
-contests are important
-mock interviews are important
-learn to code in docs also
-speak in English & speak little loud


File system in linux:
-hierarchy standard 
-bin directory = contains binaries or executable essential for entire operating system
-Sbin directory = contains system binaries only executed by root user
-many of these binaries shares common libraries stored in lib directory
-/usr with its own bin & sbin directories (binaries or applications are non essential to operating system itself & intended for end user)
-/usr/local/bin = contains any binaries that completely manually to provide safe place that won't conflict with software installed by any system package manager
-all these binaries get mapped together with path environment variable (you can execute them from any directory in terminal)
-/etc directory = editable text configuration (you can modify them in editor)
-linux can support multiple users 
-/boot = contains file needed to boot system like linux kernel itself
-/dev = device files (you can interface with hardware or drivers as they were regular files) (creating disk portions or interface with floppy drive)
-/opt directory = contains optional or add-on software (you will rarely interact with it)
-/var director = contains variable files that will change as operating system is being used (like logs & cache files)
-/temp is for temporary files (won't be persisted as reboot)
-/proc directory = illusionary file system (does not actually exist in disk it created on memory on fly by linux kernel to keep track of running process


Binary search:
-optimised way of learning
-finding element in sorted array by continually chopping search area in 1/2 (example Oxford dictionary)
-linear search can also be done but maximum comparison would be number of elements in array
-we can also use while loop & recursive function
-algorithm for binary search -setting starting element pointer & ending element pointer
			    -finding middle element 
			    -if target element > middle => search in right 
			      else search in left
			    -if middle element == target element //answer
			    -if start == end //element not found
-we are not creating new array
-best scenarios of binary search = when 1st middle element = searching (only take 1 step)
-best case complexity = constant (size does not matter) (O(N))
-worst case scenario = (N/2^(k)) (total number of comparison = logN)
-order-agnostic binary search 


C:
-compiles directly to machine code & require minimum runtime support
-platform dependent & runs on specific OS
-high level language designed for human yet provide low level control over memory & hardware
-no garbage collector
-manages its own memory
-assigned an address in memory & can store that address in another variable called pointer
-when variable no longer needed you need to free it to avoid memory leak
-GCC compier
-procedural language that & does not support object oriented features


[Job Market is completely Brutal]
[Maths is highly important in life if you are good in maths at young age then advantages are next level]


Instagram algorithm:
-use lates features of Instagram & use latest fonts, songs, etc
-make your video on loop (starting & ending)
-make quality video
-find niche of your video & stick to that 
-show something that people wants or connect with
-try not to let your audience scroll down
-show something informative in your videos
-do some commitments
-give some reason to your audience to follow you
-high quality of video
-average view duration, title, thumbnail
-use premium & powerful softwares to edit your videos


C programming:
-Struck = data structure (can store groups of datatype) (strong all datatypes in 1 single data structure)(helps in modelling real world entities)
-memory addressing = access MA in C
-pointer = memory address which refers to physical address to memory of computer (treat pointer as types of data)
-dereferencing pointer = going to memory address of that pointer & grabbing piece of information stored in it


Roadmap Video editing:
-da Vinci resolve (everything it can do that paid software does)
-adobe premier pro & Final Cut Pro
-VN video editor, mix kit, motion array, Envato elements, free templates
-shortcuts
-AI tools (D-ID, Runway ML, Descript)
-show your best projects & portfolio
-reach out tones people, keep learning new things, & keep upgrading your projects


CUDA:
-compute unified device architecture developed by NVIDIA
-computing large amount of data in parallel which unlocks true potential of deep neural networks behind artificial intelligence
-modern GPUs are measured in teraflops
-Cuda allows developers to go really fast in parallel & tap into GPU's power
-data scientist all around world are using at this very moments trying to train most powerful. Machine learning model
-CUDA kernel that runs on GPU 
-final result from GPU is copied back to main memory


Cryptocurrency:
-alt coins = any there than bitcoin
-remember that some point there is everyone going to book their profit
-beauty of crypto is that it is permission less & anyone can put & launch anything 
-always think for yourself in investing
-many new blockchains claim them to be ethereal killer
-Solana is decentralised, scalable, high security
-private & public crypto
-Monaro is not traceable crypto currency & cannot read from public legure
-central bank digital cryptocurrency
-everything going to 
-holding as asset not like medium of exchange
-cutting edge technology
-strict monetary policies
-SEBI, RBI, central government relationship 
-wallets of people
-proof of stake & proof of work


Using AI to make videos for YouTube:
-Trends = using YouTube & google analysis & trends
-generating content = summarise content, rewrite existing videos & articles (down-sub website), asking GPT to write, Hinglish, writing description, generating tags
-Thumbnail = using prompt-base, hugging face, arc.tensent
-Voice = speechchelo, narakeet


Python:
-extra lines does not make any difference but indentation does
-or = either 1 in true from both
-and = only evaluates 2nd argument if 1st 1 is true
-Sort only works when there are items of same datatype
-Tuples can not be modified
-declaring our own classes & we can instantiate objects from that class
-object is instance of class & class type of object


Prisma:
-open source tool that makes it fun to work with database
-provides too much low level control 
-has its own Chema declarative (writing schema to write your data & relationship in human readable way)
-schema can be automatically inferred from any existing database
-schema converting into type definition allowing 
-code is more concise than writing in SQL
-


Pointers:
-each byte of memory has address (layer that sit son top of every game)


[always remember you can't compete with AI you can only use AI & grow even further]
[never be afraid of AI & don't listen to other people Bullcrap advices just remember when new technology comes then new opportunity comes]
[train your brains to build new algorithm]


Devin:
-project manager can give some requirement to Devin & respond by creating plan of action --> goes to web to get some API documentation
-Devin is already smashing other tools on software engineering benchmark
-can also train its own AI model


CSS:
-Flex-box -flexible way of using items in rows & column
	  -flex container has control of how it flex children are placed (rows & column direction)
	  -main axis = horizontally & cross axis = vertically
-animation -change from 1 css file to another per dimension of time
	   -every animation has 2 states starting point & ending point 
	   -tween animation 
	   -linear timing function
	   -multi dimension arrays of list 


Discord:
-chat service dedicated for gamers
-creating channels, groups in discord
-sharing knowledge, memes, discussion board
-chatroom culture
-IRC (internet relay chat) (separate chatting protocol)
-being an admin is full of responsibility


Spreadsheet Excel:
-


[whenever you see that other technology or branch has more opportunities feel free to shift your career at the end you are an engineer]


BootStrap:
-most popular front-end framework
-20% of all websites are madly bootstrap
-development speed
-responsiveness
-provides cross browser compatibility
-large community
-customisable
-emmet create boiler plate code
-Grid system 
-


Vs code
Renewable energy
Hiring managing interview
Behavioural job
Coding & system design interview


Animation:
-light novel(original source) --> manga --> anime/games/live action movies
-manga 
-script --> 2D animation (traditional animation) --> 24 minutes episode has 15000 frames --> key animators & young animators
-visual FX, sound FX, editing team, voice acting team
-3D & 2D merge


Clean code:
-gives you feeling of satisfaction
-
-overly descriptive comments even if it looks self explanatory
-some comments are used to automatically generate website (code of website picked by website)
-not dockerising your application
-good project -how quickly can new contributor setup project
              -how quickly can they make change & test them locally
-async APIs
-not having env files (single top-level env file)
-not getting rid of unused code
-long function
-new contributor comes (he/she should understand what is inside your code)
-eating up errors (instead use promises)
-language specific packages
-CI/CD for test & lints (add basic test throughout your code base)
-


Rust:
-memory saved complied programming language
-delivers high level simplicity with low level performance
-popular choice for building system
-used in game engines, operating systems, databases
-excellent choice for targeting web assembly
-most loved programming language
-traditionally high level languages provides garbage collector to nerf your control over memory management
-no garbage collector but secures by borrowing & ownership (by default every variable in rust is immutable which allow values to be used in stack memory which has minimal performance overhead)
-variables with unknown size at compile time stored in heap memory 


[Jobs will never end those who says there is no job in this field is because they themselves did not get job]
[In corporate world there is fresher's tag, get rid of that tag as soon as possible]


Assembly Language:
-low level programming language to simplify instruction fed into computer CPU
-human readable abstraction on top of machine code (don't have to count manually 1s & 0s)
-assembly still used to access bare metal hardware & to address low level performance issue, often on device drivers, & embedded system
-assembler


DevOps topics:
-devOps = can be termed as concept, collection of tools, philosophy, culture
-skills - operating system, linux (knowledge of commands)
	-good knowledge about user-management, chmod, user add
	-virtual machine knowledge & cloud offering by different companies
	-automations by bash scripting & shell scripting (bash, sh, zsh) (golang) (cloud native)
	-nginx, apache web server, tunneling concepts
	-reverse proxy, normal proxy, traffic
	-python is very useful
	-logic building is important
	-basic networking is important (debugging DNS, IP address, system communication, ISP)
	-git & GitHub (push, pull, clone, fork, pr, issue, beaching strategy, rebase, conflict resolving, GitHub actions, advance GitHub)
	-99% time you will work on cloud
	-network, compute, storage (AAS, PAS, SAS)
	-GCP, AZUR, AWS (big 3)
	-CI/CD, IAC
	-DO, tivo, scalway
	-docker (containerising tool), virtualisation, OCI, CRI, google registry
	-kubernetes
	-pipeline (CI/ CD)
	-Jenkins 
	-modern CI
	-flux, argo
	-terraform 
	-monitoring, security (devsecobv)
	-metric, logs, traces, profiling
	-chaos engineering & policy engine
	-CICD, IAC, troubleshooting, observatory


Turing complete:
-automatic machine
-infinitely long piece of tape divided into sub cells that can hold 1 & 0
-tape runs through machine that can read & write data in 1 cell at time
-support loops & conditional branching
-compute any program as long as you have memory


Database Paradigms:
-key-value = structured like javascript object or python dictionary (every key is unique & points to some value) (Set command & Read command) (data modelling options are limited) (millisecond fast)
-wide column = each column family holds set of ordered rows & possible to group data together (does not have schema & can handle unstructured data & CQL language) decentralised & scale horizontally
-document = document oriented database mangoDb, fire-store, dynamoDB, couchDB (each document is container for key value pair) (unstructured & don't required schema) (field within collection can be indexed & organised into logical hierarchy) (you are encourage to stress data in single document) (writing & updating data can be very complex) (best for most apps, games, IOT) (not ideal for graph)
-Relational database = each part has serial number for unique identification & organising data in smallest form
-graph = 


Git pull request:
-pull = way to submit contribution to another developer repository
-fork = maintains link to original upstream repo (you can pull changes when necessary)
-clone = download remote repo t your local system
-git branch Ankur (creating new branch that describe the changes that you are going to make)
-git checkout Ankur (to move into that branch)
-git push origin (origin which is remote repository on GitHub)
-alway follow contribution guidelines
-keeping sync with original by adding remote links to upstream repo
-git fetch 


Getting selected:
-resume is most important thing
-referral helps a lot
-experience a lot
-doing your best to impress 
-contributions in stack overflow
-rankings & number of problems in leet code
-CTOs don't read your resume just scan your resume
-concepts: closures, scope, call binder, set time, refactoring your code, security concerns on our own code, throttling & d-bounce, finding output of given code
-good companies have good & supportive interviews
-fundamentals should be strong
-css should be strong, box model
-problem solving is very important & how you find out solution
-road side coder, MDN docs, web performance document
-be energetic & be passionate
-approaching founders & CTOs of companies & startups
-skills are must
-portfolio is good
-be open to others to roast you & ask for feedback
-ask for help & don't be ashamed


Bash:
-command line interpreter for interacting with computers from command line
-also known as shell
-surrounds operating system kernel to hid its intricate details
-revolutionary concepts because that time they used punch cards
-bash also allows us to write script


C++:
-high performance like C & object oriented With classes
-superset fo C language
-zero overhead abstraction, polymorphism, encapsulation
-used to implement much more low level infrastructure like language complier & virtual machine
-provides low level memory & hardware control like c but high level abstraction like classes & smart pointers c++ makes it harder
-installing compiler like gcc & clang
-class is just blue print of an object
-inside class you can attribute & method
-constructor & destructor when class is created or destroyed


[Notes making will always help you]


C#:
-designed as modern c like object oriented programming language
-used to build desktop apps with .NET core
-cross platform mobile apps with XAMARIN
-making web application with blazer 
-video game with unity
-open source 
-C# code --> compiled into intermediate language --> interpreted by common language runtime (can be executed by machine code on any operating system without need to recompile)
-primary object oriented programming language but also supports functional lambda expressions


Unity:
-cross platform game engine to build 2d & 3d experiences (created in Denmark)
-interactive simulations & animation 
-game engine is written in C++
-allows developer to write their code in more approachable C sharp & provides powerful GUI 
-every game object has variety of components like mesh (actual shape), mesh render (applying materials & lighting to an object), physics component (rigid body, colliders that stimulate things like gravity & collision in real world) 


Python:
-high level interpreted programming language
-easy to learn & practical for many serious projects
-emphasis on readability of code
-commonly used for building server side applications
-explicit is better than implicit
-code is often organised into notebooks (where individuals cells can be executed than documented in same place)
-.py or .ipynb
-dynamic language so type annotations are not required 
-indentation is very important in python
-many frameworks & wrappers for many high performance low level packages like OpenCV
-pip package manager


Spamming in open source:
-spam PR & never follow anyone blindly
-never play with other repository & do your playing with your own repository
-if you want to seriously contribute & meaningful contribution only then raise pull request
-sometimes readme.md file changing is useless 


Content creation:
-blogging (personal & professional)
-you can also refer to your own blogs to know any concept & review
-professional blog -neutral language
		  -diagrams added, codes in snippets, starting & ending
		  -adding detailing
-content writing can be good option to earn money
-


[Git access token]


Binary Tree:
-Tree are most important in interviews
-


SVG Animations with CSS:
-Scalable vector graphics = uses geometry & maths instead of jpg, png, pixels formate
-integrating css for styling
-animation & key frames & which element they affect
-Figma to seeding graphics (draw on smallest frame possible)
-Chrome Animation Inspector
-Drawing Groups
-Duotone CSS Variables
-Transition Animations
-JS events
-Keyframe Animations
-Animation Staggering


Git Techniques and Shortcuts:
-avoiding embarrassing failed checks
-Combine add & commit
-Aliases
-Amend
-Force Push
-Revert
-Codespaces
-Stash
-PC Master Branch
-Pretty Logs
-Bisect
-Autosquash
-Hooks
-Destroy Things
-Checkout to Last


Math for programers:
-Boolean algebra = boolean is binary variable (0 & 1) (true & false) vein diagrams, truth tables
-numeral system = like base2 & base 10, base16, base64
-floating point = no fixed number of digits before & after decimal point allowing developers to make trade-off between range & precision
-logarithmic function & exponentiation 
-set theory = unordered collection of unique value like relational database & each table is set of unique row 
-combinatorics = art of counting (combination & permutation) (used in globally distributed databases) (rendering tile on google maps)
-Graph theory 
-Complexity theory = time & memory algorithm should use
-Statistics = crucial for doing anything with AI
-linear regression & logistic regression
-linear algebra 
-transformation = rotation, scaling, shear


Open source contributions:
-open source are those softwares whose code is publicity available
-many students, working professional contributes in this
-its about supporting & uplifting community 
-use your skills indirectly
-using freelancer for earning money
-networking (actively contributing to project 2-3 times in 1 week)
-cp & dosa has advantage to get jobs (as per current standards)
-takes fear out of you to read code
-git & GitHub is must learning
-select your domain (web Dev, android studio, etc)
-learn on go & use documentation
-understand flow in code is important & running software on your phone, laptop
-actively contributing
-don't be afraid to learn new things & be open minded
-Mistakes while contributing -making lot of typo changes documentations changes
			    -pulling up 40-50 pull request in 1 day
			    -tagging lot of maintainers
			    -creating lot of issues with their heads
			    -making their lives miserable
-don't make typo documentations fixes (no good engineer would make typo fixes)
-contributing without setting up project (don't make half hearted contributions)
-don't contribute if you can't set up your project locally
-don't create pull request & don't start fixing it up
-don't tag maintainers
-try to solve issues by yourself & don't create pull requests
-cloud native (CNCF)
-most of time it will be reading code than writing code


Things to keep in mind as software engineer:
-sometimes there is gap in skillset of industry & pass out students (technology gets outdated)
-communications skills are really important (team dynamics, presentation skills)
-fundamentals should very strong
-recession is global phenomenon (majority of recession don't last more than 1 years)
-do internship (helps in resume)
-reading JDs in linked-in
-LinkedIn profile is very important (shows your profile & shows your entire mindset) (use LinkedIn for connection)
-70-80% work jobs closes internally (networking is very important)
-never put anything hateful comments on anywhere in social media
-use good keywords in your profile
-hiring will never stop but sometimes criteria changes
-jobs that does not required man power can be layoff
-upgrading yourself is very important because of increasing competition
-data is like gold for company (for taking calculated risk)
-data science demand is increasing
-future is AI
-use recession time to up-skill yourself


Remote jobs:
-some jobs are location specific (they want person who lives in USA & matches time zone of USA)
-hybrid work is not good (they call you 2-3 days in week)
-set target of around 5-6 months to find remote jobs (target time should be more than 6 months)
-jobs are there but you need to be skill-full
-you can also apply to those jobs with 3-5 years of experience if you have made good projects
-have an action write blogs, projects about all required skillset
-be faaddu, be badass person
-go deep in your field
-keep working hard
-grinding is important in this field
-number game = apply more & more
-don't apply on those openings whose applications are more than 1000
-stay away from scammers
-use LinkedIn & naukri.com
-hiring keywords, cv keywords
-dollar --> rupee
-open source can help you get job
-Chrunchbase & Techcrunch
-Geekwire
-if you are getting an opportunity then just take it
-contract working & can be laid off


[never pay for any online course because everything is available for free]


GSOCs:
-google summer of code 
-age should be more than 19 years
-having knowledge on version control system (git & GitHub & gitlab) & programming language is must
-start with baby steps & then start with bigger projects
-contribute in at-least 2 project
-before submitting application have good knowledge about their code, issues, organisation
-regularly contribute into projects & don't stop
-write good proposal


How not to fail technical interview:
-taking advice from highly experienced developers
-high pressure problem solving
-scary tech corporations
-flow chart & pseudo code
-interviewer wants your to succeed
-think out loud
-ask clarifying questions
-keep your compose
-express your passion for code
-don't be too clever
-don't say blazing fast
-hiring freeze


[Instagram & Facebook is useless for job searching but LinkedIn & twitter is not]
[bad programmer worry about code good programmer worry about data structures & their relationship]


History of linux:
-made by linux torvald
-Basic --> learnt machine code of processor to access it directly
-Sinclair ql computer
-made packman clone
-bought intel 8386 clone of IBM PC
-started out by wiring task switcher & terminal driver for its intel processor
-used intel x86 assembly language for chip
-kernel is basically core of operating system that has control over system & runs most essential component like memory, IO, processor
-launched 1st version called linux 0.0.1 & uploaded this to server at this university but still not executable because depended on minix for compiling
-0.0.2 & shared his source code
-transition from unix to linux is quite simple
-simple task switcher & terminal driver --> production ready operating system
-176000 lines of code
-27 millions line of code in linux git repository
-linux is completely free


Command line tools for linux:
-VIM (text editor for terminal) & used for productivity
-TMUX (organisational purposes) also you to run multiple terminals in 1 window)(save session also for later use)
-TIME-SHIFT (taking snapshot of your machine at certain intervals 
-HTOP (overview of processors that are currently running)
-NCDU (analysis of storage of what taking most)
-TIMETRA (tracking time of how much time you are spending on things)
-Tiling window manger (resizing of windows)


SEO:
-search engine optimisation
-creating good content is 1st rule & last rule 
-pagerank algorithm
-high ranking on google can worth millions of dollars
-becoming harder & harder to manipulate google technology
-200+ factors involves
-bounce rate & Dwell time & clicking other links absorbing all kinds of content
-rendering html that can be understood by bots
-metadata is not shown directly to end user
-main content goes into body tag
-bots can use this data to further understand page & format actual appearance of your search engine  listing
-getting your fully rendered html loaded fast if you have megabytes of blocking images, styles, javascript both users & bots will pass on your site
-Click through rate (CTR) = how likely user clicks on ranking page (SERP)
-bounce rate = clicking on link & clicking back button 
-dwell time = how long do they stay on page
-session duration & page per session
-client side rendering
-


Vim:
-text editor for writing code when you navigate around screen with keyboard instead of mouse
-your fingers should be glued to keyboard all time
-no pain no pain
-:q to quit vim
-:q! to quit vim
-:wq to quit & save
-


Benefits of using linux for programmers:
-security & no need to worry about anti virus softwares
-open source & anyone can look at source code
-improving your programming workflow & great package manager
-accidentally downloading malware is common in windows
-linux is build for stability & reliability
-many linux servers are running on linux without failure or restarting
-preinstalled powerful tools
-hacking specific tools in kali linux
-task automation & linux is easy to write scripts
-performance is great
-not necessary faster but compatible with any machine
-provides useful error messages
-highly customisable  


Arduino:
-open source an open source circuit board & micro controller
-building digital hardware product, IOT devices, robots, wearable products, custom hardware product
-10 millions boards world wide
-UNO & has microcontroller (small & expensive computer that runs on low power)
-board is surrounded by pins that used to construct circuit by connecting various input & output devices
-USB port used to upload your code
-sketch Programm
-setup runs once when hardware 1st powered on & loop runs continuously when react to signals from input devices
-connect your board then create file .ino extension
-using breadboard to circuit without need to soldering


TempleOS:
-open source 64-bit operating system designed to be 3rd prophesied by bible 
-created in 2005 by jerry Davis
-including boot-loader, kernel window manager, graphics library, games powered by his own custom programming language
-100000 lines of code in just 1.4MB
-rendering graphics 640x480 resolution limited to only 16 colours
-everything happens directly in kernel including user programs
-you have complete control over operating system source code & hardware
-using virtual box to boot ISO file
-Adam is father of any other task
-taking advantages of multiple CPU cores & each core has its own immortal set task
-3d 1st person shooter, 2d strategy games, simulations


Bitcoin:
-peer-to-peer electronic cash system
-


Saas:
-syntactically awesome stylesheets helps in extending css to super power
-modern UI are extremely complex
-saas provides compiler allows us to write stylesheet in completely different language
-variable, nesting is most killer feature in sass
-compiler --> convert into valid css that run in browser


Developer blog:
-learning in public, not about gaining followers but its about credibility
-great way t get involved in community
-technical writing
-medium is not optimised for tech
-hashnode.com
-mapping custom domains to it
-talking about what you learnt & showing your skills
-most successful developers do blogging
-


Object oriented programming:
-encapsulate data & logic inside of object
-class is like blue print & create multiple object instances these classes can inherit behaviour from each other forming hierarchy of abstraction
-require lot more boiler plate
-having bunch of mutable state that's difficult to test & refactor
-preferred function over classes
-class is nice way to encapsulate something
-


Writing Good Readme file:
-Most important in your project
-no readme means no 1 going to find your stuff
-essentially gateway drug to your project
-SEO projects, descriptive title & keywords, gaining contributors, newsletter, 
-


OOP:
-


Time & space complexity:
-old computer vs M1 MacBook (same data, same algorithm, same task takes 10seconds & 1 seconds)
-both machines have same time complexity (we don't care about time because that will vary from machine to machine)
-time complexity =! Time taken
-time vs size graph (time complexity is mathematical function tells us how time is going to grows as input grows) (does not tell us time but relationship)
-we don't care about small numbers (only about larger numbers or infinity & what will happen)
-only care about worst case time complexity (crashing of app has higher chances)
-always ignore less dominating terms
-linear & exponential complexity
-Big-O notation tells upper bound (graph can be anything but cannot not exceed N3) (finite value)
-when both upper bound & lower bound are present then we use theta
-little o = also gives upper bound but this is not strict upper bound 
-space complexity = input space + auxiliary space (extra space taking by an algorithm)
-recursive algorithm = space complexity is not constant (those function actually take some memory in stack) (at any particular point of time no 2 function calls at same level of recession will be in stack at same time) (only calls that are interlinked with each other will be at stack at same time) (space complexity = longest chain (height of tree & O(N))
-2 types of recursions -linear 
		      -divide & conquer
-Mater's theorem, plug & chug (useless methods) 
-akra baize formula (good method)
-divide & conquer recurrence -best method ever
-order agnostic binary search
-


[Study is important & most important thing in life]
[gate]


Events to participate:
-code-chef
-code forces
-GFGH
-hackathon
-open-source
-hashcode
-google summer of code
-hackerRank/ hacker earth competition
-de show


[coursera]
[cloudconverter]
[relevel]


Using Twitter for programming:
-follow event hashtags
-share other's content (YouTube videos, podcasts, blogposts)
-use #hashtags
-join the convo
-start following programmers
-be patient (building connections takes time)


Strings & string builders:
-strings = collection & sequence of character
-reference variable are in stack & pointing towards objects in heap
-string is most commonly used class in java class library (everything starting with capital letter is class)
-every string you create is actually an object of type script
-datatype reference variable = object
-


XML:
-extensible markup language
-


HTML5:
-almost every single website on internet is written on html (hyper text markup language)
-language for creating web pages & web applications
-your website needs to be hosted by server to make it accessible to World Wide Web 
-we use domain name instead of IP address (so its easy to remember)
-when you type domain name on browser --> calls server --> server send hosted file back to browser
-HTML is like skeleton of website
-nesting


[code courses]
[codechef]


Solving pattern Question with this trick:
-patterns are important because it enhances our thought process & building foundation
-usually interviewers don't ask this
-approaching problem -run outer for loop number of times you are having lines
		    -inner for loop is for column & outer for loop is for rows
		    -identify for every row number, how many column are there or types of element in column
		    -what you need to print
		    -try to find formula relating to row & column
		    -


UI/UX design with Figma:
-wire framing is very important as visual blueprint
-works as schema for functionality of system
-home page(header & footer), about us page, features page, contact page
-UI components are often dynamic & may need to change state of their data
-section breaks, testimonials & sponsors section, footer section, logo, contact form & site map
-parallax scrolling, labelling is important
-different layouts for different pages
-UI layout by Figma -selecting frame tool
-grid, gutter, shapes, 


Using Github for collaboration & projects:
-collaborations, access system, organisations
-creating folder on desktop 
-git clone http....
-git status
-git add .
-git commit -m 'Modified readme'
-git push origin main
-git branches 
-main or master branch -


Advance Github:
-


Setup of Pc:
-package manager
-remote connection
-WSL
-snippet
-ide inside terminal
-naming framework
-cacheing
-tailwind


[Start coding as soon as possible]
[Be so much skilful and do your preparation that even if you get 1 interview you will grab that offer]
DRM & error handling
-


Semiconductor:
-


Cache memory:
-


Cacheing process:
-


Linux torvald:
-avoiding any stimulations but light green colour is good for calmness
-enjoying programming
-Be engineer & solve problems on ground
-giving feedback on code & open source contributions


React.JS:
-Javascript library for building user interface
-simplicity of building component
-react itself does not care about routing, state management, animation
-you have endless supply of choices to get things done way you like it
-special hook functions 


Kubernetes:
-open source orchestration system for automating deployment scaling & management of containerised application (cncf graduated project)
-K8s is massive piece of software
-distributed system called Borg, Omega
-K8s is designed for massive scale (100s & 1000s of containers & pods) 
-it can on anything like raspberry pie, perimeter system, virtual machine, clouds
-running 2,3,4 containers are fine but scaling is important (micro services)
-if we don't have K8s: -have to write many custom scripts to monitor different environments
		      -we cannot run multiple pods on multiple nodes
		      -no auto scaling & no flexibility
		      -no self healing capabilities (20 copies of application running)
		      -scheduling & monitoring
		      -expanding from small scale --> large scale easily
		      -managing how hey run & where they run
-kubectl -command line tool to interact with cluster
	 -request goes to API server
	 -


Terraform:
-terraform = tool for building, changing, versioning infrastructure, safely & solely & efficiently
-infrastructure as code tool allows you to define your entire cloud infrastructure as set of config files & interact with cloud provider API & manage on behalf of us
-terraform can interact with pretty much anything in cloud with API
-earlier we had to come up idea --> write code --> buy bunch of expensive servers in data centres (handle all power management, networking & operational overhead (very challenging)
-now you just need to deploy on cloud (paying cloud providers to spin up & spin down servers)
-issue call like 5 more servers (triple, double size of infrastructure in few minutes & scale up quickly) (Black Friday example) (using servers dependencies already installed & tear down old 1s & destroying 1s we don't need)
-IaC (infrastructure as code) -you know exactly what is provisioned at any given time 
			     -if you are provisioning multiple environment stating env & production env then you can specify in your code
			     -using power of P.languages to have copies
			     -confident that they are deployed identically
			     -


Never write bug:
-Read more & more documentation carefully
-read all cryptic error messages carefully
-google it 
-debugging with logging
-learning full API of logger in language to maximise efficiency
-debugger is more sophisticated way to run & inspect your code
-reproduce bug


Amazing Developer Tools:
-BundlePhobia = web application tells how much NPM package add to your total bundle size (working with modern modern front-end framework (keeps as small as possible to optimise initial page load for new users 
-Cloud-craft = design & budget cloud infrastructure (only available for AWS, GCP, drag&drop interface (estimated breakdown of total cost) (Azure)
-Figma = 10x valuable than adobe illustrator, creating mockups for your apps
-font-flipper = choosing fonts for your design
-Viz-bug extension 
-Insomnia = debugging APIs (REST API/ graphQL API) (keeping entire workflow organised)
-flare = design tool, specially 2d vector images, high performance animations


Cryptography concepts:
-cryptography = science of creating secrets
-quantum computers can crack those algorithm with brute force
-Hash = Chop & mix (fast & unique) (very difficult for computers to reverse engineer) cracking hash to access password in database of password
-Salt = some stupid humans make password123 (adds salt in-between password)
-HMAC = token (when user login on trusted server it generates token with its key & client & server can pass that back & forth)
-symmetric encryption 
-key-pairs = private key & public key
-asymmetric encryption 
-signing = digital signature


Building home server:
-centralised storage solution can b access from anywhere (save so much time) (trying to transfer file from 1 computer to another)
-setting up virtualisation background & dabble with other OS 
-NAS (network attached storage) (sharing hard drive to multiple drive in your computer
-Media server
-home theatre gaming PC
-virtualisation playground
-


Game development:
-98% websites use javascript
-kaboom
-creating hazards
-python is high level language pretty slow
-Py-game 
-framework is library of code & do all hard stuff 
-collision system
-c++ is powerful & complicated
-ray-lib
-SDL
-sound library


Open source projects:
-slow website -> after creating small bundle of javascript product manager tells to add mix-panel, google analytics, intercom (3rd part scripts slows down main thread) (party thread = 3rd party script run from web worker) (JS is single thread but modern website allows you to run background jobs (worker thread) manuscript offload any script that don't deal directly with UI into web worker)
(Only thing on main thread is UI)
-Super-token = open source authentication solution  provide SDKs for runtime like node & python
(Allows you to host fully featured authentication system with support for auth provider, password-less logins, sessional management & security)
-Hi-mom = JS library says hi to your mom in record time
-Meilisearch or Zinc = building full tech search engine for internal data & customer
-tRPC = (RPC remote procedure call just URL on server corresponds to function you want to run on server & no schemas & code generation needed like graphQL) generally rest & graphQL used to build API
-NocoDB = open source air table build on top of mysql or postures database (smart spreadsheet)
-Hoppscotch = build with vue.js & typescript entire as progressive web app (allows to interact with file system)
-danfo.js = inspired by pandas & can read csv file & process data within it
-Manline = has nice-looking timelines & helps to make good looking UI & handle annoying things like debouncing input & paginating collection of items
-amplification = automatically generate backend code based on relationship to data model in databases


Build WEB3 app to mint unlimited NFTs:
-uploading to interplanetary file system
-smart contract with solidity & open zeppelin (vending machine in cloud when nft collection is 1st offered & you can send crypto to wallet address 
-transferring ether to smart contract
-using enter with react 
-NFT = non fungible token (unique digital asset) represent piece of artwork 
-royalty payment whenever NFT changes hands in future
-taking few images & creating 1000s of unique combinations
-metadata contains link to file & actual image on interplanetary file system
-more trait NFT has --> more value (artificial scarcity)
-node package called sharp
-IPFS similar to bit-torrent
-every-time you upload file --> creates unique identifier for that upload
-cannot modify without changing content identifier
-pinata similar to dropbox
-


Building 3d website:
-cameras, lighting, geometry
-three.js
-you can use 3d models directly into three.js
-npm init @vitejs/app
-npm install three
-npm run dev (serving app on localhost 3000)
-


Cloud cost optimisation strategy:
-managing & maintaining cloud expenses
-extensive customer base
-cloud cost increases as more customer join (may destroy your financial stability)
-cloud monitoring is important = only gives you visibility (does not help in optimisation & management)
-[better be safe than sorry]
-Cost AI 
-


Teleport:
-most easiest  most secure way to access infrastructure
-open source tool
-designed to provide access for your infrastructure without slowing down work process
-unified access to linux & window servers
-monitoring dashboards & version control system 
-gives engineers to explore & work on their stuff & increase productivity
-not slowing down networking access management for complex system
-easy software = less human errors
-ssh server in multiple environments
-working -auth service = certificate authority of cluster (issues certificate to client) (maintain audit)
	-proxy = allow cluster resources from outside (only service the is visible)
	-routs request of user to target resource through proxy
	-client authenticate with teleport
	-for product the recommend integrating with enterprise SSOS
	-can also add third-party storage


Docker:
-application used to run-on servers (only 1) (load increase than more servers needed)
-virtual machines require their own operating system 
-virtual machines needs CPU power, GPU power, dedicated amount of hard disk storage
-various dependencies, packages, modules (running on 1 machine not on other machine)
-solution = by containers (running 100s & 1000s of application on 1 OS)
-putting your software in box & give your box to other developer
-hypervisor = create multiple machines on host operating system
-container engine
-containers on top of virtual machine
-windows container require windows host & linux require its host
-WSL (windows)
-docker = containers platform that helps us in making those containers, replying them & scaling them
-docker hub, docker engine
-running in isolated environment
-runtime = allows to start & stop container
-run c, container d
-engine, daemon
-orchestration = if app running on 10000 containers --> 20000 containers & 500 get ruined (automatically starts it) (manages containers) (saves our time)
-soup & recipe & instructions example (dish is actual application)
-creating an image of my application & share that image 
-docker image (file that contains all instruction) (can be created by using docker files) (its like  template) 
-container is running instinct of an image
-docker files can run docker images
-docker file running --> you run image --> you will get your container
-docker desktop 


Git hooks:
-when you are committing something (make commit & want script to run)
-empty git repository
-many version control system & way to fire off some custom script when certain important action occur
-git init --> hook (directory)
-hooks -client side hooks
       -server side hooks
-.git
-cd hooks
-pre-commit.sample pre-commit
-ls -a
-vi pre-commit
-echo "I am running"
-touch name.txt
-git add .
-git commit -m "test"
-cp yaml_file
-cat yaml_file
-datree test yaml_file -p ankur
-


-stock options
-fizz-buzz
-tactile switches
-linear switches
-computer architecture 
Neural Networks
Natural Language Processing (NLP)
Predictive Analytics
Data Mining
-Digital Privacy
Surveillance
Whistleblowing
Hacktivism
Data Breaches
Identity Theft
Corporate Espionage
Cyber Warfare
Ethical Hacking
Privacy Laws and Regulations (GDPR, HIPAA, etc.)
Cellular Networks
SIM Cards
Signal Jamming
Telecommunications Tapping
Hardware Hacking
Raspberry Pi
Arduino
Embedded Systems
RFID (Radio Frequency Identification)
Digital Forensics
Incident Response
Log Analysis
Disk Imaging
Memory Dump
File Carving
Timeline Analysis
Malware Analysis
Reverse Engineering
SQL Databases
NoSQL Databases
MySQL
PostgreSQL
MongoDB
Cassandra
Data Encryption
Database Management Systems (DBMS)
Linux
Windows
macOS
Android
iOS
UNIX
Virtual Machines
Docker
Kali Linux
Debian
Red Hat
Python
JavaScript
HTML/CSS
SQL
Bash
C++
PHP
Ruby
Perl
Java
Shell Scripting
IP Addresses
DNS (Domain Name System)
TCP/IP (Transmission Control Protocol/Internet Protocol)
HTTP/HTTPS (Hypertext Transfer Protocol/Secure)
FTP (File Transfer Protocol)
SSH (Secure Shell)
VPN (Virtual Private Network)
Proxy Servers
Network Sniffing
Packet Analysis
Wi-Fi Security
Firewalls
Network Intrusion Detection Systems (NIDS)
NAT (Network Address Translation)
Encryption
Decryption
Public Key Infrastructure (PKI)
RSA Encryption
AES (Advanced Encryption Standard)
PGP (Pretty Good Privacy)
SSL/TLS (Secure Sockets Layer/Transport Layer Security)
Hash Functions
SHA-256
MD5
Digital Signatures
Cryptographic Keys
Steganography
Hacking
Penetration Testing
Social Engineering
Phishing
Keylogging
DDoS (Distributed Denial of Service)
Zero-Day Exploit
Man-in-the-Middle Attack
Backdoor
Rootkit
Exploit Kit
Malware
Ransomware
Spyware
Adware
Trojan Horse
Virus
Worm
SQL Injection
Cross-Site Scripting (XSS)
Buffer Overflow
Code Injection
Credential Stuffing
Privilege Escalation
Password Cracking
Robots
Drones
Autonomous Vehicles
Unmanned Aerial Vehicles (UAVs)
Automation Systems
Robot Manipulators
Artificial Intelligence in Robotics
Sensors
Actuators
Control Systems
GPS Tracking
Surveillance Devices
Microphones
Cameras
Wearable Technology
Smartphones
Signal Jammers
Bug Detectors
Biometric Scanners
Electronic Keypads
Secure Communication Channels
Satellite Communication
Radio Frequencies
Encrypted Messaging
Walkie-Talkies
Signal Boosters
Neuro-implants
Genetic Engineering
DNA Sequencing
Biohacking
Chemical Agents
Toxins
Vaccines
Antidotes
Medical Imaging
Brain-Computer Interface (BCI)
Structural Engineering
Mechanical Engineering
Electrical Engineering
Civil Engineering
Aerospace Engineering
Environmental Engineering
Fluid Dynamics
Thermodynamics
Materials Science
Climate Models
Seismology
Hydrology
Meteorology
Geospatial Analysis
Environmental Monitoring
Pollution Control
Renewable Energy
Virtual Reality (VR)
Augmented Reality (AR)
Holograms
3D Printing
Internet of Things (IoT)
Smart Home Systems
Nanotechnology
Renewable Energy Sources
Advanced Prosthetics
Crisis Management Software
Neuroscience
Psychological Profiling
Behavioural Analysis
Cognitive Science
Memory Enhancement
Ethernet
Wi-Fi
LAN (Local Area Network)
WAN (Wide Area Network)
IP Address
DNS (Domain Name System)
Firewall
Proxy Server
VPN (Virtual Private Network)
Bandwidth
Latency
Packet Switching
-Encryption
Password Security
Two-Factor Authentication
Phishing
Malware
Spyware
Adware
Virus
Firewall
Data Breach
Hackers
Network Security
-Help Desk
Ticketing System
Technical Support
Troubleshooting
Rebooting
Software Installation
Hardware Replacement
System Diagnostics
User Error
IT Policies
-Cloud Computing
Data Center
Backup Systems
Disaster Recovery
VoIP (Voice over Internet Protocol)
Remote Desktop
Virtual Private Server (VPS)
IoT (Internet of Things)
Smart Devices
-Printers
Scanners
Fax Machines
Photocopiers
Conference Calls
Projectors
-Version Control Systems (VCS)
Git
SVN (Subversion)
Continuous Integration (CI)
Bug Tracking
Code Repository
IDE (Integrated Development Environment)
Agile Development
Scrum
-Phishing
Data Breach
Cyber Forensics
Quantum Computing
Artificial Intelligence (AI)
Machine Learning
Algorithm
Big Data
Data Mining
Network Security
-Virtual Reality (VR)
Augmented Reality (AR)
Mixed Reality (MR)
Simulations
Haptic Feedback
Immersive Environments
Brain-Computer Interface (BCI)
Neural Implants
Full-Dive VR
-Mass Surveillance
Facial Recognition
Behavioral Tracking
Biometric Data
Data Mining
Cybersecurity
Privacy Invasion
Surveillance Drones
Electronic Monitoring
-Social Credit System
Reputation Management
Digital Footprint
Online Persona
Virtual Identity
Influencer Culture
Cyberbullying
Social Media Algorithms
Echo Chambers
-Genetic Editing
CRISPR
Cloning
Biometrics
DNA Sequencing
Gene Therapy
Synthetic Biology
Biohacking
Transhumanism
-Cyborgs
Bionic Limbs
Neural Augmentation
Enhanced Senses
Brain Implants
Exoskeletons
Human Enhancement
Sensory Augmentation
Cognitive Enhancement
-
Cryptocurrencies
Blockchain
Virtual Currencies
Digital Transactions
Smart Contracts
Decentralized Finance (DeFi)
Tokenization
Cryptographic Security
Digital Wallets
-Force Fields
-Exoskeletons
-Androids - Human-like robots with advanced AI
Autonomous Vehicles - Self-driving cars and other automated transport systems
Industrial Robots - Robots used in manufacturing and other industrial applications
Service Robots
-Biohacking - DIY biology and personal enhancement using technology
Cryonics - Preservation of humans at low temperatures for potential future revival
Regenerative Medicine - Techniques to regenerate damaged tissues and organs
Neural Interfaces
-Space Travel - Technology enabling travel beyond Earth
Orbital Satellites - Satellites used for communication, navigation, and surveillance
Asteroid Mining - Extraction of minerals and other resources from asteroids
Space Colonization 
-Biometrics - Identification using unique biological characteristics
Electromagnetic Spectrum - Range of all types of electromagnetic radiation
Genomics - Study of genomes and genetic information
Nanomaterials
-Cybernetic Eye - Advanced artificial eye with enhanced vision and capabilities
Implants
-


Binary tree:
-


API gateways:
-API = application programming interface (menu of different software application to communicate with each other)
-central counter is API gateway (special server or service that sits between parts of your system
Just like central counter is sitting between all different stalls)
-gateway manage & streamline communication between all parts in software system
-makes things more organised (routing request to correct place, managing security(just like ticket checking), transforming data(different parts of system can understand each other)
-traffic cop/police that direction car
-gathering data from multiple sources creating complete response for client
-security = username, password, API key
-rate limited feature & throttling = preventing client from overwhelming backend services (stable experience for everyone)
-caching = common requests & save response & make it much faster when made again & again (tracking all interaction that passes through it) (logging & monitoring)(like security camera in mall)
-error handling = error messaging for client 
-distributing traffic to multiple instance to prevent overload (multiple cashiers in big supermarket) (load balancing)
-speed efficient
-no need for vendor lock-in
-api 6 (apaches software foundation top level project)(global contributors, 100+ open source plugins, 0.2 seconds of latency, fully dynamic, supports custom plugins in java, apache license, 400+ bare metal servers, 1.2 million plus QPS (queries/sec), CNCF cloud native computing foundation, no commercial company has controlled over it
-containerised hcd (database & API 6 using docker)
-curl (command for sending request to API6)
-rout (routing path)(matching clients request to condition that we provide) (loading & executing specific plugins & forwarding request to specified upstream services)


Dark web:
-million of people depends on to be safe & anonymous online
-dark web is all about privacy & kept safe by onion or onion relays
-tor network & onion circuits (consisting of 3 onion relays) (servers)
-every time data passed through onions it gets encrypted every time
-every time onion relay is added to dark web it gets better & stronger & faster)
-entery node, middle, exit node
-exit node = most exposed onion, risky & run by institutions & university
-website can see you by IP address & exit node but tor cannot 
-you have to earn your way of becoming guard
-right now all of us middle children
-2 ways = host it in house with spare piece of hardware (Raspy/ old laptop) (any extra bandwidth)
	-running tor really on cloud (very low cost)
-home network should able to handle 7000 concurrent connection
-TP link router is not build to handle ton of data
-need public IPD for address
-going to be behind nat (most common) & need to do some port forwarding
-you might get ADMCA notice/ copyright notice/ letter/ email to ISP
-TOR browser has email template 
-some clouds don't like you running tor browser on network
-digital ocean can be used
-run on dedicated server & not main machine
-launching thermal SSH route at IP address of my server
-set up unattended upgrades
-apt unattended -upgrade
-apt -list changes
-removing all configuration from file
-


Windows commands:
-running command prompt as adminitration
-ipconfig
-ipconfig /all
-ipconfig /all | finest DNS
-ipconfig /release
-ipconfig /renew
-ipconfig /displaydns
-ipconfig /displaydns | clip
-ipconfig /renew
-ipconfig /flushdns (never ever forget to flush)
-nslookup 
-nslookup networkchuck.com
-cls (clean)
-getmac /v (getting Mac address)
-powercfg /energy
-powercfg /batteryreport
-assoc (tells which files types are associated with which program)
-Is your computer slow
-chkdsk /f (see if disk & look for errors & fix them)
-chkdsk /r (by just rebooting & restarting computer)
-sfc /scannnow (system file checker)
-DISM /Online /Cleanup /CheckHealth (deployment image servicing & management)
-DISM /Online /Cleanup /ScanHealth
-DISM /Online /Cleanup /RestoreHealth
-tasklist
-tasklist | findstr script
-taskkill /f /pid 20184
-netsh wlan show wlanreport (gives wireless report about your wireless)
-netsh interface show interface
-netsh interface ip show address | findstr “IP Address”
-netsh interface ip show dnsservers
-netsh advfirewall set allprofiles state off
-netsh advfirewall set allprofiles state on
-SPONSOR - BitDefender
-ping networkchuck.coffee
-ping -t
-tracert networkchuck.com (trace route)
-tracert -d 
-netstat (ports that you opened)
-netstat -af
-netstat -o
-netstat -e -t 5 (giving sent request every 5 seconds)
-route print
-route add 
-route delete
-shutdown /r /fw /f /t 0
-run as administration
-copy /b kitten.jpg+name_of_folder name_of_photo
-cipher /E
-attrib +h +s +r name_of_folder
-attrib -h -s -r name_of_folder (bringing that back)
-netsh plan show profile
-wlan show profile "Seabufferfly" key=clear
-creating a batch file --> open note pad --> paste command --> save file
-systeminfo
-scp file.txt root@143.42.145.140:~/wifi.bat
-typing cmd in explorer
-explorer.
-subst s: "location"
-color 24
-prompt {hey beautiful}$G
-prompt
-title homesweethome
-curl wttr.in/Dallas
-curl --head --location "" | findstr location
-curl -Is https://......
-checkip.amazonaws.com
-curl qrenco.de/https://......
-curl dict.org/d:contretemps
-start https://......
-telenet telehack.com (type c & q)
-ipconfig/ifconfig
-F7 (open list of previous commands)


AWS:
-worlds largest collections of awful web services 
-startups addicted to cheap computing resources
-price increases as you become more dependent
-so many services to choose from
-whenever you make something open source they immediately launch service for it (no free & profit)
-clicking on each server 1 by 1 (in case of hack)


Flutter:
-


Dockerizing your app:
-docker = way to package software & run on any hardware
-docker-file = blueprint for building docker image
-docker image = template for running docker containers
-container = running process
-defining environment with docker file --> any developer can use that docker file to rebuild that environment (saved as immutable snapshot)
-images can be uploaded to cloud in both public & private registries
-docker ps (list of all running container on your system)
-docker will cache layer if nothing actually changed
-install your source code --> install dependencies (but in docker dependencies are installed 1st)
-docker build -t fireship
-docker run -p 5000:8080 
-volume = dedicated folder on host machine
-docker volume create shared-stuff
-docker compose = tool for running multiple docker containers at same time
-docker-compose up


Linkedin profile:
-professional networking platform (find people from ay domain)
-you can learn & can teach 
-overview should be strong & web developer
-put everything you have done & know (projects, knowledge, skills)
-collaboration with other people for making any projects
-you can also ask work life balance, work culture
-building strong network (sending many people connection request)
-learning from best
-don't be shy & never be afraid of anything (send 100-500 daily) (keep posting)
-make complete profile (nice pic, open source contribution, GitHub profile link, skills)
-using keywords from job description of company
-follow hashtags
-recruiter mostly gives 10-15 minutes to your profile
-be narrator (be little bit informal) (hustler)
-About should be little long & not short at all
-value addition achievements
-keep updating your profile
-referral is very fast way to get job by off-campus
-codehelp & codechef & leetcode rankings


C programming:
-very popular language
-chances of getting hired is 10x more if you know C language
-popular for less latency, fast speed, game development (expecting action by pressing button)
-MySQL database also written in C language (many production servers & production databases use them)
-linux, Mac, windows (most part is written n C)
-lowest level portable language
-you can get closer to CPU instructions
-apache & NGNX most written in C
-


Server room:
-


Bash Scripting:
-Bourne again shell
-shell kind of wraps around linux kernel (shielding us from all inner working of linux)
-making new files, adding new users, hacking
-you need linode lab
-which $SHELL 
-echo "hi mom"
-nano himom.sh
-#!/bin/bash
-echo "hi mom"
-sleep3, echo "uh oh", sleep3 echo "oh yeah"
-ctrl + x
-Y (yes to save)
-bash himon.sh
-ls -l
-rw- (read, write, but not execute)
-rwx (read, write, execute)
-chmod +x himom.sh
-./himom.sh
-bash butter 
-nano bestdayever.sh
-echo ""
-sleep
-chmod +x bestdayever.sh
-./bestdayever.sh
-name="Ankur"
-put $name!! everywhere to change all name at once
-read name
-name=$1
-complicated=$2
-using positional parameter
-./bestdayever.sh abbey eyes
-user=$(whoami)
-date=$(date)
-whereami=$(pwd)
-nano getrich.sh
-chmode +x getrich.sh
-ls -l
-echo $RANDOM (generates number 0-32767)
-echo $SHELL
-echo $USER
-echo $PWD
-echo $USERNAME
-nano getrich.sh
-twitter="elon musk"
-echo $twitter
-export twitter
-ls -al
-export twitter="Elon musk"
-exit
-echo $(( 2 + 3 ))
-nano battle.sh
-echo "do you want fries ? (y/n)"
-read coffee
-if [[$coffee == "y" ]]; then
	echo "you are awesome"
-else 
	echo "get out"
-beast=$(($RANDOM % 2 ))
-echo "1st beast approaching pick number between 0-1 (0/1)"
-read tarnished
-if [[$beast == $tarnished  ]]; then 
	echo "Beast vanquished!! Congrats fellow tarnished"
-else 
	echo "you died"
	exit 1
-fi
-sleep2
-echo "Boss battle get ready pick from (0-9)"
-read tarnished 
-beast $(($RANDOM % 10))
-if [[$beast == $tarnished || $tarnished == "coffee" ]]; then 
	echo "Beast vanquished!! Congrats fellow tarnished"
-else 
	echo "you died"
-fi
-if [[ 2 >= 1 ]]; then
	echo "this is true"
-fi
-elif
-nano pushups.sh
-x = 1
-while [[ $x -le 100 ]]
-do 
	echo "Hey it just did $x pushups"
	(( x ++ ))
-done
-chmod +x pushups.sh
-./pushups.sh


Raspberry pie:
-need tiny micro SD cards (16GB- 32 GB)
-USB adapter
-SD card formatter (make sure to select right 1) (you don't want to destroy your valuable information)
-


Weather = curl http://wttr.in/stockport


SQL (Structured query language):
-language of databases (talk to databases)
-database = one big giant excel spreadsheet (massive amount of data)
-DBMS (database management system) (manager of data)
-all DMBS going to use sequel (standard ratified by ISO)
-sudo apt update
-sudo apt install mysql-server -y
-sudo mysql
-show databases;
-create database name_of_database;
-use name_of_database;
-show tables;
-create table name_of_table(id int, name archer, age int)
-describe name_of_table;
-insert into name_of_table values (1, "Ankur", 19);
-select * from name_of_table;
-select name from name_of_table;
-select * from name_of_table where name = "" or name = "";
-delete from name_of_table where name = "";
-update name_of_table set name = NULL where name = "Tony";
-select * from name_of_table order by age asc;
-alter table name_of_table add beard boolean;
-update avenger set beard = True where name = "Thor";


Projects ideas:
-


SQL injections:
-hacking website & gaining admin privileges
-getting access to underlie database
-brute forcing password
-String & query in sql
-checking if application is vulnerable to squeal injection
-creating an entry that's always true
-avoid those attacks if you have small business


Making projects on time:
-setting up deadline
-every project should not be revolutionary
-process is important for learning even if outcome is not interesting
-even simple chess board can teach you Dom manipulation & styling
-writing README.md & writing sort of MVP
-writing user story


Tmux:
-tmux is your best friend even when internet is not that fast or gone
-you can launch new panes & new windows
-fully customisable status bar
-splitting window in several panes
-automatic layouts
-detach an end to my SSH session
-terminal multiplexer
-detach & reattach to someone else terminals
-need linode cloud machine or linux machine
-pasting access command in terminal window & get logged in
-apt install tmux
-touch ~/.tmux.conf
-tmux
-ping sit_name
-ctrl + b + d (detach)
-tmux a (attach)
-tmux = 3 layers (session, window, 
-tmux new -s name_of_session
-tmux ls
-tmux a -t O
-tmux kill session -t bob
-tmux new -t Stacy
-ctrl + b + % (shift + 5) (new window)
-ctrl + b + ->, <-, ↑, ↓ (switching between different screens)
-ctrl + b + " (shift + ') (creating pain at bottom)
-exit (for exiting any pain)
-tmux list-sessions (shows all sessions that tmux is running)
-handling in form of sessions & preserves your process
-tmux a -t name_of_session
-tmux rename-session -t name_of_session new name
-tmux kill -session -t docker
-ctrl + b + q (displayed indexes of paints) (each paint has an index)
-ctrl + b + 2
-ctrl + b + 0
-size can also be change
-ctrl + b + alt + 2/3/4/5
-ctrl + b + c
-ctrl + b + w
-ctrl + b + prefix key + x
./target/release/yazi


Mac commands:
-say whatever you want to say
-security find-generic-password -wa "name of Wifi network"
-pbcopy
-command + option + shift + v (plane text)
-caffeinate (as long as terminal is up your Mac will stay awake)
-command + shift + 3 (taking screenshots)
-command + shift + 4 (taking just small part of screenshots)
-defaults write com.apple.screencapture "name"
-defaults write com.apple.screencapture type jpg
-default write com.apple.screencapture location ~/Desktop/screenshots
-passwd
-cd (change directory)
-afplay /path/music.mp3 (playing music)
-df
-ls (list)
-pwd (shows current directory)
-whoami
-mv
-cp
-ditto
-df -h (displays all how much space we have on hard drive)
-nano 9editing your file)
-man 
-man nano
-man man
-open 
-ping networkchuck.com
-ifconfig (finding IP address)
-ifconfig en0
-ifconfig en0 | grep init
-ifconfig en0 | grep init | awk
-traceroute (ever router you see) (great for troubleshooting)
-dig networkchuck.com (shows all DNS goodness)
-ps
-ps -ax
-top
-top -o resize
-kill (killing any process)
-which $SHELL
-bash
-zsh
-uptime
-killall mDNSResponder….and more
-qlmanage 
-qlmanage -p filenames
-diff nick1 nick2 (comparing 2 files)
-curl
-leave 1244 (alarm)
-history (all commands that you just typed)
-sudo spelt --master-disable
-disable gatekeeper
-brew install ccmatrix (don't do that btw)
-toilet Ankur 
-python3
-python3 -m http.server
-shutdown -r now
-sudo touch id
-echo $0
-cd .config/wezterm


Virtual machine:
-virtual machine is like computer inside of computer (matrix)
-CPU, RAM, storage, GPU, network interface card (borrowing from actual computer
-operating system allows us to use all hardware resources like playing games, video editing
-hypervisor is fancy word for application you install in your operating system (job is to create bunch of computers inside your computer)
-host operating system allowing guest OS to use their resources
-type 1 hypervisor - see in companies, enterprises 
		  -will not be installed on top of already existing operating system like windows
		  -can be installed anywhere (if you erase all windows, linux from your system & install exsi it will work just fine)
		  -more often or typically you will see in big servers (dell server & hp server)
-vmware exsi
-you can delete & build new 1 & won't affect your operating system & your main host OS (isolated)
-most operating system come in 2 different variants (32-bit & 64-bit) 
-64-bit -you need to enable hardware virtualisation support for your CPU in your bios
-make sure to download correct image file (according to 32 & 64 bit in computer)
-virtual box need an extension pack
-


[hackthebox]


Remote jobs:
-work life balance & exposure
-money is important
-applying with referral can help
-when preparing for job interviews competitive programming is waste of time
-explore other fields
-every little experiences count
-leetcode is more than enough 
-you need to keep applying
-google summer of code
-interns with 20 organisation
-college tag did not actually matter for them
-branch also does not matter
-development is more important than competitive programming
-internshala (initially salary is very less)
-using leetcode to prepare
-learning in public
-blogging is great way
-no Indian company can come close to remote jobs
-understanding low level systems & high level system
-start creating something on your own
-contributing to open source
-GitHub profile


nano ~/.zshrc
source ~/.zshrc
rm -rf mydirectory


Security+:
-Social engineering = hacking servers & networks, human OS (can be hacked 1000s of vulnerability)
		   -recon = gathering information as much as possible (social media, OSINT community (open source intelligent) (your information can be used against you)
		   -sudo twint -u networkchuck --since "2020-10-10"
		   -sudo twins -u networkchuck --near Dallas
		   -sudo twins -u networkchuck --following
		   -google hacking or dorking 
		   -dumpster dragging (looking into their trash) (very effective)
		   -shoulder surfing (looking on someone's shoulder & look what they are doing) (don't talk about work stuff outside of work)
		   -Dos (denial of service) & DDos (distributed denial of service)
		   -disconnecting service in some way
		   -biggest challenge is that it looks legitimate traffic 
		   -flood of traffic that are all valid request (server can not keep up)
		   -network dos = trying to fill up network connection with enough bandwidth that devices can not keep up) (your server must have an IPS = detects all invalid request & making sure you have enough bandwidth) (you might not need 100GB/seconds)
		   -Application dos = attacking actual application in some way where it can no longer service client like invalid request like finding bug (Example apache web server running on linux) (single request could be denial of service attack) (not network but app that can not keep up with that)
		   -operational technology dos = aims at business system or process, software, hardware, check map at Fortinet (threat maps) (visual representation of DOS attack)
-phishing attack = setting fake web page but looks legitimate, credential harvesting
		-git clone http.....
		-cd blackeye
		-sudo ./blackeye.sh
		-spear phishing attack (at particular target)
		-host file will override DNS on your system --> ask DNS server where web page is ?
		-spam or legitimate email
		-changing host file by malware
		-always check from where email is coming from
		-invoice scams 
		-clicking on suspicious links
-pretexting attack = installing phone system on this raspberry pie
		  -using voice modifier
		  -using urgency to do something
-identify theft = 14 million people in US in 2019 IDs stolen (1 in 18 people every 2 seconds)
		-data breach & collecting important & sensitive information & credentials
		-any information can be leaked
		-tailgating
-watering hole attack = you would not know about it that you have been hacked
		     -typically more targeted & even more dangerous
		     -takes advantages of people that we feel safe
		     -there always be some vulnerability that you don't know about
		     -typo-squatting attack
		     -snatching all domain names
		     -using solid spam folder normally appliance or even cloud service but cannot
		      catch everything	
		     -pre-pending method 
		     -flag emails
-hoax = threats that are not real
      -they pretend to help you & solve your problem & remove virus form computer that never existed
      -influence campaign = spreading fake news by making bunch of fake accounts
			 -sometimes used to change campaign
			 -people have become weapon
-hybrid warfare = 2 countries attacking each using no military
-reasons to get get hacked  & security breached = trust & familiarity
			  -creating urgency to do something & intimidating something, making false
			   authority
			  -pretexting & false stories


High Level Skills & Traits For Programmers:
-Patience
-Motivation
-Problem solving
-Communication
-Willingness to learn
-never look down to anybody


YAML:
-markup language is relationship of all components of bullet points, paragraph, tables
-yaml an't markup language (not programming language but data format used to exchange data similar to xml & json datatypes
-simple human rebate language to represent data
-store only data not commands
-data serialisation
-storing data in 1 single formate that can be shared everywhere
-serialisation = process of converting data objects present in complex data structures into stream of bytes or storage (can be sued to transfer this data into physical devices)
-deserialisation = converting byte stream back to object (file --> object) (object --> file)
-Kubernetes also create objects
-used in configuration file 9like docker & Kubernetes, logs, caches)
-easy & simple to read, indentation is important, easily convertible, stride syntax, most programming use it, more powerful representing complex data, use various tools like parsers, parsing is easy, case sensitive
-yaml lint, lens
-key-value pairs, block style


[Arms control association]


Kotlin:
-statically typed multi-paradigm language designed simply as better alternative to java 
-also compile to native code & javascript opening door to multi platform apps
-most influential in android development community


Building Mobile Apps:
-


Vs code:
-code file_name on terminal
-ctrl + k (hot keys & key bindings)
-ctrl + p 
-installing snippets extensions to create boiler plate code
-ctrl + `
-peek definitions
-


Cloud native tools:
-


[Skill India]


CCNA:
-PC -> switch -> router -> firewall -> modem -> ATT fibre
-big companies have big network, big firewall, big switches, big routers, more access points
-Switch  -cisco package tracer to analyse frames & packets going across network & entering 1st cisco cli command
	-connecting through ethernet cables & plugging into ports
	-switches comes in many different sizes 16 ports, 48 ports
	-hub is dumb (sends message to all computers)(sends electrical signals) but switch is not 
	-switch is smart & learn all Mac addresses they are burned
	-sending message to layer-3 address (make sure stimulation button is checked)
	-ping 10.1.2
	-packet tracer
	-CAM table (content accessible memory)
	-layer2 is MAC address (datalink)
	-physical cable is layer 1
	-show Mac-address -table
	-switch frame layer 2
	-message is packets
	-access point (more like hub) connected to switch
	-source & destination
	-wireless connection is more like hub
	-switch does not know anything about IP addresses
-Router -routers job is to connect networks
	-all ports are in back not front
	-cannot connect 1 switch to another (because of IP address)
	-ARP (address resolution protocol)
	-broadcast address
	-gateway is used for router
	-router has map to get to destination
	-router loves layer 3
	-show ip route
	-show bgp ipv4 unicast
-TCP/IP model -every computer supports & implemented int their system
	      -OSI model is always best
	      -we should alway prefer application layer as layer 7
	      -have traffic filter
	      -networking world also uses 7 layers
	      -we can use TCP (reliable) or UDP (faster) to transporting data
 	      -443 is reserved for https traffic
	      -80 is reserved for http traffic
	      -browser encapsulated whatever you want to send server
	      -packet has all layer above it (all layers encapsulated with layer 3 header 
-OSI model -how application, presentation, session, transport layer are involved
	   -application layer = kind of portal interface for programmer (gateway to next 2 layers)
	   -presentation layer = responsible for making it presentable (data formatting (file type) & encryption)
-PoE -power over ethernet
     -iPhone (we need power & ethernet & to accomplish both with 1 cable)
     -
		


Node.js:
-actually runs on your machine as service or runtime
-using V8 javascript engine also used by chrome browser
-using javascript as server side language 
-learning ES6+
-highly scalable (event-driven & works on single loop & non-blocking)
-very popular in startups
-cannot be used in CPU intensive apps
-IO operations are generally asynchronous (sending data to server & getting response)
-npm init
-npm install express
-npm install -nodemon
-can also use rpm to run some task like web servers
-can even create your own module (files that have an export)
-can include function, classes from 1 file to another
-node --version 
-repple (read eval print loop)
-npm --version
-node
-using integrated terminal n vs code
-npm init (by default ask some questions) (packages stores all dependencies)
-npm install uuid
-npm install --save-dev nodemon
-npm install -D nodemon
-npm install
-node index.js (to run file)
-

-extortion portal


Spreadsheet or Excel:
-home tab & ribbon, group
-cell = intersection of row & column
-rows & column
-shift + down key or right key to select
-formula =sum(a, b, c), =concatenate(a, b, c), =average(a,b,c)
-Basic Formatting
-Using Formulas
-Save File
-Filter & Sorting
-Conditional Formatting
-Insert & Delete Columns or Rows
-Find & Remove Duplicates
-Merge & Centre
-Rounding of Numbers
-Autofill in Excel
-Add or edit comment
-Filters
-Sorting on multiple columns
-Insert Table
-Slicers 
-Insert picture or shapes
-Add link or Hyperlink (command + K)
-Add drop down list
-Split Text
Charts in excel
58:16 VLOOKUP formula
01:03:32 Pivot Table
-Payroll Project -



Serverless computing:
-servers in cloud that requires 0 configuration & maintenance from developer
-amount of CPU & memory it takes to run your code
-AWS lambda, google cloud functions & Azure functions
-


Internet Millionaire:
-stealing market from others by making kickass product
-making your product addictive
-collaborating & sharing computer files
-starting as early as possible to start learning
-getting good help
-being willing to do some sacrificing like your social life & sleep & exploiting your youth
-no one has to know how old you are & developing credibility on product alone


Best Javascript Framework:
-every developer should have solid understand of vanilla Javascript
-non-trivial app making on javascript can be recipe for disaster
-doing everything manually can be annoying 
-React = main driver of your project, framework or library, minimal by design, relies on open source community, routing, animation, state management, official CLI called create react app, next.js or gatsby, 
Dividing you app organised on tree of component & these components encapsulates part of UI, organising your app in declarative way given set of application data end result of UI will always be same
-Angular = developed & maintained by google, opinionated about how to organise & structure project,  comes with officially supported libraries for routing, animation & server side rendering, required to use typescript, 


-Quant
-verbal
-English
-maths 


Linux for hacking:
-file syatem
-whoami
-ls/ cd/ cd../ pwd/ clear
-linux is file (everything means everything is file)
-cd bin (binaries) (command binaries)
-clear/ clean
-cat (concatenate)
-cp ls networkchuck
-sudo cp ls network chuck
-rm (remove)
-sudo rm ls
-sudo cp networkchuck ls
-cat cat
-sbin (superbin) (special commands only administrators will use)
-sudo adduser ben
-cd..
-cd usr
-which ls
-which cat
-which networkchuck
-sudo ls root
-SDA1 & SDA
-sudo cat vda
-etc 
-cd etc
-lsd etc
-terminal emulator (not terminal just pretending) (interacting with shell)
-shell (user interface that user interact with OS
-ps (process status)
-su root (switch user)
-id
-hostname
-uname
-uname -r
-uname -a
-ifconfig
-ip
-ss
-netstat
-who
-env
-lsblk
-lsusb
-lsof
-man uname
-man ls
-man ip
-uname --help
-apropos usb
-apropos compress
-adduser thor
-sudo adduser thor
-cat /etc/passwd
-cat /etc/shadow
-sudo useradd ironman
-sudo passed ironman
-usermod .h
-sudo usermod ironman ..shell/bin/bash
-sudo usermod -l tonystark ironman
-useradd hulk -m (creates home directory)
-sudo useradd hulk -m
-sudo useradd thanos -m
-sudo passed thanos
-sudo (super user does)
-su -
-sudo su -
-logout
-sudo useradd peperpots
-sudo visudo
-sudo su - thanos
-sudo useradd nebula -m
-sudo userdel thor
-sudo groupadd infinitygauntlet
-sudo usermod -aG infinitygauntlet ironman
-sudo gpasswd -d thanos infinitygauntlet
-linux package manager
-cd Downloads/
-ls
-deb is extension for packages & linux (Debian based) (.exe, .dmg)
-dpkg -i ....deb
-sudo dpkg -i ....deb
-most package in linux depend on other packages to work
-apt (advanced package tool)
-sudo apt update
-sudo apt install pidgin
-sudo apt --fix broken install
-repository = storage location (collection of software)
-sudo nano
-sudo apt -h
-sudo apt list
-apt list --install | grep ^nmap
-sudo apt show nmap 
-sudo apt search nmap
-sudo apt remove pidgin
-sudo apt pudge pidgin
-sudo apt --installed | grep ^pidgin
-sudo apt update && sudo apt full -upgrade
-dpkg -l
-sudo aptitude
-snap
-sudo snap install --classic code
-code
-pip (package manager for python)
-git clone https..........
-pip3 install -r requirements.txt
-python3 tubolist3r.py -d hackthebox.eu
-process in linux --> instance of running process
-ps -aux
-ps -aux | grep sublime
-ps -aux | grep nano
-ps -aux | grep ssh
-ps -aux | grep ntp
-pstree
-systemctl stop sshd
-sudo systemctl stop sshd
-sudo systemctl status sshd
-sudo systemctl start sshd
-sudo systemctl restart sshd
-sudo systemctl reload
-sudo systemctl reload.or.restart sshd
-sudo systemctl disable ntp
-sudo systemctl status ntp
-sudo systemctl enable ntp
-sudo systemctl is-active ntp
-sudo systemctl list-units -t service
-sudo systemctl list-units | grep nginx
-sudo systemctl list-units --all | grep nginx
-sudo systemctl list-units-files | grep nginx
-sudo systemctl is-enabled nginx
-sudo systemctl start nginx
-sudo journalctl -xe
-sudo systemctl list-units | grep journal
-killing process means killing process
-kill firefox
-pgrep firefox (shows process ID)
-kill processID
-ps --help simple
-ps -aux
-top (shows all running process of linux)
-htop
-ping -c 100 networkchuck.com
-jobs
-bg 1 (background process & we can not interact with it)
-ps -ax
-kill -l
-python -m http.server
-most website are on port 443 
-ctrl + c (to stop website)
-python -m http.server 7600
-mkdir website
-cd website/
-nano index.html
-npx http.server -p 8080
-systemctl start apche2
-sudo nano /etc/apache2/ports.conf
-curl (client URL)
-curl localhost:7600
-curl -o coolwebsite localhost:8080
-cat coolwebsite
-curl -I localhost:8080 (analysing how website is talking or interacting with client)
-curl -v localhost:8080 (shows request header & respond header)
-wget localhost:7600
-nmap (network mapper, used for network discovery & security auditing)
-netcat (nc) (read & write data across network connections)
-ping (check network connectivity)
-traceroute (trace route packets take to network host)
-whois (domain name lookup)
-dig (DNS lookup)
-dnsenum (DNS enumeration tool)
-arp-scan (ARP scanning tool)
-snmpwalk (SNMP enumeration tool)
-enum4linux (windows/samba enumeration tool)
-tcpdump (network packet analyser)
-wireshark (network protocol analyser)
-john (john the Ripper, password cracking tool)
-hashcat (advanced password recovery tool)
-hydra (password brute-forcing tool)
-medusa (parallel network login brute-forcer)
-cewl (custom word list generator)
-crunch (wordlist generator)
-nikto: Web server scanner.
openvas: Open-source vulnerability scanner.
lynis: Security auditing tool for Unix-based systems.
wpscan: WordPress vulnerability scanner.
-metasploit: Penetration testing framework.
msfconsole: Command-line interface to Metasploit.
msfvenom: Payload generation tool in Metasploit.
searchsploit: Command-line interface for Exploit-DB.
exploitdb: Searchable database of exploits.
sqlmap: Automated SQL injection tool.
-burpsuite: Integrated platform for performing security testing of web applications.
owasp-zap: Web application security scanner.
whatweb: Website fingerprinting tool.
nikto: Web server scanner.
dirb/dirbuster/gobuster: Directory brute-forcing tools.
xsser: Cross-Site Scripting (XSS) vulnerability scanner.
-aircrack-ng: Suite of tools for 802.11 (Wi-Fi) security auditing.
reaver: Brute force attack against Wi-Fi Protected Setup (WPS).
wash: Scan for WPS-enabled networks.
wifite: Automated wireless attack tool.
kismet: Wireless network detector, sniffer, and IDS.
cowpatty: WPA-PSK brute-force tool.
-linpeas: Privilege escalation tool for Linux.
pspy: Monitor processes without root permissions.
sudo -l: List sudo privileges for the current user.
gtfoBins: Search for binaries that can be exploited for privilege escalation.
-setoolkit: Social-Engineer Toolkit, used for social engineering attacks.
beef: Browser Exploitation Framework.
veil: Evasion framework used to generate payloads that bypass antivirus.
-meterpreter: Post-exploitation tool integrated into Metasploit.
empire: Post-exploitation framework.
mimikatz: Credential dumping tool.
bloodhound: Active Directory (AD) attack path management tool.
psexec: Tool for executing processes on remote systems.
chisel: Fast TCP/UDP tunnel.
-steghide: Hide data within image and audio files.
zsteg: Detect steganography in PNG and BMP files.
exiftool: Read, write, and edit metadata in files.
-radare2: Open-source reverse engineering framework.
gdb: GNU Debugger, used for analyzing binaries.
strace: Trace system calls and signals.
ltrace: Trace library calls.
objdump: Display information from object files.
strings: Display printable strings in a file.
tmux: Terminal multiplexer.
screen: Terminal multiplexer.
proxychains: Redirect connections through a proxy.
tor: Anonymity network.
ncat: Netcat with advanced features.
socat: Multipurpose relay (for UNIX sockets, TCP, UDP, etc.)
tshark: Command-line version of Wireshark
openssl (toolkit for SSL/TLS & cryptography)
gpg: (encryption & signing tool)


x86 vs x64 vs ARM:
-examples of CPU instruction sets, not just CPU
-pretty much every CPU in a smart device or PC you’ve used is built on top of one of them
-micro-architecture can change constantly within the walls of a CPU manufacturer, instruction set architecture doesn’t change nearly as frequently
-x86 is a Complex Instruction Set Architecture (CISC) and was the dominant mainstream micro-architecture of Windows PCs
-x86 is also colloquially known as “32-bit”, since it also has to operate within 32-bit RAM limitations, meaning no more than 4 Gigabytes of system memory is visible to an x86 CPU.
-x64 is a Complex Instruction Set Architecture (CISC) and is the current dominant architecture of Windows and Linux PCs
-built on top of the original x86 Instruction Set, rather than replacing it entirely.
-x86-64 is used with the same operating systems that originally ran on x86, this evolution makes sense as a measure to preserve software compatibility between architectures.
-x64 now boasts 64-bit RAM limitations. 64-bit math means that it’s theoretically possible to reach 16.8 million TB of RAM, but in reality, the maximum RAM reachable by a modern OS is about 6 TB
-ARM is a Reduced Instruction Set Architecture (CISC). This is the dominant standard used by smart devices, as well as an increasing number of low-power PCs and smart devices over the years.
-Even Apple has made the switch to ARM
-memory capacity, x86, unfortunately, lost the war as soon as desktop PCs with more than 4 GB of RAM became commonplace
-x64 and ARM have yet to reach their theoretical maximum limit, but both top out within the terabytes as of the present day.
- lower power consumption of ARM also means less heat is generated by its operation
-ARM generates so little heat that most ARM devices don’t even require an actively-spinning cooling fan like an x64 PC does
-point is actually a little more nuanced than you might expect. While ARM does function on reduced complexity compared to x64, it’s still remarkably useful for a wide variety of software and applications
-memory capacity, x86, unfortunately, lost the war as soon as desktop PCs with more than 4 GB of RAM became commonplace
-x64 and ARM have yet to reach their theoretical maximum limit, but both top out within the terabytes as of the present day
-CPU is a complex piece of precision machinery, with a unique “micro-architecture” to itself and a related family of CPUs.


-emulation can come at a performance cost
-


Oldest text editor in linux:
-


Subnetting:
-IP address = like phone number for our devices
-ipconfig
-ifconfig
-router is like Oprah of your IP addresses (gives your devices IP address (DHCP)
-subnet mask look similar to IP address
-each dot in-between = octets
-3 numbers = network portion & last 1 = host 
-2 parts of IP addresses are untouchable (broadcast address & network address)
-4.3 billion IP address 
-there are large group of IP addresses that we can't even use
-subnet mask = determines how big network is & Numbers IP address stays same & changes
-government entities & big companies need lot of IP addresses
-some big tech companies own 16 million IP addresses
-IANA (internet assigned number authority) (allocate or assign  IP addresses to network)
-cutting huge IP addresses & cutting them into small sizes (big massive --> sub-smaller net)
-default subnet mask = 2550000 (minimum)
-converting decimal --> binary & vice versa
-8 bits = 1 bit
-subnet mask = every IP address has subnet mask (tells all secrets about network)
	       managing IP addresses in large & small companies is really hard
	       0 tells us which bits are host bits
-converting 1 network into 4 subnetworks = we would need 2 bits (for 17 we need 5 bits from host)
-we will hack bits & flip them (1 -> 0 & 0 -> 1)
-each of network will have subnet mask of 255.255.255.192
-regular version & inside notation & ranges
-0s are host bit & 1s are network bits
-1st address & broadcast address of our network are reserve
-Reverse engineering subnet situation can also occurs (what network address, what broadcast address & what network range are you on)
-subnet can be of different sizes 


Tails OS:
-Snowden exposing government mass surveillance program
-Debian based linux distro that boots from USB stick to any computer into temporary secure machine
-traces can be left behind on disk that can be recovered with forensic analysis
-everything disappears automatically when os is shut down because tails never writes anything to hard disk & only runs from memory from you computer
-it is possible to store some information on USB like browser bookmarks or documents that you want to persist between sessions & they are encrypted automatically 
-any application that tries to access internet without tor network is automatically blocked on tails 
-everything is stored on RAM & not on disk
-it will overwrite RAM to prevent cold boot attack


Solo software developer:
-learning code gives you ability to build money printing machine that regular people can't
-business running on autopilot
-its good idea to validate idea
-ideas are cheap, execution is everything
-good marketing plan is must (organic marketing by YouTube, Instagram, Facebook)
-application should work does not matter which tech stack it is made off
-design is important & nice looking landing page


Best OS for programmers:
-FreeBSD is superior
-there is no perfect operation system
-we cannot upgrade machine (upgrade options are very limited in macintosh)
-home-brew can be installed to manage different developers tools (package manager)
-linux does not support many commercial softwares
-VS code --> writing typescript code --> push to Microsoft GitHub --> install Microsoft npm packages --> deploy to Microsoft azure 


Neura link:
-no eye tracking or sensors other than chip in brain
-each thread contains high density electrodes which are capable of detecting electrical activity (brainwaves)
-data only flow 1 way


History of video games:
-USA & Britain thought to use computers for war
-Tic-tac-toe game invented by some students
-world 1st video game tennis for two
-relaxation, public interest, friendship
-space-wars game
-new version of game
-merging video game technology with television technology
-POM game 1st coin operated arcade game
-easy availability of PC --> decline in game arcades
-packman & asteroids all time high
-nintendo 
-Arati ST & Macintosh computer introduced
-BASIC code 
-1st person shooter game
-Sony playstation
-need for speed, super Mario
-RPG games, counter speed
-GTA
-virtual reality games


Networking:
-Common Operating Machine Purposely Used for Technological and Educational Research
-internet is collection of different computers network (across different cities, countries)(entire collection of computers at global scale is internet)
-ARPA wanted to have way to communicate with each other
-MIT, standford, VCLA, Utah 
-more & more computers & locations were added
-www is project that stores & access documents
-fair documents & other web resources are identified by URL which maybe interlinked by hyper links
-there was no search engine that time there was just hyperlinks to hyperlinks
-Protocol -set of rules (made by internet society) (internet society.org)
	  -overcome different way to communicate with different applications
-client-server architecture (request & response from client & server)
-internet is under sea not in sea
-status 200 (everything is fine)
-TCP -Transmission Control Protocol
     -ensure data to reach its destination without getting erupted
-UDP -when you don't care if 100% of data is reaching
     -User datagram protocol
-yahoo was 1st search engine
-every device has IP address 
-curl ifconfig.me -s
-ISP (internet service provider) -router or modem has global IP address
				-device 1,2,3 maybe connected (local IP addresses)
				-DHCP (dynamic host configuration protocol)
				-

[IMCDb]
[ISFDB]
[IMPDb]
[TV Tropes]
[IMFDB]
[world of tanks][Tankopedia]
[ALLCARINDEX]
[MotorTrend]
[Consumer Reports]
[Edmunds]
[encyclopedia]
[World Book]
[computer language]
[howstuffworks]
[wiktionary]


-option + command + escape (force quit any app)


Psychological tactics used by game developers:
-Variable Rewards -Players receive random rewards from loot boxes (unpredictability & excitement)
-Progression Systems -Players earn experience points by completing quests & defeating enemies to level up (sense of progression)
-Social Interaction - join clans, collaborate with clan members & participate in clan wars (sense of community)
-Limited time Events & Rewards (create urgency)
-Frequent Updates
-In-Game Economy & Micro-transactions -players invest financially
-Immersive Environments and Storytelling -rich narrative & expansive open world filled with quests, characters & lore
-Difficulty Balancing (tough enemies & bosses)
-Positive Reinforcement
-Habit Formation
-Loss Aversion
-Personalisation


[ourworldindata.org]


PNP:
-portfolio
-open source contributions
-networking (connecting with recruiters)
-prepare 


Making old computer completely new computer:
-


Frontend development:
-Alligator.io
-


-Segway
-Makerbot Replicator
-Google Glass
-Nest Thermostat
-Osborne 1
-Fitbit
-Roku Netflix Player
-Sony Discman D-50
-DJI Phantom
-Raspberry Pi
-Oculus Rift
-Apple iBook
-Motorola Dynatac 8000x
-Palm Pilot
-HP DeskJet
-Nokia 3210
-errold Cable Box
-Wii
-Sony PlayStation
-Toshiba DVD Player
-TiVo
-Amazon Kindle
-Polaroid Camera
-Commodore 64
-BlackBerry 6210
-Phone-mate 400 Answering Machine
-TomTom GPS
-IBM Thinkpad 700C
-Motorola Droid
-JVC VideoMovie Camcorder
-Motorola Bravo Pager
-IBM Selectric Typewriter
-Nintendo Game Boy
- Nintendo Entertainment System
-US Robotics Sportster 56K Modem
-Atari 2600
-Philips N1500 VCR
-Canon Pocketronic Calculator
-Magic Wand
-Apple iPod
-Kodak Brownie Camera
-Regency TR-1 Transistor Radio
-Victrola Record Player
-IBM Model 5150
-Sony Walkman
-Apple Macintosh
-Sony Trinitron


Regrets of every programmer:
-code is not an asset but liability (try to write less code)
-start to learn when you are young
-practising & grinding Leetcode


Projects Guide:
-best projects are not madly high end language, they are made when you solve a big problem
-automation projects
-using all frontend, backend & database that solves problem
-always have problem statement 1st & then solve problem
-projects can be simple & can solve big problem


Youtube:
-find specialised unmet market
-create useful & educational content that audience is looking for
-make next video better than last one
-takes lot of time & experimentation to optimise content that audience is looking for
-don't copy someone else
-keep uploading & keep getting better
-make some jokes & create stories


Binary:
-numbering system where all possible values are represented by 2 symbols
-on, off, true, false, 1, 0
-computer can handle all stream of binary numbers as stream of data
-easy to represent 2 value with transistor rather than representing 10 values 
-manually clicking switches or punch cards to represent binary values
-used in pixel colour of any image
-ASCII table & HEX DUMP


Redis:
-in-memory multi-model database famous for its sub millisecond latency
-remote dictionary server
-system where data is always modified or read from main computer as opposed to much slower disk
-snapshots & backups
-no need to squeeze it into bunch of tables & json documents
-interacting with database handled with simple set of commands
-key value store
-use caches to make relational databases fast & scale
-perfectly suitable for primary database & can dramatically reduce complexity 
-multi model database supporting variety of different database paradigm with add-on modules that you can opt into


Linked List:
-array is not continuous memory allocation
-linked list is not continuous memory allocation
-breaking down boxes into separate boxes


-EMP button


Recursive function:
-function calls itself inside its own definition (having dream inside of dream)
-1st function gets pushed on call stack then next on top of it & so on
-usually stack overflow error or computer runs out of memory
-very good choice in tree & graph but not everywhere since time complexity is O(N2)


Maths for programming:
-Machine learning -statistics & linear algebra is important
		 -vectors
		 -basic mathematics
		 -calculus
		 -probability
-backend development -graphs
-competitive programming -data structures algorithms
		        -9th, 10th, 11th, 12th maths is important
-game development -basic mathematics
		 -physics concepts & laws
		 -2D-3D geometry
-decimals, ratio & proportions, boolean algebra
-competitive programming -Fourier series, Laplace transform
			-tax calculations
-cyber security -number theory
	  	-cryptography


Python:
-high level interpreted language
-practical for various projects
-commonly used for server side applications, web apps, big data analysis, machine learning
-code is organised into notebooks where individuals cells can be executed then documented in same place
-.ipynb for creating interactive Jupiter notebook
-syntax is highly efficient
-multi-paradigm language 


Java:
-high level multi-paradigm programming language
-stability to compile to platform independent byte code
-compiles to byte code that can run on any operating system
-write once, run anywhere
-object-oriented (object, class, inheritance, encapsulation, polymorphism, and abstraction)
-secured (doesn't use Explicit pointers)
-java programs run inside virtual machine sandbox
-JRE also provides class loader, used to load class into JVM dynamically
-separates class packages of local file system from ones that are being imported from network
-strong memory management
-handle exceptions through java code, using type checking to make code more secure
-platform independent & no need to compile every time
-consumes more memory (runs on top of Java virtual machine)
-provides automatic garbage collection that can't be controlled by programmer
-less machine interactive
-bit costly due to its higher processing & memory requirements 
-need better hardware to run java program
-java is bit slower than C or C++


MongoDB:
-popular document oriented database
-organised into collections where they can be queried
-it allows data accesses by app to be stored in same place
-makes read operation extremely fast since no joins are required
-makes easy to scale horizontally via shaarding
-designed for huge work loads
-full tech search


PostgreSQL:
-most trusted name in open source relational databases
-stores data in table, rows & columns
-use SQL to read & write data
-object relational database
-creates its own datatype to store object with properties
-supports advance features like polymorphism & inheritance
-give each transaction snapshot of database --> allow multiple transaction to run at same time traffic jams or locks
-robust ecosystem
-every table has unique primary key


System design:
-


AI influencers getting rich:
-using open source generative image models like diffusion XL & checkpoints like juggernaut
-producing high realistic image


Google like pro:
-wrap your question in quotes
-use site:URL to search 
-use - to exclude any dominant term you don't want
-use AFTER:2020 & BEFORE:2030 to get content published at specific time
-2015..2019 or $20..$40 range
-(A|B)C search for A or B but search for C is compulsory
-*wildcard 
-filetype:pdf 
-related:URL
-cache:URL 


VS code:
-productivity is key to success
-if using Mac or linux (need to add binary to your path)
-code (open current directory)
-code file.js (open file)
-less you rely its better (mouse is slow & keyboard is fast)
-ctrl + p (opening command palette) (do anything without remembering key bindings)
-executing javascript directly in file using Quokka.js
-ctrl + f (finding any word) or using @ in command palette)
-ctrl + g (:23) line number & shift key + arrow key to highlight something or ctrl + arrow 
-ctrl + d (finding matching words & changing them in one go)
-alt + shift + downkeyarrow or upkeyarrow
-ctrl + l (highlight line)
-ctrl + / (toggle comment)
-sometimes you need multiple terminal sessions running at same time
-ctrl + ` 


Mac commands for displaying connections
-ifconfig -a
-ifconfig
-iwconfig
-networksetup -listallhardwareports
-system_profiler SPBluetoothDataType
-blueutil --paired
-netstat -an
-netstat -i


Linux commands for displaying connections:
-ip link show
-ifconfig -a
-nmcli device status
-iwconfig
-bluetoothctl devices
-hcitool scan
-bt-device -l
-mmcli -L
-nmcli connection show
-netstat -tuln
-ss -tuln
-ifstat
-vnstat


IMAX technology:
-


Tools of web browser:
-brave & edge are based on chromium 
-don't use safari & internet explorer
-ctrl + p (opening command palette)
-com + shift + j (opens up downloads)
-ctrl + p (command pallet) --> > (gives list of every command at your disposal)
-visual coverage (how much JS & HTML is contributing in visual elements)
-red bar indicates unused & dead code makes app slower
-$('h1') to grab element 
-$$('h1') to grab multiple elements 
-$0
-live expression by clicking on eye icon
->snippets
-redeclare variable
-copy elements
-using animation panel
-rendering FPS 
-visbug extension
-lighthouse tool
-responsive device
-network waterfall
-server timing
-memory profile
- 


Power over ethernet:
-networking devices need electrical power to function
-some have separate power cable 
-adds connivence over networking devices
-deeper connect air (decentralised private network) DPN
-


Browser shortcuts:
-Cmd + t (open new tab in web browser)
-Cmd + W (close tab)
-Cmd + Shift + T (reopen closed tab)
-Cmd + N (New Window)
-Cmd + Shift + W (Close Window)
-Cmd + Option + Right Arrow (Previous Tab)
-Cmd + 1 to 8 (Jump to a Specific Tab)
-Cmd + R (Refresh Page)
-Cmd + Shift + R (Hard Refresh (Clear Cache))
-Cmd + Shift + H (Home)
-


DNS:
-phone book of internet
-it maps human readable URLs or host names like www.fireship.io to IP address of server
-attempt to look at local browser or operating system to check cache
-recursive resolver -need to make multiple request to root servers 


Graphic designing:
-line, shape, colour, texture, space, image
-backend identity design, marketing ad & design, packaging design, UI/UX design, print & publication design, lettering & type design, graphic illustrations, data visualisations
-fonts can change how you feel
-do not work for free 
-learn about -brand strategy
	     -learn about making contracts
	     -taking 50% advance payment
	     -creating invoices
	     -keeping track of all projects
-


[If you don't know technology & how it works in this era then you are making big mistake]


Code this not that:
-


Bitcoin:
-


Modules:
-javascript lives in single file --> turn this code into module by exporting --> this allows other files to use an import statement import this file as dependency
-module is nothing but file that exports its own code --> allows developers to organise their own projects or share their code with world with package managers like NPM 
-syntax is also supported in node 13
-module can export single default value, multiple value
-module also has option to expose multiple exports to single file
-you can export 1 by 1 or all together as single export list 
-importer will use the exact name used in module 
-Require -require function to import module
	 -require is more common now but future is ES module


[demos]


NumPy python:
-multidimensional array library
-can be used to store all sorts of data
-very fundamental for scientific computing
-lists are very slow meanwhile numPy is very fast (because uses fixed types) (faster to read less bytes)
-Slicing and Indexing, Set operations, Sampling Methods, Array, Data Types, Linear Algebra
-In list a lot of information you store as an integer
-no need to type check each time when iterating through each item
-utilises contagious memory
-In list items are scattered around
-SIMD vector processing (single instruction multiple data) & effective cache utilisation
-insertion, appending, deletion, concatenation can be done in both Numpy & Lists
-Application -mathematic replacement (Matlab replacement)
	     -useful for plotting (matplotlib)
	     -backend (pandas, connect 4, digital photography)
	     -use to store png images
	     -useful for machine learning applications
	     -tensors library are similar to lumpy library


Built a Neural Network from Scratch:
-only using Numpy, python & mats
-From individual neurone to more complex networks
-neuron that has 3 inputs & 1 output (each connection has weight)(we multiply them with their inputs  & add bias)
-all neurone are interconnected to each other all connections mean that output value of neuron is calculated as weighted sum of all previous neurones (same can happen to next neuron)
-linear algebra 
-ReLU (rectified linear unit) (understanding non-linear data)
-training exact same network on Pytorch --> getting correct weight --> pop that into network --> 93% accuracy
-calculating how wrong is network
-update & weights & biases so that model actually learns something
-backrotation
-forward pass --> calculate loss --> backward pass --> update weight --> forward pass --> (models keeps getting better& better)
-learning rate = amount that network changes its parameters (higher LR is more rapidly its going to change parameters)
-optimisers
-Fashion minister


AI Learns to make Art:
-deep dreaming (used to generate very interesting & psychedelic art)
-convolution neural network (CNN that classifies image to docs then we pass random image of some cloud through model then tell them to stop at certain layer then amplify docs in that image)
-deeper you go more complex & intricate pattern gets 
-deep dreaming with different images
-Imagenet model
-neural style transfer -taking painting + image = produces image with style of painting
		       -difference between input image & style image 
		       -difference between input image & content image 
		       -trying to minimise both distances
-stable diffusion -extremely complicated to do & works by taking advantage of generative adversarial network
		 -training with billions of images & cost a lot of money
		 -using an open source library is great idea & easy to use also


Understanding AI algorithms:
-linear regression -supervised learning algorithm
		  -


AI Learns to make Faces:
-training neural network to generate these hyper realistic photos
-styleGAN3 (creates realistic human faces as well as animals)
-generative adversarial network
-deep convolutional gan
-DC gan
-generators starts with very small with really small image --> turn into bigger image --> discriminator takes bigger image & classifies it as fake or real
-during training -generator constantly tries to outsmart discriminator by creating better & better   
                  face
		-discriminator tries to be better & better detective & correctly differentiate real 	  
                  & fake images
-super sensitive to parameters & unstable for reference 
-proGAN (progressive growing GAN)
-adding more layers to double resolutions (4x4 pixel --> 8x8 pixel --> 16x16 pixel --> ... 1024x1024)
-latent vector (100s of random numbers)


[https://github.com/chuhaojin/Text2Poster-ICASSP-22.git]
[dreamstudio.ai]


Making video game:
-platform game, isometric game, top-down game
-knock off games


Blender for game development:
-open source
-not industries standard
-Maya & 3DX max can be used later on
-less official support
-modelling, sculpting, physics simulations, animation, paintings & even video editing
-asset creation & assembling those assets
-mapping, baking, texturing, rigging
-modelling -most Time consuming part 
	   -creating characters & environment that contains lot of props
 	   -lot of modifiers & lot of operations that effects objects in non-destructive way to
             gain time & make modelling process easier & efficient 
	   -low poly versions of highly detailed models to allow us to run video games smoothly in
	    real time
	   -box cutter, hard abs, mesh machine 
-Sculpting -characters are better created using sculpting forms start (although not advance as
	    Zbrush)
-UV unwrapping -creating games assets
	       -using some plugins to speed up process
	       -highly repetitive
-Baking -baking mesh normals which affects how light appears to reflect from model surface
	-specialised image with RGB value based 
	-requires UV & rap 
	-need to place high poly version & low poly version placed exactly in same position
-Texture -texture for characters & props in environment 
	 -using real time renders
-Animation


Blender for VFX:
-Particle system -used to simulate large amount of small moving objects creating phenomena of higher order fire, dust, cloud, smoke, grass
		-each dot react to different forces & have notion of lifespan
		-hair type particles are subset of regular particle 
-rigid body simulation -affects positions & orientations of objects & deform them
		      -body physics is great for flat surfaces or single point of collisions
-soft body simulations -adding secondary motion to animation (jiggles body parts)
		      -gravity, force fields
-cloth simulation -cloth, flags
-fluid simulation -viscosity & gravity
-Motion tracking
-composting
-video sequencer


Mark Zuckerberg on programming:
-language models & large language model (don't have to remember much)
-stack overflow
-earlier had to remembers all libraries & dependencies 
-summarise whole knowledge base 


[windows 356]


OpenCV:
-openCV is free to use
-compatible with many coding languages
-used to build GUI applications with customisable interfaces
-reading images & videos, image transformations, drawing shapes, putting text
-colour spaces, bitwise operators, masking, histogram computations, edge detection
-face detection, face recognition, deep computer vision, object detection, edge detection


Scikit-Learn:
-


[pip install --upgrade pip] 
[python3 -m venv myenv] (entering python virtual environment)
[source myenv/bin/activate]
[if ctrl + c does not kill the program then try ctrl + \ then ctrl + z]


Creating pull request:
-


Becoming great programmer:
-curiosity is most important thing
-be creative & be open to new things
-chunk up problems into small parts to solve
-write down what you're trying to accomplish before starting to code
-reuse other people's work, but understand it as much as you can
-be sensitive to hype cycles (e.g. be skeptical the latest programming fad)


Penetration tools (physical pin test tools):
-recording as much data as you can
-glasses with camera installed
-video recording pins
-micro computer with wifi & bluetooth with several different payloads
-high-end HDMI monitors
-cuff link USB adapter
-badge scanner


CS terminology:
-CS deals with theories & methods & processing information on digital computer
-designing computer hardware & software
-transferring & exchange instructions back & forth between hardware & software


Big O notation:
-way to describe how an algorithm works
-number of inputs & order of complexity
-for memory it has space complexity
-faster result grows after each step worst your algorithm perform


Godot:
-free & open source game engine capable of building high quality 2D & 3D games
-unity allows you to create, visualise & program behaviour of game objects
-using C or C++ or just GDScript (cross between python & typescript)
-reduces amount fo complexity & boiler plates when coding game scripts
-nodes are like building blocks that can be assigned as child of another node to control appearance & behaviour of objects in scene
-we can save scene in disk & use it within other scenes
-can export your game in single click
-gizmo
-wireframe
-mesh is collection of triangle that make 3D shapes looks realistic
-directional light
-collision shape & mesh
-attaching script


Bad code just broke billion Windows machines:
-blue screen on windows
-update pushed by enterprise cybersecurity firm (crowd strike)
-airplanes are shutting down, hospitals are not able to treat patients, drive through window
-catastrophic failure
-falcon tool that provides end point protection using AI & analysis to detect threat in real time
-fix -detach operating system disc create snapshot or backup of disk
     -mount volume to new virtual servers
     -navigate to winder or drivers directory
     -delete file 
     -detach volume 
     -reattach fix volume to impacted virtual servers


Gzip:
-lossless file compression tools famous for making large chunks of data smaller
-files on computers are represented by chips on silicon chip but they often take up more space than actual necessary
-LZ77 (solving problem by looping over content of file to identify repeated sequences that can be replaced by meta data or shorter sequences --> reducing total amount of bits required to represent information)
-lousy compression (which can make image file smaller but information is lost on process)
-gzip is most common way to implement end to end compression (file compressed on server is decompressed on browser to reduce data sent over network)
-gzip is installed by default in any linux mahcine
-high compression ratio --> more space it has saved
-gzip cannot compress entire directory


Docker:
-tool that can package software into container that run reliably on any environment 
-virtual machines are bulky & slower
-instead of virtualising hardware, containers only virtualise OS
-all apps & containers are run by single kernel which make it faster & efficient
-docker file -its like DNA, use code that tells docker how to build image (which itself is snapshot of software along with all dependencies down to operating system level)
-image -immutable & can be used to spin up multiple containers which is actual software running in real world
-base image can be pulled down form cloud & can also upload your own image to variety of different docker registers
-building image layer by layer 
-can be run on multiple machines, multiple clouds 


Fatest algorithm:
-no fastest sorting algorithm
-each sorting algorithm can be fastest for certain scenarios
-many types of sorting algorithm present with time complexities O(N²), O(N*logN) & even O(N)
-quickSort has an excellent average-time performance, but degrades to quadratic-time in some cases
-most report that fastest sorts on average are quick-sort, or radix-sort (bucket sort)
-radix-sort may win in worst case & in worst case quick-sort is very bad
-tim-sort (fastest in practice, hybrid sort = merge sort + insertion sort + number of heuristics -intro-sort is another hybrid algorithm but not stable (combination of quick sort + heap sort & neither of them stable
-cases:
	-tiny lists = insertion sort (quite fast & stable)
	-Larger ones = merge sort (generally fastest)


[PIXLR]
[Craiyon]
[NightCafe]
[Artbreeder]
[Tuberipper]


File compression formate:
-


Pied piper:
-most efficient network on earth
-compress content of encrypted file in transit bypassing encryption
-able to decrypt strongest known encryption schemes


Array Reduce:
-start with list of items then iterate over them to compute single value
-


ArrayMaps:
-


Linked List:
-


Typescript:
-


-Overclocked
-Opencv projects
-


Git advance:
-perfect commit
-bigger commit gets & more topics mixed into commit harder it gets understand 
-git add -p index.html (p stands for patch level)
-y for yes & n for no
-git status
-git commit
-branching strategy -helps when working with teams & onboard team members
		   -avoid mistakes & collision
		   -must have high quality testing environment setup
		   -


Matplotlib:
-useful library for data visualisation in python
-line plots, scatter plots, bar plots, histograms, pie charts
-3D plots, Contour plots, Heat maps, Box plots, Violin plots
-non-Cartesian plots, vector fields, violin graphs
-visualise both ordinal and tabular data
-geospatial plots, beautiful Data Visualisations with Seaborn
-implement event handling & GUI widgets & learn how to turn interactive plots into videos
-Visualise data using PyPlot, plot functions, create complex subplots & troubleshoot issues


Developer vs maintainer:
-open source softwares 
-global community of developers & maintainers
-Developers -innovators of open-source community
	    -contributes new ideas, develop features, write code
	    -finding errors & fixing bugs requires deep technical knowledge & analytical skills
-Maintainer -takes overall responsibility of management & coordination of all open source projects
	    -prioritising, setting goals, planning long term strategy
	    -which new feature should be included in next version 


Pandas:
-data structures for data analysis
-Data frame is two-dimensional
-Series is one dimensional
-data analysis toolkit for python
-fast, powerful, flexible
-pandas’ data structure is efficient
-pandas objects are structured like spreadsheet with rows & columns
-provides include relational databases, features that support plain text & tools for supporting comma-separated values (CSV) files
-data merging is simple in various situations
-effortlessly merge small, medium, or large datasets with Pandas
-data is flexible with Pandas
-employees will encounter no problems when editing data, customising datasets, or pivoting data to match their requirements
-pandas are more flexible than in SQL
-SQL only supports column metadata, pandas supports column & row metadata
-use pandas (with Python) in several domains (statistics, advertising, financing, or analytics)


Web scraping using python:
-Web Scraping -extracting content & data from website
	      -websites are built using Hypertext Markup Language (HTML) codes which web scraping codes/web scrapers can download objects from them
-interacting with URLs is important to web scraping 


Making Sorting algorithm race:
-important for search engines, databases, operating systems
-bogo sort (dumbest algorithm ever)
	  -randomly suffering data & checking if its in order
	  -best case scenario -1/100! (It would technically work)
-bubble sort -goes through data & compare adjacent elements & swaps them in wrong order
	     -repeats again & again
	     -not best but works
-merge sort -divides data into smaller & smaller chunks & sorts them
	    -then merges them back together
-cocktail shaker sort -kind of like bubble sort but it moves in both direction
		     -not that good 
-insertion sort -works by inserting each element into correct position
-bucket sort -divides data into buckets based not their values
	     -then merges whole
-quick sort -most used algorithm right now
	    -works by selecting pivot element then dividing other elements into 2 lists depending on if they are greater or less than pivot
-radix sort -fastest 


Linux boot process:
-behind scenes when pressing power button
-program (BIOS/UEIF) boots up --> pieces of softwares gets all part of computer ready for action --> 
Runs post --> checks out with post --> BIOS & UEIF needs to find & load up boot loader software --> boot loader usually set to check hard drive 1st or Usb drives or CDs 
-boot loaders -locate OS kernel on disk
	      -load kernel into computer memory
	      -start running kernel code
	      -some common boot loaders (LILO & GRUB2)
--> hands over to kernel to finish up start up process --> kernel takes control of computer's resources --> starts initiating all background process & services
-decompresses itself onto memory & checks hardwares --> loads device drivers & other kernel modules
-systemd -has ton of responsibility to get system boot up & ready to use
	 -


IDEs:
-integrated development environment
-indexing -core feature, all WebStorm functionality (syntax/error highlighting, code completion, code inspections, navigation, refactoring, code coverage, search) is based on indexing
-combination of tools, text editor & compiler
-notepad or notepad++ 
-electronic machine only understand voltage fluctuations 
-debugger -application that detects errors & stops program right before error 


Vector database:
-pinecone, chroma, weaviate
-vector is array of number but can represent more complex objects like words, sentences, images, audio file & continues high dimensional space called embedding
-embedding -maps semantic words together similar features in virtually any other data type (used for recommendation system, search engines, text generation like chatGPT)
-vector database -you have array of numbers clustered together based on similarity 
		-ultra low latency
		-making it ideal choice for AI driven applications
		-extend LLM with long term memory
-Auto-GPT & babyAPI


Machine learning & neural networks without libraries:
-web app that learns to recognise drawings
-each drawing is made by collection of paths containing points
-


Tensor flow:
-open source machine learning framework for powering deep learning networks with high level code
-just library for programming with linear algebra & statistics
-multi dimensional array 
-collection of APIs for data processing visualisation model evaluation & deployment that make deep learning accessible to average developer 
-can be run on any small to big device & even in browser with tensorlfow.js
-core library can be scaled upto multiple GPUs or run on tensor processing units ships engineer specific
-used in medicine for object detection & MRI images
-used in predictive analysis
-recommended music 
-fraud detection
-self driving car, natural language processing 
-training model for multiple epics its accuracy should gradually improve


Impact of Artificial Intelligence on Programming:
-automations has always helped people
-machine code --> assembler --> C --> rust
-low level hardware & kernel 
-you need to be optimistic to make big things


[4K images contain over eight million]
[AI girlfriend]
[Listing calculator]


Gaming terms:
-HUD (head of display)
-health, life left, pointes ammunition, weapons, menu option, sound, game progression, level information, node is fundamentals building block of scene, within spirit kit
-HP is hit points, one you run out you die
-MP is mana points, used for casting most spells
-XP is experience points, when you gain enough of them you level up
-SP is stamina points and works kind of like MP but naturally recovers and is mostly used for skills
-scene (area of content)
-critical hit
-loot
-one shot kill
-MP, HP, Health, money
-lost, win, draw
-zoning
-XP
-MP
-HP
-PP
-VRR (variable refresh rate)
-under-levelled 
-PVP / PVE
-unlocks
-time attack
-T-pose
-telegraph
-turn-based
-tanking
-stun-lock
-skins
-spamming
-speed-run
-raid
-ragequit
-ADS
-AoE
-bots
-backwards compatibility
-unexpected glitch
-balancing
-bullet sponge
-boss-rush
-cheesing
-camping
-crafting
-combo
-DPS
-drops
-dialogue tree
-de-buff
-de-aggro
-easter egg
-exploit
-escort mission
-end-game
-frame-rate
-friendly fire
-fetch-quest
-finisher
-farming
-ganking
-grinding
-HDR
-hit box 
-I-frames
-invisible walls
-juggling
-kicking
-kiting
-K/D ratio
-lobby
-load out
-loot
-mobs
-mount 
-noob
-OP 
-OHK
-KO


Raspberry Pi:
-computer that fits in your palm of your hand costing just $5-$60
-best seller computers in world
-quite powerful quad core processor & upto 8 GB of ram
-great for building IOT prototypes, robots, security cameras, web servers
-GPIO (general purpose input output connector) for connecting other electrical devices
-audio jack for connecting speakers & headphones
-CSI connector for building for building you own custom camera
-micro SD slot (like hard drive that contains operating system required to interface with hardware) 
-noobs installer


[F-droid]


Tox messaging CLI:
-secure and verifiable means of communication
-instant messaging protocol
-peer-to-peer: no central point of failure or interference
-no metadata: related to point 1, no third party can see who you are messaging, when or from where
-encrypted: content of messages are encrypted
-perfect forward secrecy: each message is encrypted with a separate key, so that decrypting one message does not allow an attacker to decrypt your previous messages (this is an advantage over GPG encryption)
-encryption/security of Tox is not as well tested as GPG
-install Orbot and TRIfA
-installing tox in tails OS


Llama:
-biggest LLM ever
-free & open source
-took months to train 16000 H100 GPUs costed 100s of million of dollar
-405 billion parameters model
-128K context length
-more parameters capture more complex patterns
-more parameter =! Better always
-training model is not open source
-only 300 lines of python code & fair scale library to distribute training across multiple GPUs


Super intelligence:
-invented convolutional neural network
-SSI (super safe intelligence)
-ASI (artificial super intelligence)


Programming language for GPUs:
-parallel computing super power
-one wrong node leads to disaster
-no need to know about cuda, locks, mutex & regex to  
-python code runs on single thread
-modern CPUs has clock time of 4GHz (for handling 1 instruction per cycle --> only able to perform 4 billion instruction/seconds)
-modifying your python code to take advantage of multiple threads
-interaction combinators
-bend -feels like python but scales like Cuda
-uses rust interpreter to run 
-.bend extension & run (bend run app.bend)
-does not have loops but have folds (allows you to consume recursive datatype in parallel by list or tree)
-using all threads of CPU (bend run-c app.bend)


Linux got wrecked by backdoor attack:
-cyber attack affecting XZ compression tool was shipped to production
-compromised linux distro debian, fedora, open suse
-backdoor attack
-XZ util is tool for compressing & decompressing (Ziv Karloff chain algorithm & Lzma contains)
-SSHD (secure shell domain) that listens to SSH connection
-malicious code is not present in source code
-injecting pre-built object disguise as test file


Mind behind linux:
-most boring office is best & sitting their quietly is important
-working alone can be extremely productive
-sometimes you just make projects to show off
-comments & feedback on your code is important
-CVS
-coding something meaningful
-coding can be money making machine
-good code vs bad code


AI from scratch:
-using keyboard for controls is not ideal
-camera sensors, basic image processing, blue rust bands, path finding, controls
-Proximity Sensor -all sensors that perform non-contact detection in comparison to sensors, such as 	
		  limit switches that detect objects by physically contacting them
                  -convert information on movement or presence of object into electrical signal


Machine learnings:
-algorithm analysis data -makes predictions on that
-function f(x,y) (x --> y)
-


Neural Networks can learn (almost) anything:
-


Choice of data structures in coding:
-array -need constant-time access to elements
       -number of elements is known & fixed
       -Insertion & deletion operations are not frequent
-linked list -need efficient insertion & deletion at both ends or in middle
	     -size of data set is dynamic
	     -Implementing a queue or stack
-stack -need to manage elements in Last-In-First-Out (LIFO) manner
       -undo functionality in text editors
-queue -need to manage elements in First-In-First-Out (FIFO) manner
       -task scheduling, breadth-first search (BFS) in graphs
-hash table/dictionary -You need fast access, insertion, and deletion based on a key
		       -Implementing a cache, counting occurrences of elements
-tree -binary Search Tree (BST) -You need to maintain a sorted list with efficient insertion, 	
                                 deletion, and lookup
			       -Implementing a set or a map with sorted keys
      -AVL Tree / Red-Black Tree -need a self-balancing tree to ensure O(log n) operations
				-Ordered collections with frequent insertions and deletions
-Heap/Priority Queue -you need to efficiently find and remove the smallest or largest element.
		    -implementing a scheduler, Dijkstra's algorithm.
-Graph -You need to represent and traverse complex relationships between entities.
       -Social networks, road maps, dependency graphs.
-Set -You need to store unique elements & support fast membership testing
     -Removing duplicates from a list, membership checking
-Trie -You need to efficiently store & search strings, especially prefixes
      -Implementing an auto-complete feature
-Matrix -You need to represent & manipulate two-dimensional data
       -Image processing, game boards
-Deque (Double-Ended Queue) -You need to efficiently insert & remove elements from both ends
			  -Implementing sliding window algorithm


Configuration files used in git (version control system):
-.gitignore -file specifies which files & directories should be ignored by Git
	    -these files will not be tracked, committed, or pushed to repository 
	    -particularly useful for excluding temporary files, build artefacts, sensitive 	
	     information or other files that are not meant to share with others
-.gitattributes -defines attributes for paths in your repository
	        -control variety of aspects, such as end-of-line normalisation, diff 	
                 settings & custom merge drivers
		-ensure consistent handling of files across different environments & tools
		-specifying custom diff tools or settings for specific file types
		-certain files as binary Git does not attempt to perform text diff
-git add .gitignore .gitattributes
-git commit -m "Add .gitignore and .gitattributes"


Good code vs bad code:
-readability -expressive (how understandable your intent of code it ?)
	     -conciseness (how much code is actually is to understand)
-testability
-correctness 
-maintainability 
good code:
	-makes sense to another program or your future self after 6 months
	-statement, methods & object has single responsibility
	-easy to add a test for bug & barely asking for help or involve other devs
	-clearly defines all the data it works with: inputs, outputs, classes, data structures,
	 json models, xml schemas
	-explain odd design decisions, implementation quirks, or the rationale behind clever
	 solutions
	-choice in data structures is good
-bad code:
	-lots of comments
	-unnecessary details in method names
	-method with multiple tasks to perform 
	-unnecessary method arguments 
	-unnecessary over-loading
	-method documentation in method name 
	-uncalled-for return types 
	-meaningless names
	-long methods
	-code is hard to write unit test for
	-code doesn’t have unit test
	-code tightly coupled to other code
	-code that isn’t Solid
	-unreadable code
	-bad code has correct logic, but without comments leaves reader guessing at meaning
	-bad code is inflexible & not designed to accommodate changes or additions easily
	-repeated chunks of code instead of reusing common logic
	-security vulnerabilities due to poor input validation, lack of encryption, security best 	
         practices
	-data and context are implicit and never properly documented anywhere
	-inefficient & suboptimal algorithms or data structures that result in poor performance


Black arch vs kali linux:
-Kali linux  -User-Friendly interface
	     -polished and intuitive interface, making it accessible for beginners & experienced 
	      users alike
	     -includes default set of pre-configured tools, reducing setup time
	     -extensive documentation & community support
	     -numerous tutorials, guides & forums are available for help
	     -over 600 pre-installed penetration testing tools, carefully selected to cover wide 
	      range of security tasks
	     -Tools are tested & maintained by Kali team, ensuring they work well with system
	     -While comprehensive, toolset is not as extensive as BlackArch
	     -resource-heavy, particularly on older or less powerful hardware
	     -operates in non-root user mode by default & require additional configuration
	      for certain advanced tasks
-Black arch  -vast repository of over 2,500 security tools wide range of cybersecurity needs
	     -regularly updated with new tools, providing access to cutting-edge utilities
	     -provides a high degree of customisation Users can build their system from ground up
 	     -ensuring that users always have access to latest software
	     -suitable for advanced users who require more customisable & flexible penetration
	      testing environment
	     -offers access to Arch User Repository (AUR), allows users to install wide range of
	      additional packages
	     -lightweight and fast


Scala:
-high level statically typed programming language
-famous for using object oriented & functional programming paradigms together in cool & concise syntax
-large scale analytics engine apache spark, X, linkedIn, ADAM
-one of many JVM languages --> converted t bite code and run to java virtual machine
-can interact Wirth java & use java libraries
-does not has java boiler plate
-result is concise, expressive & safe
-provides features like high order functions, null safety, pattern matching, algebra data types that  reduces amount of pain of java developer
-.sbt & .scala extension & scala compiler installation


Mac or linux:
-install free Xcode package for OS X & use home-brew to install any other linux tools 
-open up terminal & go to town then no separate linux install needed
-command line with iTerm2 & zsh
-install Nerd Fonts, ohmyzsh, & powerline9k
-home brew (for package management) & tmux
-UNIX system like BSD & solaris
-macOS is Posix compliant & linux Commands are also posix
-X windows applications, X server is needed, XQuartz


System design:
-understanding high level computer architecture of individual computers
-computer function thought layered system each optimised for various tasks
-disk storage -primary data -(SSD/HDD type), non-volatile, maintains data without power
			   -contain OS applications & users file
			   -ranges from (256GB, 512GB, 1TB, 2TB)
			   -SSDs are more expensive & offers significantly faster data retrieval 
			   -SSDs (500MB/sec to 3500MB/sec) & HDD (80MB/sec to 160MB/sec)
	      -RAM (random access memory) -acts as primary active data holder & hold data structures, variables, applications data that are currently in use or process)
					 -


Intel chips:
-clock speed, number of cores of threads, transistors count, cash size
-failure rate
-everything is pointless if chip is unstable
-high default clock rates & power usage could be leading to silicon degradation & instability
-under clock CPUs at lower voltage shortly
-motherboard manufactures 
-weak under clock settings 


Code to go viral on social media:
-creating satisfying ball simulations & animations
-if object falls, accelerate cause gravity, if more time falling more fast
-sound & colour is important
-maximising retention
-ball, maze, sorting algorithm videos
-focus on gaining followers, subscribers, views, likes, comments, hearts, etc


Pygame python:
-library dedicated to video game development
-built on top of Simple DirectMedia Layer (SDL)
-facilitates interface & management of input devices (keyboard, mouse, joystick) & output devices (screen, speaker)
-instead of writing game engine in Python from scratch, if has pre-coded functions
-pygame Subset for Android to run on android smartphone
-highly active community
-python package index (PyPi) & GUI libraries
-pyglet is another Python library for game development (cross-platform multimedia library used for creating visually rich games & other applications)


Vim:
-vim is more efficient than normal IDE & has autocomplete features like IDEs
-IDEs are very bloated & specific
-vim works in modes
-vi client.c (opens up client.c file)
-: (to give commands)
-:q (to exit)
-:q! (Quit & dismiss all changes)
-i (insert mode)
-esc (to escape)
-:w (write mode)
-:wq (write & write)
-shift+i (goes to 1st line)
-shift+a (goes to end of line)
-:set number
-5->, 4^, 3<- (going up, down, right, left)
-vi ~/vimrc
-u after esc (undo)
-v (visual mode) -> (selecting)
		-d (deletion)
		-y (copying)
		-p (pasting)
		-dd (deletes whole line) 
		-cc (changes line)
		-diw (delete in word)
		-dw
-Neovim -x (exiting pluggins)
        -PlugInstall 
	-PlugClean
-powerline font symbols


Zed:
-cmd + p (command palette)
-cmd + shift + p (go to file)
-cmd + click (go to definition)
-cmd + l (go to line)
-cmd + backspace (delete line)
-cmd + c (copy line)
-cmd + x (cut line)
-cmd + / (comment/uncomment line)
-alt + up/down (arrow move line up/down)
-cmd + l (select line)
-cmd + d (select word)
-cmd + \ (split editor)
-cmd + 1/2/3... (focus next split)
-cmd + w (close split)
-cmd + ctrl + f / F11 (toggle full screen)
-cmd + f (find)
-cmd + r (replace)
-cmd + shift + r (replace all)
-cmd + j (toggle terminal)
-cmd + , (open settings)
-cmd + shift + x (show extensions)
-cmd + n (new file)
-cmd + s (save file)
-cmd + alt + s (save all files)
-cmd + w (close file)
-cmd + shift + w / (close all files)
-cmd + b (toggle between file explorer)


React JS:
-virtual DOM -
-react web components allows to take lines from html & take component of our own
-reusing components to other pages
-maintained by Facebook 
-reactDOM & JSX -


Turning old PC is your new server:
-hosting your own media server
-big servers in big data centres runs with redundant power supply & ECC memory (may prefer slower core rather than fast ones) (lack in consumer IO like tons of USB audio)
-serving 100s & thousands of clients
-factory reset PC 
-Plex media servers & pulse way to manage our system remotely
-running remote torrenting box, ad blocking server 
-managing your files remotely
-drive set up LLT simple server
-network share by copying link
-network, file, printing sharing turned on
-without exposing our IP to net


How does computer works:
-


Home server monitoring setup:
-Prometheus & InfluxDB (databases)
-exporting tools 
-


Principals of game design:
-player --> goal
-


Linux 100+ things to know:
-superior free open source operating system but only has 4% share of PC market
-most dominant os on servers
-if you can't SSH into linux terminal & fix it (you are done for)
-open source OS licensed under GPL 2.0
-linux is Operating system kernel
-boot-loader loads linux into random access memory (detects hardware & starts init system)
-sets up application in user space which brings user to login screen
-allocates & deallocates memory for processor & create virtual memory to use more memory than physically available by tapping into hard drive
-virtual file system (ext4)
-kernel also interact with driver
-surrounded by CPUs protection at ring 0
-standard library for C & use all kinds of rappers for making system call (unistd.h)
-GNU -project that predates linux kernel itself & provides all core utilities for linux
-


CLI tools for terminal:
-gping  
-nvim
-vim
-bandwhich
-wtfutil
-tmux
-ping site_name
-yazi
-tree
-neofetch
-surge
-lazydocker 
-loadtest
-termchat
-vm_stat   
-gtop
-fzf
-jq
-glances
-wttr
-htop
-vtop
-duf
-cmus
-bashupload
-katoolin
-speedtest-cli
-lazygit
-kdash
-httpie
-taskwarrior
-tcpdump
-Rsync 
-ntop 
-tcpdump 
-netstat
-dua
-git 
-nmap 
-curl 
-man 
-less
-ssh
-mosh
-wget
-scli
-httrack
-iostat
-df -h     
-du -sh /path/to/directory
-traceroute google.com     
-tail -f /var/log/system.log
-grep "error" /var/log/system.log
-log show --predicate 'eventMessage contains "error"' --info
-networksetup -getinfo "Wi-Fi"
-networksetup -listallnetworkservices
-networksetup -setmanual "Wi-Fi" 192.168.1.100 255.255.255.0 192.168.1.1
-sed
-find
-awk
-loadtest
-pycryptodome
-links
-iftop
-netstat
-nethogs
-tldr
-dust
-exa, find-fd, gitui, delta diff, ack
-s-tui
-Zathura
-ls, cat, mv, cp, less, xargs
-Lakshmi
-Ncspot, khal, neovim, ranger,
-neomutt for mail
-newsboat for rss
-lolcat
-nethack
-myrepos
-visidata
-mpv
-sfeed
-bsdtar
-coreutils, vim, GnuCompilerCollection, binutils, csmith, various foss transpilers, cordless, tuir, mingw, adb, fastboot, metasploit and friends
-nmail


[wrap]


Tiptop


[thispersondoesnotexist.com]
[windows subsystem]


Apple intelligence:
-resources to train large language models
-on-device foundations model
-sharing data with open AI remotely
-these private cloud will be audited by 3rd party to ensure your private data is not leaking somewhere


PhoneInfoga:
-


Machine learning algorithm form scratch:
-without relying on external libraries (TensorFlow, karas, scikit learn)
-classification: 
	-K-nearest neighbours (KNN) -classifies data points based on majority class of their k- 
         nearest neighbours in feature space
	-logistic regression -binary classification algorithm that models probability of data point   
         belonging to particular class using logistic function
	-naive bayes -probabilistic classifier based on Bayes's theorem with assumption of   
         independence between features
-regression:
	-linear regression -used for predicting continuous numerical values by fitting linear 
         relationship between input features & target variable
-clustering:
	-K-means clustering -unsupervised clustering algorithm that partitions data points into 'k'
         clusters based on their similarity in feature space 
-neural Networks:
	-perceptron -basic neural network unit that learns to classify inputs into two categories 
         using weighted sum & threshold activation function
	-neural network -implementation represents simple feedforward neural network with  
         customisable architecture, including multiple layers & activation functions


Try 3 different file System APIs in Node.js:
-most common thing to do on server side application is read & write o file system
-


Building streaming AI chat app:
-AI SDK an open source tool that makes it easy to build apps with large language model like GPT4 & others & handles text streaming on server allowing to creating typing effect
-Next.js under hood
-


PyTorch:
-open source deep learning framework used to build some most famous artificial intelligence product
-made in Facebook research lab
-Lua based torch library
-programming with tensors that are just multidimensional array that represent data & parameters in deep neural network
-training machine learning models with just few lines of python
-facilitates high performance parallel computing on GPU 
-developers love prototyping with it as it supports dynamic computational graph allowing models to optimised at runtime (it does this by constructing directed acyclic graph consisting of functions that keep track of all executed operations on tensors allowing us to change shape, size & operations 
-train models for computer vision AI like Tesla autopilot 
-image generators like stable diffusion & speech recognition model like AI whisper
-image classifier


Stay anonymous while hacking:
-hiding your identity is important while hacking
-configuring proxy chains on linux system -change your public IP address 
					-sudo apt install tor proxy chains
-locate proxychains
-nano /etc/proxychains4.conf
-edit file & exit by ctrl + x
-sudo service tor start (start tor)
-sudo service tor status (Check Tor Services)
-proxychains firefox
-proxychains commands
-visit [DNS leak test]
-whoami tool -sudo apt update && sudo apt install tar tor curl python3 python3-scapy network
 manager
-git clone https://github.com/omer-dogan/kali-wh...
-cd whoami-project
-ls
-sudo make install
-kali-whoami --start ( To launch Tool )
-kali-whoami --help ( To view Help )


Make multiBoot pen-drive using kali linux:
-storing more than 1 operating system in single pen drive
-ventoy
-cd downloads
-ls
-tar -xzvf File Name
-ls
-cd ventoy version
-ls
-./ventoyGUI.x86_64


Turning old PC/Laptop into media server:
-installing Ubantu server edition
-burning disk image of Ubuntu server editor
-Popsicle or etcher (USB flashing tool)
-gnome disk or kde partition manager
-Thinkpad doc (handy for plugging any external hard drives)
-use internet core to do that
-using direct wire connections is much better than having wifi
-f12 to get into boot manager
-SHH into server --> entering local IP address to your machine
-install & enable PLEX


-awk
-sed
-grep
-exa
-script sort bc
-nohuplc
-find + xargs
-bat btop Htop Glances Ranger Spotdl Thefuck Lolcat Calc Cal
-miniserve
-ag
-ripgrep
-ed editor
-ss (killing sockets found)
-vifm, vidir, gron, elvish
-pecoa
-tldr
-lsdge
-ranger
-visidata
-atool is wrapper for slew of compression/archivers (tar, gzip, zip, rar, rpm, deb, bzip, bzip2, lzip, xz, 7zip & many others) 
-bottom
-magic wormhole exchange file easily between two devices by using external open proxy with simple & robust authentication & encryption
-vidir & others in moreutils
-up
-stow -symlink farming handy for managing your dot-files among other things
-paste & join merge lines of files display lists side-by-side in multiple columns
-expect -glue for interacting with CLI utilities that prompt user for input automates what human would do
-pcregrep -for those rare cases where grep -P isn't fully perl compatible
-pandoc -swiss army knife for converting text files
-pigz - multi-threaded file compression for those times when gzip won't cut it
zcat, zless, zgrep -same as their counterparts but for compressed files
-basename - strip directory and suffix from filenames
pssh - Parallel SSH. Ever need to do the same thing on multiple hosts over SSH?
-Qalculate
-groff
-tmsu - it's a format-agnostic tagger. It keeps its own separate database to keep track of files and their tags.
xpe - a commandline xpath parser. xpaths are better than css queries for getting at specific html elements in the DOM. Compared to other parsers, this one is easier to use, and supports html.

moreutils - a bunch of unique, interesting utilities

mcfly - makes searching your shell history faster and easier

soundmeter - makes it possible to measure sound levels on the cli.
-tig
-gh
-fd
-httm is a CLI tool for viewing snapshot file versions on ZFS and btrfs datasets
-advdef - losslessly recompress .gz and .png files, often reduces size by 10—40%

advzip - same as above, but for .zip files

hexedit - view and edit the bytes of a binary file

magick - create, edit, compose, and convert images on the command line

pandoc - convert between Markdown, HTML, LaTeX, .docx, PDF, ...

potrace - transforms a binary image into a smooth, scalable vector graphic

sox - Swiss army knife of sound processing: convert file formats, change sample rate, apply various effects

wttr.in check the weather on the command line, with ASCII art display
-
lnav
a log file navigator, which I find extremely useful when looking at logs from many sources, such as aggregated from pods across machines in a Kubernetes cluster, or from different components of an app along the same timeline
-fc

batch

ionice / nice

cut / tr

tree

uniq

stty

-
dd
-croc
-

Lsof
Chroot
Nmap
Tcpdump
Netcat
Iptables
Grep
mdlt
wopr



https://github.com/life4/enc


Doom Emacs:
-with org mode(notes), magit (git client), dired( file manager) & LSPs for many languages, works fabulously (both GUI & TUI versions)
-IDEs differ from text editor as they allow to integrate framework to build software & test it, as well as integrating language servers & package definitions for language at hand
-editor pane with tabs, file navigator sidebar, multiple terminals at bottom
-SSHing into multiple machines to work in vim can be complicated


time
date
script


[Digital Attack Map]
[Kaspersky Cyberthreat Map]
[FireEye Threat Map]
[Check Point ThreatCloud]


Oldest text editor:
-ed command
-1960s (getting information out of computer was just to print it on paper) (teleprinters)
-ls /dev/tty"
-pre-installed in most linux distributions
-raspberry pie performing serial communication
-tx & rx pins


SSH:
-secure shell used to logging into to remote server, linux or BSD servers
-works on windows as well
-2 servers needs to be installed on remote machine
-SSH client that needs to be installed on local machine
-sudo apt update && sudo apt upgrade
-sudo apt install open-ssh-server
-sudo systemctl status ssh
-sudo systemctl enable --now ssh
-many servers have firewall enable by default in most linux distributions
-sudo systemctl status uff
-sudo ufw allow ssh
-ip a
-ssh ip_address
-remote machine & local machine
-no need to worry about passwords
-ssh-keygen -t asdfasdf
-sudo vim /etc/ssh/sshd_config
-sudo system reload sshd


Windows:
-windows has better hardware compatibility
-many hardware developer offers driver for their products on windows
-gaming on linux is improving
-application & software support is better in windows
-easy to use than linux


Awk command:
-ps (we can manipulate text)
-columned information
-ps | awk '{print $1}'
-ps | awk '{print $2}'
-ps | awk '{print}'
-cat /etc/passwd
-awk -F ":" '{print $1}' /etc/passwd
-awk -F ":" '{print $1 "\t" $3 "\t" $7}' /etc/passwd
-cat /etc/shells
-awk -F "/" '/'\// {print $NF}' /etc/shells | uniq | sort
-df | awk '/\dev\/loop/ {print $1}'
-df | awk '/\dev\/loop/ {print $1"\t"$2"\t"$3}'
-df | awk '/\dev\/loop/ {print $1"\t"$2 + $3}'
-df | awk '/\dev\/loop/ {print $1"\t"$2"\t"$3}'
-awk 'length($0) > 7' /etc/shells
-awk 'length($0) < 7' /etc/shells
-awk 'length($0) < 8' /etc/shells
-ps -ef
-ps -ef | awk '{ if($NF == "/bin/fish") print $0}'
-awk 'BEGIN { for(i =1; i <= 10; i++) print "The square root of", i, "is", i*I;}' 
-awk '$1 ~ /^[b,c]/ {print $0}' .bashrc
-cat numbered.txt
-awk '{print substr($0, 4)}' numbered.txt
-awk 'match($0, /o/) {print $0 " has \"o\" character at " RESTART}' numbered.txt
-df | awk  'NR==7, NR==11 {print NR, $0}'
-df | awk  'NR==7, NR==11 {print $0}'
-awk 'END {print NR}' /etc/shells
-awk 'END {print NR}' /etc/shells /etc/passwd


Cut & tr:
-cut (removes sections from each line from file)
-echo "This is a line. of text" | cut -c 1-10
-cut -c 1-10 .bashrc
-cut -c 11- .bashrc
-echo "This is a line. of text" | cut -d ' ' -f5
-cat /etc/passwd
-cut -d ':' -f2 /etc/passwd
-echo "abc def" | cut -f2 -d ' '
-echo "abc   def" | cut -f2 -d ' '
-echo "abc   def" | awk '{print $2}'
-echo " abc   def" | cut -f2 -d ' '
-echo " abc   def" | awk '{print $2}'
-man tr
-echo "This is a line of text" | tr 'a' 'A'
-echo "This is a line of text" | tr 'aeio' 'AEIO'
-echo "This is a line of text" | tr -d 'aeio' 
-echo "This is a line of text" | tr -d 'aeio '
-echo "Thiis iis aaaa liineee oof teeeext" | tr -s 'aeio' 
-echo "This its aaa linee off teeext" | tr -s '[:lower:]' '[:upper:]'
-echo "This is a line of text" | tr -d 'aeio'
-echo "This is a line of text" | tr -cd 'aeio'
-echo "This is a line of text" | tr -cd 'aeio\n'
-head /dev/urandom
-head 3 /dev/urandom | tr -cd '[:print:]'
-echo "This is a strong and complicated password 1234" | tr -cd '[:digit:]'
-echo "This is a line of text" | sed -e 'y/ai/AI/'
-echo "This is a line of text" | sed -e 'y/[:lower:]/[:upper:]/'


Sed command:
-string editor allows you to filter & transform text
-replacing & searching pattern
-sed 's/find/replace/' <oldfile>
-sed 's/o/O/' <.Xresources >sed-test
-sed 's/o/O/g' <.Xresources >sed-test
-echo "Derek" | sed 's/Derek/DT/'
-echo "The emacs file manager is dired" | sed 's/red/green/'
-echo "The emacs file manager is dired" | sed 's/ red/green/'
-echo "The emacs file manager is dired red." | sed 's/ red/green/'
-echo "The emacs file manager is dired red." | sed 's/ red/ green/'
-sed -i 's/find/replace/g' filename
-sed -i 's/Taylor/Tyler/g' .bashrc
-tldr sed | sed '/Replace/s/the/THE/'
-tldr sed | sed '/line_pattern/d'
-cat /etc/shells
-cat /etc/shells | sed 's/usr/u/g'
-cat /etc/shells | sed 's/usr/u/g' 's/bin/b/g'
-cat /etc/shells | sed -e 's/usr/u/g' -e 's/bin/b/g'
-cat /etc/shells | sed -e 's|usr|u|g' -e 's/bin/b/g'
-cat /etc/shells | sed -e 's|usr|u|g' -e 's#bin#b#g'
-cat /etc/shells | sed -n '/usr/p'
-sed -i 's/ *$//' test.sh
-sed -i 's/[[:space]]*$//' test.sh
-cat test.sh | sed '/^$/d'
-sed 's/[a-z]/\U&/g' test.sh
-sed 's/[A-Z]/\L&/g' test.sh
-head .bashrc
-sed 11q .bashrc
-awk 'NR < 13'.bashrc


Cmp, diff, tput:
-diff .bashrc test/bashrc
-diff .bashrc test/file1
-diff file1.txt file2.txt
-cmp .bashrc test/bashrc
-cmp .bashrc test/file1
-cmp binary1 binary2
-if cmp .bashrc test/bashrc ; then echo TRUE; else echo FALSE; fi
-if cmp .bashrc test/file1 ; then echo TRUE; else echo FALSE; fi
-if cmp --quiet .bashrc test/file1 ; then echo TRUE; else echo FALSE; fi
-if diff .bashrc test/file1 &>/dev/null ; then echo TRUE; else echo FALSE; fi
-if diff .bashrc test/bashrc &>/dev/null ; then echo TRUE; else echo FALSE; fi
-diff .bashrc test/bashrc
-diff -y .bashrc test/bashrc
-diff -y .bashrc test/file1
-diff -q .bashrc test/file1
-diff -u .bashrc test/file1
-diff -r nc/gitlab-repos/dtos/dtos-pkgbuild/ nc/gitlab-repos/dtos/dtos-core-repo
-tput setaf 3 && echo hi
-tput setaf 4 && echo hi
-tput setab 4 && echo hi
-cmp tldr
-tldr diff
-tldr tput
-cd nc/gitlab-repos/dtos/dtos-pkgbuild/


Pushd, pops, dirs:
-pushd /usr/share
-pushd /usr/share/icons
-pushd /usr/share/xsessions
-pushd +1
-pushd +2
-pushd -0
-pushd -n /var/local
-popd
-popd +4
-dirs
-dirs -v
-pushd
-pushd /home/dt
-cdh
-dirh
-cd ~/Download/
-dirh
-cdh
-prevd
-nextd


Setfont, write & wall:
-ubuntu server & switch to tty3
-ls usr/share/consolefonts/
-setfont font_name
-sudo vim /etc/default/console-setup
-reboot
-login as dt user
-man write
-who
-write dt tty3
-sudo write dt tty3
-mesg y
-messaging with tty3 & tty4 
-echo "hello there!" > tty4
-echo "hello there!" > /dev/tty4
-wall


Creating desktop log file:
-desktop notification on linux
-notify-send "firefox" "some message" 
-osascript -e 'display notification "some message" with title "firefox"'


Grep:
-grep the .bashrc
-grep -w the .bashrc
-cd .xmonad
-grep xmonad ./*
-grep xmonad ./* --exclude-dir=xpm
-grep xmonad ./* --exclude-dir={xpm, xmonad-example-configs}
-grep [aeiou] xmonad.hs
-grep [x-z] xmonad.hs
-grep ^im xmonad.hs
-grep -A 3 loghook xmonad.hs
-grep -A 3 -i loghook xmonad.hs
-grep -B 3 -i loghook xmonad.hs
-grep -C 3 -i loghook xmonad.hs
-grep -Hn import xmonad.hs
-grep -c import xmonad.hs
-cat ~/.bashrc
-cat ~/.bashrc |grep rickroll
-grep rickroll ~/.bashrc


Linux terminal utilities:
-man name_of_command
-name_of_command --help
-nano .bashrc
-less .bashrc
-cat .bashrc | head -n 5
-cat .bashrc | tail -n 5
-cat .bashrc | less
-cat .bashrc | tail -n 10 | head -n 5
-echo "gas gas gas" > file1
-xrandr 
-xrandr | grep "connected"
-xrandr | grep "connected" | awk '{print $1}'
-xrandr | grep "connected" | cut -f1 -d " "
-cd test
-ls
-chmod 755 file1
-ls -l
-chmod +x file1
-ls -l
-chmod -x file1
-ls -l
-chown name:name file
-chown -R name:name /home/dt/directory
-history
-history 10
-history | grep "xrandr"
-l3
-kill process_id
-killall conky
-ping google.com
-wget https........index.html
-ls
-cat index.html
-curl https........index.html --output index2.html
-seq 50
-seq 50 | shuf
-echo $RANDOM
-test -f file1
-test -f file1 && echo "True" || echo "False":
-test -f file1 && echo "True" || echo "False"
-test -f file2 && echo "True" || echo "False"
-ls
-test -d file2 && echo "True" || echo "False"
-echo "one two three" | xargs touch
-ls
-echo "one two three" | xargs rm
-ls
-lsblk
-df
-du
-du -ah/test
-date
-cal
-cal -3
-bc
-echo "6 / 2" | bc
-cp .bashrc test/bashrc
-cd test/
-ls -la
-split -n 5 bashrc
-ls
-cat xaa
-ls
-cat x* > newbashrc
-vim bashrc


Searching web from terminal:
-googler "distrotube"
-BROWSER=w3m googler "distrotube"
-3
-tldr googler
-BROWSER=w3m googler -j "distrotube"
-BROWSER=w3m googler -n 5 "linux"
-BROWSER=w3m googler -n 7 "linux"
-BROWSER=w3m googler -n 7 "linux"
-ddgr "distrotube"
-BROWSER=w3m ddgr -n -3 "distrotube"


Fork bomb:
-many dangerous commands that can crash or break linux installation
-sudo rm -rf on root directory (deletes every single file & directory on system)
-denial of service attack is like fork bomb (typically written in shell scripting)
-fork bomb continually forks process 1 --> 2 --> 4 process... (machine runs out of memory & machine locks up)
-shell script fork bomb
-


[TryHackMe]
[Hack the box]
[cybrary]


-ctrl + r for Reverse Search in Terminal:
-tmux & screen to detach and reattach to sessions at any time
-ranger or nnn file management
-python3 -m http.server 8000 (starting http server) 
-python3 -c "print(sum(1 for line in open('filename.txt')))"
-ssh -L 8080:localhost:80 user@remote_server (Forward a local port to a remote server)
-cat file.json | jq '.[].name'
-echo "scale=2; 5/3" | bc
-rsync -avz source/ destination/


Ip address:
-ifconfig
-ifconfig en0
-ifconfig en0 | grep "inet "
-networksetup -getinfo Wi-Fi
-networksetup -getinfo Ethernet
-ipconfig getifaddr en0
-ifconfig | grep "inet " | grep -v 127.0.0.1


Regex
-


Communication without internet:
-HAM radio -long-distance communication & need appropriate licenses to operate them
	   -send text messages using digital modes like Packet Radio or FT8
-LoRa (long range radio) -LoRa transceivers, modules like LoRa SX1278 can be connected to 	
			 microcontrollers like arduino/raspberry Pi to create messaging system
			-cover distances up to 10-15 km in urban areas & even more in open spaces
			-low power consumption
			-good range for direct communication
-mesh network with wi-fi -raspberry pi or similar devices, high-gain Wi-Fi antennas, & mesh 
			 networking software
			-create mesh network where each device relays messages
			-number of nodes and the range of your antennas
-two-way radio (walkie-talkie) -Motorola T80 extreme
			      -use the built-in text messaging feature to send short messages
			       CB radio (citizens band radio)


Sending message through CLI:
-using netcat (nc) for local network communication
-nc -l 12345 (listen on specific port)
-echo "Hello brother how do you do?" | nc <your_mac_ip> 12345
-using ssh to send message remotely
-ssh user@friend_ip 'echo "Hello brother how do you do?" >> ~/message_file.txt'
-using mail command to send email
-echo "Hello brother how do you do?" | mail -s "subject" ansh@example.com


-ophcrack -free Windows password recovery tool using rainbow tables
-NT password -tool to reset password on windows by modifying SAM file
-offline NT password & registry editor -another tool to reset windows passwords


Decentralised way of sending message through terminal:
-echo "What's up bastard" > message.txt
-openssl enc -aes-256-cbc -salt -in message.txt -out encrypted_message.enc (encryption)
-openssl enc -aes-256-cbc -d -in encrypted_message.enc -out decrypted_message.txt (decrypting)
-cat decrypted_message.txt
-avoid storing passwords in plaintext on system
-remove temporary files -after encrypting & decrypting, delete any temporary plaintext files to avoid leaving sensitive data on your system


Information of ports on system:
-sudo lsof -i -P -n  
-sudo lsof -i :1111
-netstat -an | grep :1111
-sudo lsof -i -P -n | grep LISTEN 
-netstat -an | grep LISTEN
-ss -tuln


Xargs:
-allows to taking standard input & pass that along as argument into another command
-many shell utility don't actually allow
-seq 5 
-seq 5 | echo 
-seq 5 | xargs echo
-seq 5 | xargs
-seq 5 | xargs -t 
-seq 5 | xargs -t printf
-ls
-ls | xargs ls 
-cut -d: -f1 < /etc/passwd | sort | xargs
-ls | xargs -I {} echo "/home/dt/{}"
-ls | xargs -I XXXX echo "/home/dt/XXXX"
-cd foo
-ls
-seq 1000
-seq 1000 | xargs -I {} touch {}.txt
-ls | cut -d. f1 | xargs -I {} mv {}.txt {}.txt
-ls -xargs -t
-ls -xargs -t -n 1
-ls -xargs -t -n 2
-seq 5 | xargs -n 1 bash -c 'echo $0'
-seq 5 | xargs -n 1 -P 1 bash -c 'echo $0'
-seq 5 | xargs -n 1 -P 1 bash -c 'echo $0'; sleep 1'
-seq 5 | xargs -n 1 -P 2 bash -c 'echo $0'; sleep 1'
-find foo -type f -name "*.txt" -exec rm {} \;
-cd foo
-ls
-seq 1000 | xargs -I {} touch {}.txt
-find . -type f -name "*.txt" | xargs rm
-time find . -type f -name "*.txt" -exec rm {} \;


$0 home server:
-personal media server to host movies & shows, network storage, VPN to home network
-minimum requirement is computer must have 64-bit processor & 2GB of ram
-connecting to ethernet 24/7
-never let your drive split into multiple volumes & not going to use all (we don't want that)
-samba (network servers)
-jellyfin (media server)
-wire-guard (VPN to network to access them from anywhere) 
-wake-on-lan -(remotely accessing machine anytime)
	     -computer ethernet port stays powered on, even when PC is off
-home server should have same local IP address (reserve that address in router's DHCP)
-accessing from SSH
-create directory that servers as network drive & changing permission


Port forwarding:
-allows computer over internet to connect to specific computer within private network
-RDC (remote desktop condition)
-sending request to our public IP address with specific port number
-port is not physical connection but logical connection to exchange information
-(IP address)42.42.53.38:42322(port number)
-computer1 message --> router (needs to know where to send message) --> computer2
-need to log into router configuration page by typing in router internal IP address using web browser
-ipconfig/ifconfig


Web scraping & web crawling:
-web-scraping -instructing data from 1 or more websites
-web-crawling -finding, discovering URLs or links on web
-need to use both for data extraction projects 
-download HTML file --> scrape data from those files
-In crawling, you don't know specific URLs & don't know domain either
-search engine scroll web so they can index pages & display them
-creating crawler that will output all page URL 
-web scarping usually have lot more data fields (5,10,20 or even more)


Scrapping internet:
-


Linux vs windows:
-installing graphics driver in windows is easy
-windows support all games (xbox & playstation games through remote play using my PC)
-legacy DOS games under compatibility mode
-emulator can be used in linux like wine & proton
-window has better performance in gaming
-frame rate is less than windows but consistency due to optimised background task
-cloud gaming accounts


Some computer specs:
-I7 9700k @ 3.60Ghz, NVIDIA geforce RTX 2700 8GB, 16GB DDR4
-10GEN I7, 1660ti 6GB, 16GB DDR4
-HP omen 15, RTX 3060, AMD Ryzen 7
-I5 4GEN, GT710 


Home server:
-following instructions to build servers & all connections
-foreshadowing
-rack (full of hard drives in set)
-CPU (xeon silver 4210, 10 cores, 20 threats)
-RAM (4 32 bits sticks = 128GB)
-2GB nicks
-SFPs (4 10GB SFP ports) & 2 power supplies
-2 250GB SSDs for running my OS
-switch to handle insane networking requirements of server
-4 servers (each server has 10 GB SFP interfaces = 16 interfaces)
-2 10GB ports per gateway
-CRS326-24S+2Q+RM (can handle 320GB per second of non-blocking traffic)
-documentation is important
-cage nuts


-botnet
-


Networking:
-OSI (open system interconnection) model -help desperate computing systems to communicate with each other
-layer 7 (application), layer 6 (presentation), layer 5 (session), layer 4 (transport), layer 3 (network), layer 2 (data link), layer 1 (physical)
-most devices function at more than 1 layer 
-analog modems -modulator & demodulator (take digital signal coming from digital node --> return to 
	        analog signal --> modulating signals & placing that on wire) 
	       -accept analog signal from wire --> convert to demodulating signal back to digital 
		signal that node understand
	       -developed to create connection b/w network segments via public switched telephone 
	 	network using plain old telephone system
	       -provides signal connection to network
	       -works in layer 1
-hub -function as concentrator or repeater in that & does not care where signal comes from or where 
      its going
     -takes electrical signal arrives on port & replicates that signal out all its other ports
     -may have few or many ports & not very common in modern networks
     -works in layer 1 
-switch -utilises application specific integrated circuit chip & basic chip 
        -ASIC chip has specific programming allows switch to learn when device is on network & port 	
         is connected to via devices layer 2 MAC address
        -works in layer 2
	-may have few & many ports & smarter than hub & can be highly complex & programmable 
	-communicate with only local network devices 
-whap -wireless access point & specific type of network bridge that connect bridge 
      -connects connects wireless network segments with wired network segments 
      -common type of web bridges & 802.11 wireless network segment with 802.3 ethernet network 
       segment
      -just like switch wire access point only communicate with local network devices 
-multiplayer switch (MLS) -provides normal layer 2 network switching services & also provide layer 3
			  or higher OSI model services 
			 -most common multi layer switch is layer 3 switch
			 -utilises ASIC chip & programmed to handle mounting function
			 -allows devices communicate & pass data to non-local network devices
			 -highly programmable & complex network
			 -may have few or lot of ports & not common in small office or home office
			 -very expensive
-router -most common device connecting different network together
	-using layer 3 logical network information
	-uses software programming for decision making as compared to switches use of ASIC chip 
	-keep track of different network 
	-communicate with both local & non-local network devices
	-have fewer ports than switch
-security devices -firewall -placed on routers or hosts (software based or can be its own device)
			   -functions at various layers of OSI model (layer 2,3,4,7)
			   -block packets from entering or leaving network 
			   -stateless inspection (examines every packet that enters or leave 
			    against set of rules)
			   -once packet matches rule, enforced in specified action is taken
			   -stateful inspection (only examines state of connection b/w networks
			   -made from internal network to external network
			   -providing internal network from outside 
		  -Intrusion detection system -IDS & passive system to identify when network or 
					     attack against network is occurring  
					    -usually designed to inform network administrator when 
					     breach or attack has occurred & uses log files, text 
					     messages, through email notification 
					    -cannot stop breach or breach on its own 
					    -receives copy of all traffic & evaluate against 
					     set of standards (may be signature based or anomaly 
					     based or policy based)
						    -signature based -malware/attack signature
						    -anomaly based
						    -policy based
		  -Intrusion prevention system -IPS active system designed to breach or attack success in damaging network
		 -all traffic needs to flow through IPS to work 
		 -best placement in network segment is between router & firewall
		 -					     


Laptop buying guide:
-gaming laptop -best cooling, best processors, better upgradability
-RTX 4050 & RTX 3060 will handle 1080p, 1440p
-wattage of GPU is also important (4060, 90W is faster 4070, 50W)
-many recent CPUs can even handle AAA games
-batter life of Mac is fantastic & M chips have single core performance (unmatched by windows)
-AMD mobile naming is bad, risen AI 300 series is good with efficiency
-zen architecture number is important 764OU (7 --> portfolio model year, 6 --> market segment, 4 -->  
architecture, O --> feature isolation, U --> form factor/TDP)
-intel ultra 100 series CPU offer little less performance 
-snap dragon X chip offers unmatched battery life with performance comparable to AMD
-chrome books serves really well if everything done with linux apps & web browser & cheap
-4GB, 8GB may slow down, 16 GB ram is recommended
-SODIMM & CAMM modules are good for upgrading laptop
-external SSDs always help
-display (mini LED, OLED, TN, IPS) avoid TN & IPS is allrounders
-16:9, 16:10, 3:2 size
-HD = 33" (1280x720), FHD = 22" (1920x1080), QHD = 17" (2560x1440), 4K = 11" (4096x2750)


Access everything from your web browser:
-RDP into windows & SSH into linux
-guacamole
-


Web crawler:
-python package scrapy (web scraping/web crawling framework)
-


Operating systems:
-OS = interface between programmer & computer
-high level statement (a = b + c) --> converts into micro instructions -loading value of b into R1 	
							  register
							 -loading value of b into R2 register
							 -add R1 & R2
							 -store value into a 
-ALU (arithmetic logic unit) -functional unit like arithmetic function
                             -performs arithmetic & operational logic
     		            -consists of adders & subtracters
-memory -primary -main, volatile, faster, less in size, RAM, ROM, caches, registers
        -secondary -auxiliary, hard-disk, pen drive, non-volatile, less expensive, more size
		   -part of input & output devices
-VAN (vm neumann architecture)
		-test.c --> complier --> .exe (I1,I2,I3..In) --> passed to OS --> main memory --> 
                  loads executable 
		 into main memory --> CPU 
		-test.c & test.exe file --x--> CPU (hardisks are slow & can't fetch data from hard 
		 disk)
		-instruction of program load sequentially one after another
-os -converts high level language --> machine language (0s & 1s) (understandable by hardware)
-kernel (core/nucleus) -process manager, file manager, memory manager, device manager, protection 
		        manager
-resource manager -allocation & deallocation management 
		 -software -file, monitor, semaphore
		 -hardware -CPU, monitor, I/O devices
-control program -controls all operations of computer
-set of utility to simplify application development
	-take charge of hardware
	-create env/platform that force on dev in HL mode
	-OS will perform work at back of stage
-efficiency (utilisation of resources), reliability, robustness (strong enough to bear errors), scalability (ability to evolve), portability (ability to work across diff platforms)
-missile control, satellite control, neural system, air traffic control (strict deadlines & RTOS)
-1st generation -no OS
-2nd generation -magnetic tapes (no OS)
-3rd generation -magnetic disk (hard disk & floppy) -uni programmed 
						  -multi programmed
-uni programmed -ability of OS to hold single program in memory (1 CPU at motherboard)
	        -hold only single program from main memory
	        -moved to IO devices --> CPU becomes IDLE (No, we want efficient CPU utilisation)
	        -throughput less --> efficiency less
	        -throughput = no of program executed per unit time
	        -Ex. MS-DOS (disk operating system) (command based & no GUI)
	        -maximum use of CPU
-multiple programming -OS can hold multi ready to run program
	              -only 1 program can run at time in any case
	              -maximum efficiency, throughput, impression of multiplexing of CPU among
		       different programs	
	-pre-emptive -forceful deallocation from CPU
	-non-preemptive -nobody force program to leave CPU
-multitasking OS -program (unix) = task (windows)
-systematic view of multiprogramming -secondary storage has programs P1,P2,P3 
				    -various jobs are loaded in OS (job1 for IO services, job2 for 
				     execution, job3 & job4 are waiting to receive) 
				    -CPU utilisation increase & idleness decreases 


Paying for cloud storage:
-expensive cloud storage provider
-network attached storage (NAS) 
-ARM based processor crushes CPU & can be powered up by just 2 amp & 12 volt input
-petascale 1u & 2u storage server
-CM3588 & NAS kit (half gig ethernet, 3 HDMI ports 1 in & 2 out, USB 3, USB-C, micro slot, 4 full sized M2 PCLE gen 3 slot)
-inexpensive adapters
-4TB MP34 drivers
-NAS can be shared with anyone else on your network
-3-2-1 rule (3 copies of data on 2 types of media with 1 of them being offsite)
-SD card --> eMMC storage
-choosing RAID 5 for balance, protection & capacity
-SMB protocol (server message block)
-Libyan friendly, WRT, ubuntu & even android


Extracting source code from any app or software:
-not easy task
-reverse engineering of compiled/native programs
-Microsoft DLLs with software like IDA Pro and you can totally see enough to reconstruct what they do
-can’t simply lift the source code wholesale without a lot of manual effort into the bargain
-But if you plan to hide secret data in your application (like access keys or secret keys): don't.
-I recommend to have some parts of the logic on the phone, but have also a backend which contains logic and authentication. Make sure there's a secure communication between them (mTLS or OAuth2 or similar) and then decompiling gives you only a part of the puzzle. The most useful part though is that any secret data can be on your backend where it's safer.
-decompiler.com
-ghidra-sre.org


Avoid mouse & trackpad (Mac):
-cmd + space -open spotlight search
-ctrl + F2 -focus on menu bar (use arrow keys to navigate)
-com + tab -switch between open applications
-cmd + ` -cycle through windows of same application
-cmd + q -quit active application
-cmd + h -hide active application
-cmd + option + h -hide all other applications except one you're using
-cmd + m -minimise current window
-cmd + option + m -minimise all windows of current application
-cmd + option + w -close all windows of current application
-cmd + w -close current window
-cmd + option + t -toggle the visibility of toolbar in finder
-cmd + f -open find window
-cmd + shift + a -open applications folder in finder
-cmd + n -open new finder window
-ctrl + up -open mission control to see all desktops & windows
-ctrl + down -see all windows of current application
-ctrl + left/ right -move between desktops 
-ctrl + cmd + f -toggle full-screen mode for current application
-F3 -open mission control
-cmd + space -open spotlight
-cmd + option + space -open spotlight in finder
-cmd + t -open new tab
-cmd + w -close current tab
-cmd + shift + t -reopen last closed tab
-cmd + l -focus address bar
-cmd + f -open find bar to search within the page
-cmd + arrow keys -scroll through page
-cmd + option + arrow keys -scroll one screen at time
-cmd + tab -cycle through open applications
-cmd + shift + tab -cycle through open applications in reverse
-cmd + option + tab -switch between windows of same application
-ctrl + c -terminate current process in terminal
-cmd + option + power button -put your Mac asleep
-cmd + control + power button -force restart your Mac (use only when necessary)
-cmd + option + esc -force quit application
-cmd + option + d -show or hide dock
-cmd + shift + 4 -take screenshot of selected area
-cmd + shift + 5 -open screenshot utility
-cmd + delete -move selected item to trash
-cmd + shift + delete -empty trash
-cmd + option + delete -immediately delete selected item without moving it to trash
-cmd + I -get information about selected item
-cmd + shift + n -create new folder
-cmd + option + v -move copied file (cut-paste equivalent)
-cmd + left arrow/right arrow -move cursor to the beginning/end of line
-cmd + up arrow/down arrow -move cursor to beginning/end of document
-option + left arrow/right arrow -move cursor word by word
-shift + arrow keys -select text character by character or line by line
-cmd + c -copy selected text
-cmd + v -paste copied text
-cmd + x -cut selected text
-cmd + z -undo last action
-cmd + shift + z -redo last action
-cmd + a -select all text or items


Building home server:
-


Server-less computing bill goes parabolic:
-avoiding server less tax
-server that scales automatically 
-all big clouds offer server-less functions
-bandwidth CPU & gigabytes hours
-getting bill explosion due to DDOS attack
-every developer should know how their pricing scale
-every developer should have self hosted backup plan
-ideally you need to containerised that using docker to launch anywhere


Android phone remote control:
-never download untrusted softwares
-even standard looking cable can be malicious (OMG cable allows to create keystrokes to phone)
-


Monitoring home server:
-wife's shows isn't on Plex but has previously aired, which usually means my VPN has dropped out
-pushovers
-Nagios
-NEMS if you're running it on a Raspberry Pi - works really well for small/cheap setups.
-only use slack for various monitoring/logs webhooks so would be easy to switch over if there's any benefit
-discord webhook
-I set up a few basics notifications (like disk space low
-monitoring is important in web server it becomes important
-search engines down rank your search appearances if your site reliability is inconsistent
-commands -top
	  -vmstat
	  -free 
	  -iostat
	  -netstat
	  -iotop
	  -htop
	  -atop
	  -nmon
	  -iftop
-tools -hetrix
       -Netdata
       -pttg
       -Prtg
-ssh
-zpool status -v
-htop
-df -h
-Observium is pretty cool if you want to setup an snmp server, Not the best for mobile alerts but can give you some info on what's going on with your home servers
-Librenms with nagios plugins
-Zabbix
- front idrac lcd when it turns orange.
-servers enough to know they either work or don't. I don't see the need for a mobile monitoring setup to fill an OCD void or flex to others
-home assistant + mqtt for all kinds of stuff. I have alerts setup for when services go down, VPN goes down, any VM disk usage goes about 95%, etc. The nice part of using a system like this is that everything is logged and it's completely customizable. You do need to be a little savvy though.
-OMV 6 dashboard. If anything is running slow or looks off there I'll ssh in and check htop. Used netdata for a while but that used a decent amount of resources
-TrueNAS has native telegram notifications
pushover but also recently found gotify. It's an open source and self hosted solution that I've found works just as well. Netdata has gotify integration built in too. I also use it for notifications from uptime-kuma which other comments have mentioned.
-



Hak5 usb rubber ducky coast 70$, but actually, u can make a one at ur home for less than 5$. Like that, u can make pretty much good stuff at ur home, and + point is that most of the source codes and circuit diagrams are freely open on the internet

P4wnP1 ALOA with LED, Pwnagotchi, Pi Zero/Zero 2 with Kali, Raspberry Pi Pico bad USB, Attiny85 bad USB, ESP32 marauder, Nethunter on old phone

Flipper zero

Pwnagotchi

Bashbunny

USB rubber ducky

OMG cable

RPI all the way! It is very useful. If OP does decide to quit hacking for any reason, an RPi can still be used for home automation or a server etc

port forwarding does open your network to vulnerabilities, so it’s important to have a secure web app

However, I use tools like Ngrok instead of port forwarding


double compile" remotely from his flip phone.
Double compiling is real
If you're writing LaTeX. Sometimes you even need to triple compile if you're using long tables
Not exactly -- you might have to run the compiler multiple times on the same full document to resolve bibliography/references and other related things.
twice is enough, but it depends on the number of intermediary files created or changed during a compilation. The compiler generates those files for things like table of contents and footnotes.
irst pass usually replaces things like the table of contents or references with placeholders. That way the layout is the same for all passes and the second pass replaces those placeholder values with the required content.
it is possible that the layout of the documenthas changed in this second pass, making things like the table of vontents inaccurate. So you needa 3rd pass.
Triple-compiling comes up if you want to do repeatable bootstrapping of a new compiler. I have only seen this in Gentoo instructions, so... take that as you will for practical use.
Compile your new compiler, using your old one. Version (1) is going to be less optimal, because you're missing the new features, because it was compiled with an old compiler.
Compiler your new compiler, using compiler (1). This will be a nice new fancy one, compiled with all the new goodies. Version (2) is the good one.
Compile you new compiler, using compiler (2). The resulting version (3) should be bit-identical to version (2), because both were compiled with the new version. If it's not, we have some kind of issue.
Venture.
OSI model layers, IPv4, IPv7, the birth of the internet.
null hypothesis, travelling salesman, imaginary numbers, Fermet's last theorem
Bloody Monday
Shoujo-tachi wa Kouya wo Mezasu 


pre-existing partitions
Even these old machines could be completely factory restored by pressing command + r during boot if you had an internet connection, with a blank drive from apple.
type of firmware you are talking about would be OS specific. ie the firmware for OSX is not going to work with any flavour of linux.
Also distros have built in tools to identify hardware that not working, and there are guides online to get them working, but they are distro specific. ie mhwd in manjaro. lspci is also useful to identify devices without drivers, and using that information to list hardware identifiers to find a driver.
firmware for older macs is more available than newer. My recent experience is with newer (intel) macs
various WiFi chips, the macOS drivers and the Linux drivers are somewhat simila
inux drivers are specifically designed to work with the same firmware as used on macOS. Frequently, the firmware running on the chip is built using proprietary tools of the device vendor. In this case it would be quite difficult for the Linux community to generate new firmware, in cases where the device vendor was not willing to do that themselves.
Linux in it's own partition on a silicon mac is tricky
reverse engineering the API to the silicon mac GPU and giving Linux higher performance graphics than macOS on a silicon mac
pple's view actually makes more sense to me- keep everything in a disk partition, no free space outside of a partition, yet you can easily manipulate partitions in their GUI. Unfortunately, Linux installers were designed for Microsoft (or bare) systems, where it is relatively easy to create free space but not so easy to keep track of it, so extra steps on Apple for Linux
Microsoft and Apple have different views on disk partitioning 


Termux:
-everything is similar to linux
-pkg update
-pkg upgrade
-pkg install package_name
-pkg uninstall package_name
-pkg list-installed
-pkg search search_term
-pkg show package_name
-termux-help
-termux-setup-storage
-termux-open-url https://example.com
-termux-microphone-record -d 10 output.wav
-termux-camera-photo -c 0 photo.jpg
-ip addr show
-ping google.com
-wget https://example.com/file.zip
-curl -O https://example.com/file.zip
-pkg install openssh
-ssh user@host
-sshd
-df -h
-uname -a
-termux-battery-status
-termux-info
-ps
-kill process_id
-find /path/to/search -name "file_name"
-du -sh /path/to/directory
-reboots


Termux:
-Always download from F-droid
-different sessions are in termux that runs (1,2,3,4..)
-just like linux with some minute differences
-apt install termux-api
-termux-battery-status
-termux-call-logs
-android environment does not have linux FSH (file system hierarchy)
-pkg install vi
-install tbomb
-install red hawk
-install zphisher
-install seeker
-install tool-x
-install metasploit
-install proot
-minimum 2-4 GB RAM
-more than 2GB of free internal storage space
-install hashcat
-install termux-tools
-install john
-free & open source terminal emulator & allows running linux environment in android 
-termux-setup-storage
-install curl
-install git
-install nmap
-install apache2
-pkg install python -y
-pkg install python2 -y
-pkg install python3 -y
-install ruby -y
-install perl
-install wget
-pwd
-echo $0
-cat > file.txt
-stat file.txt
-hostname
-apt list
-apt search python
-apt show tsduck-python
-apt show apache2
-apt remove ...
-apt reinstall apache2
-pkg install w3m
-w3m www.google.com
-install zip
-termux-change-repo


Mapscii
Cybermap
Digitalattackmap
securitycenter
threatmap


Installing kali linux:
-rootless installation on android phone
-installing termux 
-wget -O install-nethunter-termux https://offs.ec/2MceZWr
-chmod -x install-nethunter-termux
-./install-nethunter-termux
-nh 
-nmap kali.org
-exit
-nethunter kex passwd
-nethunter kex
-installing nethunter store
-search for kex
-open terminal on kali linux
-nmap kali.org
-nh
-cd /
-ls
-cd bin
-cd ..
-ls
-nh -r
-echo $0


rtx 3090s on win 7 so 10 will probably be also supported for a long time
ryzen 5600 
pcap


Mr Robot:
-password-hacking -when computer boots into recovery mode, it allows to open notepad
	          -rename sticky keys exe & make copy of command prompt in its place
	          -when you restart, press shift 5 times & since you’re not logged in yet, cmd will 	
                   launch with system privileges
	          -command (net user [x] *) for resetting password
	          -images you can load onto USB drive that will boot up & give you password
	          -trick to change the disability program in system32 to cmd.exe using kali 
	          -booted into safe mode with command prompt & managed to escalate to root  
		   privileges & change password
	          -konboot tool for bypassing windows & mac passwords
-deep-sound -audio converter tool, hide all of files on everyone he’s hacked—as well as his own old 	
	    -WAV & FLAC audio files 
	    -real files are encrypted & password protected
	    -steganography, art of concealing information within plain sight
-proton-mail -browser-based email service built at CERN research facility (one where the World Wide 
	      web was born)
	     -end-to-end encryption
	     -no IP logging
	     -even lets you set expiration dates for your emails, they’ll self-destruct (provided 
	      recipient hasn’t made copy of them, that is)
	     -free, though there’s wait list for invitations to create account 
	     -beta versions of iOS & Android mobile apps were just announced
-raspberry-pi -tiny & inexpensive computer that helps you learn programming & build digital toys
	     -ham & fm pirate radio & build antenna make pirate radio station
	     -used to gain remote access to HVAC systems
	     -raise temperature in evil corp’s storage room where tape backups are stored
-tastic RFID thief -long-range radio frequency identification (RFID) reader that saves score on 
                    microSD card as text file & clone badge later
		  -completely portable & fits neatly into messenger bag or briefcase
-RSA secureID -two-factor authentication can definitely foil your average fraudster’s plans 
	     -25,000 actual organisations worldwide & allsafe
	     -cybersecurity firm where Elliot works, uses RSA SecureID
	     -two-factor authentication adds layer of security to company’s protected resources by 	
              requiring users to not only enter their RSA SecurID pin, ne-time password generated 	
	      within app—which lasts only 60 seconds
	     -texted him large MMS files to try to drain some of his boss’ battery
	     -snagged the phone to enter that temporary authentication code at end of password with 
	      nary second to spare
-kali linux -penetration testing & security auditing
	    -cracking Wi-Fi passwords, bypassing anti-virus software, and testing security
	     vulnerabilities on your network
-metasploit  -exploit development & delivery system that allows users to create & execute
	      exploits, typically for penetration testing
	     -reduces hackers time because they don’t have to learn new tool each time they want to 
	      run exploit
-meterpreter is just one of several hundred payloads that can be used within Metasploit
		-esides entirely in memory and writes nothing to disk, but can give an attacker control of their target’s system and parts of the network
		-open-source pen testing framework designed specifically for simulating social engineering attacks, such as phishing, spear phishing, credential harvesting
		-used SMS spoofing from within SET, a module that’s unavailable on the newer versions, but Mr. Robot tech adviser Michael Bazzell said that it’s possible for users to add that package back in within the new version
-flexiSPY -secretly installs mobile monitoring software on lover’s Android phone
	  -after gaining root privilege by using SuperSU 
	  -installs flexiSPY & monitor other people device activities with online portal
	  -doesn’t recover past data, show anything still stored on their phone’s memory or SIM
	   card
	  -hides SuperSU as part of its installation
-ignoring remote
-local backup
-law enforcement hotline
-complex auditory space
-barricade network IP DAT file
-access to root directory
-writing rootlet
-placing femtocell
-no benefit of microwaving a RAM module to "cover" your tracks
-microwave a computer part that holds non-persistent data
-RAM is volatile memory, it does not mean the memory "evaporate" instantly when the system is powered off 
-memory will slowly fade away after the interruption of power supply for few seconds to even few minutes
-use liquid nitrogen or cooling technique to slow down this "evaporation" process and recover the memory
-cool boot attack
-finding flaws (there are always flaws)
-FTP server & AS400
-DDOS attack 
-reconfigure DNS
-rebooting servers
-encrypted files
-attack coming from everywhere USA, Finland, etc
-load sharing
-root kit sitting inside server
-malicious code
-fundamentally invisible
-virus replicate itself
-putting  network backup
-infected server running
-boot sequence
-eta before runs server
-backup server
-redirect traffic & switch DNS
-hackers loves attention they don't do DDOS for no reason
-personal cell tower
-logic bomb
-systematically formatting all servers
-reverse engineering, protocol exploitation
-server side key used to verify game 
-code injection
-handler function
-100 MMS files
-hack registrar & change name server
-few spots with finer connection
-tor Browser to keep server anonymous to anyone
-onion rooting protocol
-100 terabytes pornographies
-afk (away from keyboard)
-servers down & wipe all data
-vulnerability 
-vulnerable FTP server & AS400 
-encrypted database on old server
-penetrate data security facility
-raspberry pie to climate control system
-heavily networked
-virus scan dated servers & security software that runs now windows 98
-man in middle 
-bad configuration
-getting root access to NSA servers
-prevent cross site scripting
-monitor for DDoS attacks, emergency database rollbacks, & faulty transaction handlings
-Hacks -USB stick theft 
       -SQL injection -exploits a vulnerability in website
		     -input malicious SQL code into website's input fields, allowing them to access 		
                       & manipulate website’s database
       -server sabotage -make them perform poorly during live demo
		       -exploiting vulnerabilities in network infrastructure & causing DOS like 		
			condition
       -MITM attack -intercept & alter messages sent through his own chat app
       -firmware exploit -allows them to access & control servers remotely
       -smart contract vulnerability -exploits vulnerability in smart contract code of 	
				     cryptocurrency exchange to siphon off funds 
       -phishing attack -phishing attack to gain access to person's email
		       -sends fake email to tricks person into entering his login credentials into 		
			fraudulent website
       -hardware exploit -planting device in servers that allows them to manipulate network traffic
			-device acts as a hardware backdoor, getting control over server operations
       -social engineering -manipulate the voting process for new CEO election
       -DDoS attack -bring down the dealer's site
		   -exploits weak security (using same password across sites) gain access to 
		    private accounts
       -physical penetration -rubber ducky USB device to inject a root-kit into servers
       -bluetooth exploit -gain access of personal data
       -stingray device -use stingray device to intercept & monitor FBI communications, allowing
                         them to gather information on FBI activities
       -zero-day exploit -install root-kit on servers, getting access to network without detection
       -supply chain attack -modifies firmware of device to install backdoor, allowing monitor &
                             expose their activities
       -ransomware -encrypts data with ransomware, inaccessible without decryption key
       -malware injection -injects malware into network & orchestrates physical attack by placing 
                           explosives in storage facilities & destroy paper records


Reduce file size of text or code file:
-trim excess spaces
-sed -i 's/[ \t]*$//' filename (Remove trailing spaces)
-sed '/^$/d' filename (Remove empty lines)
-gzip filename        # Compress with gzip
-bzip2 filename       # Compress with bzip2
-xz filename          # Compress with xz
-use tabs for indentation
-Reduce Encoding Size
-iconv -f utf-32 -t utf-8 filename -o outputfile (file contains text in a less efficient encoding (e.g., UTF-32), convert it to a more space-efficient encoding like UTF-8.) 
-sed '/^#/d' filename.py > output.py (Remove Comments)
-uglifyjs input.js -o output.js --comments false
-jq -c '.' input.json > output.json  # Compact JSON output
-sort filename | uniq > output.txt
-split -b 1M filename part_  # Split into 1MB chunks
-Use Optimized Formats: If your file contains images or other media, ensure they are in optimized formats like WebP for images or compressed formats for audio and video. 


Imax vs 4DX:
-ICE -immersive cinema experience goes beyond screen experience
     -270 degree view 
     -5 non-reflective LED panels on each side on auditorium
-Imax -biggest theater screens of 75-117 feeds tall
      -same experience from any corner of cinema hall
      -curved
-4DX -4 dimensional real effect
     -actually living in that movie
     -multi-sensory signature effect
     -moving seat, smoke


Hidden linux commands:
-watch
-watch -W ttyv1 (ssh into my BSD box and want a command to run in the foreground, but persist when I disconnect (usually involuntarily)
-mktemp, mkfifo
-pushd / popd
-chromium --user-data-dir="$(mktemp -d)" (spawn clean browser sessions to test stuff)
-mypassword=12335
-mypassword=12344
-xargs
-subshells
-git branch -d $(git branch | grep feature)
-ps aux | grep (application you're trying to kill')
-pgrep or killall
-pkill
-pulling PIDs out and killing those directly
-sudo dnf upgrade && flatpak update
-install -d -o user -g group -m 750 mydir
-udisksctl to have them in /media. Very useful with Wine or Dosbox-x
-!!, !:0, !a_command_typed_before... are useful
-grep, awk, sed, find, xarg, vim, rsync
-View the Linux version	uname -a
-Find the PHP version	php -i
-Search for PHP settings location	find / -name "php.ini"
-php -i | grep php.ini
-Restart Apache	/etc/init.d/apache2 restart
-Start MySQL	service mysqld start
-Check if MySQL is running	ps afux | grep -i mysql
-Stop MySQL	service mysqld stop
-Access admin rights	sudo -i
-Clean APT cache
-(check size, clean, check size)	du -sh /var/cache/apt/archives
-sudo apt-get clean
-du -sh /var/cache/apt/archives
-Remove old kernels	sudo apt-get autoremove --purge
-Uninstall unused apps	sudo apt-get remove package-name1
-Remove no longer required packages	sudo apt-get autoremove
-ac
-delv
-dir
-dos2unix
-fold
-zipcloak


CLI tools for Android development:
-sdkmanager "platform-tools" "build-tools;30.0.3" "platforms;android-30" 
-avdmanager create avd -n testDevice -k "system-images;android-30;google_apis;x86_64"
-emulator -avd testDevice
-adb devices
-adb install myapp.apk
-./gradlew build
-./gradlew assembleDebug
-./gradlew test
-fastlane deploy
-buck build :app
-proguard @myconfig.pro
-javac MyClass.java
-keytool -genkey -v -keystore my-release-key.keystore -alias alias_name -keyalg RSA -keysize 2048 -validity 10000
-./gradlew lint
-curl -O https://example.com/file.zip
-firebase init
-firebase deploy


Oh My Zsh, Powerlevel10k, Python, JavaScript scripts, Docker, host web servers

https://www.freecodecamp.org/news/command-line-for-beginners/
https://www.reddit.com/r/mac/comments/snyx5y/macos_terminal_commands/
https://ss64.com/



rebound



Building Custom PC:
-


Remotely control your android phone:
-


Hacking hardware:
-Wifi hacking -raspberry pi with Wi-Fi adapter that supports mon mode
	      -cool hacking hardware from stores like Hak5
	      -virtual-box to set up mini hacking home lab
	      -wifi pineapple (hacking into enterprise networks)
-key croc -key logger (plug & see what people are typing
-


Hacking phone:
-rooted my lg phone with a simple app i got online called towelroot, one button and that's it, then installed supersu and had root access. Today phones are way more secure
-inserting an SD card with a RAT(remote access trojan) on it and installing it onto the phone as a software update
-root access to install unsigned system updates and Wellock actually gains root access
-pre-loaded on a microSD card with unlocked bootloader


Linux distro for gaming:
-Pop OS and Drauger OS
-Nobara
-OpenSUSE
-Fedora Kinoite 38
-No matter what distro you go with, be sure to follow guides to install drivers for your respective distro
-mint
-Garuda Dragonized Gaming edition
-more FPS in Apex Legends
-nvidia is worse for linux and amd is the better option for linux 


-mc pigz htop bmon mtr iotop
-rclone ffmpeg pdftk
-Btop cowsay nano cd Lsd Tldr Pip Man
-asdf
-noti
-Byobu
-tabby
-micro
-Rsync
Tar
Lsof
Ip
Iptables
Netstat
-Smb
Fdisk
uniq
-tcpdump
-dcfldd
-foremost
-pgrep
-pkill
-Rsync
-hexdump


-/sbin/ifconfig eth0| grep 'inet addr:'
-install atool you will have standard syntax to handle all types of archives.
-als archive.format (list files in archive)
-aunpack , to extract any format.
-rm -r dir -Removes directory (and all internal directories recursively) rm -r / -Removes entire contents of hard disk...


How hackers capture network traffic:
-man in middle -when hacker place himself between victim & machine that victim wants to access
	       -Ip & MAC address
	       -sending packets back & forth
-MAC address -12 character code formatted as 6 colon separated pairs 
	     -burned in identifier on you network interface car (NIC) & cannot be changed
	     -can be spoofed (copying & using MAC address of another device on same network
	     -man in middle attack
-positioning in middle of network & all request & response will flow through hacker
-see sensitive data travelling on network
-MITM attacks are performed
-tools for MITM -ETTERCAP & 
	        -BETTERCAP -captures network traffic & include various features including ARP  
                             spoofing
		-network sniffing & even some wifi penetration testing
-email Hi-jacking -gaining access to anyone's email account
		 -watching all transaction & taking advantage of them
-wifi eavesdropping -passive way to deploy MITM attack 
		   -involves cyber hackers setting up public wifi connection with unsuspecting name
		   -gaining access to victim ASAP they connect to malicious wifi
-DNS spoofing -by altering website's address record with DNS server 
	      -victim unknowingly visits fake site & attacker will attempt to their information
	      -attempt to divert traffic to fraudulent website with malicious intent
	      -attacker disguises IP address 


Top 10 Hacking tools:
-villain -windows & linux backdoor generator & multisession handler allows users to connect with 	
	  sibling servers & share their backdoor session handy for working as team
	 -built-in auto-o payload function to assist user bypassing antivirus
	 -undetected
	 -payload generated by this tool is inherited from hoax shell
-sublister -python tool designed to enumerate subdomains of website using osint
	  -helps penetration testers & bug hunters 
	  -collecting & gathering subdomains of domains they are targeting
	  -uses many search engines like google, yahoo, bing
	  -uses net-craft, virus token, threat crowd, DNS dumpster & reverse DNS
-nuclei -fast & customisable vulnerability scanner
        -goang language based tool used to send request to multiple target
        -based on uncle templates leading to zero false positive or irrelevant results


How hacker hacks Wifi:
-most people use wifi for surfing internet
-authentication attack -temporarily removes all client from your wifi by sending false packages
		      -you get disconnected from network
		      -handshake (special packet shared between wifi router & device that
		       trying to connect)
		      -uses special wifi adapter (monitor mode & special injection)
		      -capture different types of wireless packages of wifi network in our range
		       without even connecting to them
		      -contains password hashes (using word lists containing millions of most used 	
                        password)
-choosing long & strong password
-buying wifi router with WPA3 encryption
-authentication attacks only works on WPA & WPA2 router
-Evil twin attack -capturing handshake file by simple de-authentication attack
		 -clone to your wifi network which has same name as yours
		 -sending malicious package to all clients connected to network
		 -force them to disconnect from network
		 -malicious webpage pops up & ask for wifi credential
		 -captive portal
-hackers can change our wifi password or name & see all clients connecting to wifi


Password cracking tools in kali linux:
-identifying vulnerability & strengthen security
-Hydra -used for testing security of their own system
-John the ripper -speed & ability to crack password hashes
-hash-cat -can crack wide range of password hashes using various algorithm


Clicking on malicious links:
-phishing -cyber crime & targeted by emails, telephones, text message
-acting as legitimate institution
-getting sensitive informations, backing & credit card details
-fake websites
-eye-catching offers & lucrative offers & attention grabbing statements
-sense of urgency & want victim to act fast
-unusual sensors
-spam filters


Basic kali linux commands:
-sudo apt update (system is upto date with latest security patches & updates)
-sudo apt upgrade 
-mkdir & rmdir


Script vs code vs program:
-script is a type of code that is typically interpreted rather than compiled. Scripts are usually written in scripting languages like Python, JavaScript, Bash, or Ruby.
-automate tasks, manipulate data, or run sequences of commands in environments like the terminal or web browsers.
-Usually smaller in scope, designed for specific, often repetitive tasks.
-Code" is a general term that refers to the written instructions in a programming language that a computer can execute. It’s the raw material used to create scripts, programs, and software applications.
-building blocks of scripts, programs, and software in general.
-program is a complete set of code that performs a specific task or a set of tasks when executed. It is usually compiled (converted into machine code) or interpreted, and it can range from a small utility to a large, complex application.


Why linux is safer than windows:
-user permission
-windows create an administrative account gives full access to OS (run as administrator)
-linux only allows to use home directory freely but need root password when doing any system level operation
-windows handle user permission is wrong & risky
-XE or MSI file download it & install it in windows
-linux has package manager responsible for downloading program you need from trusty sources called repositories (managed by communities) & packages takes long process to get verified & accepted
-linux is open & new distribution can be created & commercialised also (more developers & researchers find bugs & exploits sends patches almost everyday)
-makes linux safer & more secure over time
-updates are only available for system & other Microsoft software 
-security through obscurity -linux is running majority of servers running on world
			   -user base on desktop is very low
			   -malware & virus that target linux usually geared towards web servers & 
         		    network devices 


Reconnaissance tools:
-NMAP (network mapper) -open source network scanner 
		      -used to discover hosts, ports & services
		 -sends packets to host & then analysis responses to produce desired results
		 -scanning for open ports
-OSINT framework -collection of open source tools & resources
		-centralised platform & contains tools, websites & data source
		-informations includes IP address, domains, sub-domains 
-shodan.io -search engine of IOT 
	   -internet connected device & retrieve information about them
-censys.io -certificates, SSL configurations & banners
	   -identifies open services & examine SSL configuration to detect security issues
-google dork -uncover files, directories or information not for public access
-GAU (get all URLs) -extracting tools for website including subdomains & paths
		   -finding hidden pages or endpoints
-FFUF -finding potential vulnerabilities in web applications
      -effective for directory & file brute force discovery helping hackers finding hidden or 	
       forgotten endpoints


Proxy-chain  in Kali linux:
-web server saves hacker's public IP in their log file & easy get caught
-different servers from different countries gets request & sends to main server & hides public IP
-strict is uncommented


Top 5 hacking scripts:
-fluxion -tool used for network pen testing, hacking wifi
-cupp -(common user password profiler)
      -written in python for making strong word list
-cam-hacker -python script that captures victim's picture by webcam & sends to hacker
-past Jacker -method that malicious website employ to take control of your computer's clipboard 
              change its content
	     -uses mata-sploit to work & return to interactive shell
-thefatrat -used for making persistent back doors for almost all operating system


Top 10 Kali linux tools:
-kali linux is most popular for ethical hacking
-contains more than 600 tools for hacking
-Social engineering toolkit -performing hacks based on social engineering
			   -understanding human behaviour
			   -most common hacking attack
-wire shark -network security tool 
	    -used by ethical hackers to work with data set over network
	    -used to analyse packets transmitted over network
	    -captures & analyse data traffic in wifi network
	    -packets have information about source IP & destination IP, protocol used, some header
	    -packets generally have P cap extensions
-john the ripper -cracking passwords
		-performing special brute force attack
		-dictionary based attack to check password strength
		-used by cyber security expert to test password strength for many zip files & hash
-SQL map -SQl injections attack
	 -automates process of testing parameters for SQL injection
	 -detects database of its own
	 -just need to provide URL is vulnerable or not 
-air crack ng -all in one packet sniffer WPE & WPA  
	      -WPA analysing tool & hash capturing tool
	      -tool mainly used for hacking wifi
	      -supports almost all wireless interfaces
-burp suite -most widely used web application security testing tool & utilised as proxy
	    -all request from proxies browser pass & because request runs through burp suite
	    -testing vulnerabilities such as XSS SQLI & other web related issue
-net cap -network tool for working with ports & performing tasks such as port scanning, listening,
	  redirection
	 -useful for debugging & testing network demons
	 -used for perfuming TCP & UDP or unix domain sockets
	 -open remote connections & domains
-nmap -open source network scanning for reconfiguring & scanning network
      -used to find ports, hosts & services along with their versions over network
      -sends packets to host & examines responses to get intended outcomes
      -used to discover hosts direct operating system
      -scan for open ports
-NICTO -used by pen testers
       -complete web server scan o discover security vulnerabilities & related flaws
       -scan collects results by detecting default files names in secure files & app pattern
       -outdated server software & server & software MIS configurations
-metaspolit -open source tool
	   -most used penetration testing framework
	   -comes packed with lot fo exploits to exploit network or OS
	   -generally works for local network but can be used over internet using port forwarding
	   -CLI based tool


Solving hardest maze using code:
-making 40x40 gird in python pygame
-prims algorithm to generate maze
-Wilson's algorithm -randomly creates path form starting point & it keeps going until its connected   
                     to maze itself
		   -if it bumps into itself it deletes path
		   -not good for large maze & gets lost 
-random mouse algorithm 
-A* & Dijkstra
-wall follower


Backend developer:
-Node.js -its runtime that allows to run javascript on server
	-simple scripting language to run in browser
	-as web browser evolved javascript became more & more powerful
	-back then JS was impossible to run on server & most servers were written on PHP or JAVA
	-there are lot of low level implementations 
	-node can be used to handle request & read file from server file system & respond back to 	
	 client
	-REPL mode 
	-javascript works same way it does on browser as it does on node.js
	-build-in identifiers
	-events asynchronous event-driven javascript runtime
	-allows node to push intensive operations off to separate thread 
	-only very fast non-blocking operations happen on main thread
	-


Terminal:
-text-based interface used to interact with OS
-users to input commands & receive output from system
-used for executing scripts, managing files, configuring systems & running programs
-command Prompt (Windows), terminal.app (macOS), GNOME Terminal, Konsole (Linux)


Shell:
-shell is command-line interpreter that provides user interface for accessing OS services
-interprets & executes commands entered by user or from script
-bash (bourne again shell) -widely used in Linux & macOS
-zsh -extended version of bash with more features
-fish -user-friendly & interactive features
-scripting to automate tasks
-environment variables manage settings for shell & system


[sourceforge.net]
[linuxzoo.net]


Powershell:
-task automation & configuration management framework from microsoft, consisting of command-line shell & scripting language
-windows system administration, task automation, configuration management
-cmdlets -specialised .NET classes perform specific operation (Get-Process, Set-Location)
-powerful scripting language that can access .NET classes
-available on windows, macOS & linux
-pass output from 1 cmdlet as input to another, enabling complex data processing
-integrated scripting environment (ISE) -provides GUI for writing, testing & 
debugging 


NeoVIM:
-highly extensible keyboard based editor designed to optimise productivity of modern programmers
-code baed is structured with well documented APIs
-plugins ecosystem
-vimscript & lua (fast multi paradigm language)
-used on platforms like rob lox
-cd .config/
-lua -write its build-in language server protocol for code autocompletion
     -scriptable terminal emulator
     -awesome plugging
     -~/.config/nvim/init.vim & ~/.config/nvim/init.lua for customisation
     -using package manager called packer
     -LSP server for code completion
     -tree 
-language Server Protocol (LSP) defines the protocol used between an editor or IDE to talk to a language server that provides language features like auto complete, goto definition, find all references
-
LanguageClinet-neovim doesn't require rust if you are using any of these platforms:

i686-unknown-linux-musl

x86_64-unknown-linux-musl

i686-pc-windows-gnu

x86_64-pc-windows-gnu

x86_64-apple-darwin
-vim-lsp
-SpaceVim support both neovim vim8 and vim7.4.
-LanguageClient-Neovim atm. But not for any particular reason. It was the only client I knew of at the time and I wanted to try it out. Unfortunately the Ruby language server wasn't working, so I quickly lost interest.
-


How Email Works
Call of Duty: WWII
Peaky Blinders - Season 4
Liquidation


x----x----x----x----x----x----x----x----x----Usefull---x----x----x----x----x----x----x----x----x---x
nano ~/.zshrc
vim ~/.zshrc
source ~/.zshrc
export PATH="/opt/homebrew/bin:$PATH"
[Enter brew = export PATH=/opt/homebrew/bin:$PATH]
[curl -LO https://github.com/neovim/neovim/releases/download/nightly/nvim-macos-arm64.tar.gz
tar xzf nvim-macos-arm64.tar.gz]
Run xattr -c ./nvim-macos-arm64.tar.gz (to avoid "unknown developer" warning)
Extract: tar xzvf nvim-macos-arm64.tar.gz
Run ./nvim-macos-arm64/bin/nvim
https://github.com/csanadszilagyi/platformerGame/tree/master
https://github.com/ayush714/ML001-Project-Sources-Code-and-Learning-Materials/tree/main
https://blackarch.org/tools.html
https://github.com/junegunn/vim-plu
cd neovim-init.vim/convenience
./install.sh
-ifconfig
-echo $PATH
-source ~/.zshrc
-brew --version
-rm -rf pack
-cp -r ~/backup_nvim ~/.config
-which coreutil
-echo $TERM
-curl wttr.in
brew install ossp-uuid autoconf automake pkg-config libuv lz4 json-c openssl libtool cmake
git clone https://github.com/netdata/netdata.git --recursive
cd netdata/
sudo ./netdata-installer.sh --install-prefix /usr/local

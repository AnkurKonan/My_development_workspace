Machine learning:
-allows computers to take as input some data & make decision by learning from it
-learning from data and keep getting smarter
-core of every machine learning there are numbers
-everything can be seen as a formula, bits an bytes
-computer looks for patterns in order to solve the majority of the problems
-translates in some kind of function from ML program (called models)
-Requiring more powerful methods than typical handcrafted ones
-needs a lot of data to be able to work (1000s of sample sometimes millions)
-neural network model based on human brain
-every datasets is composed of sample
-each datasets need to be in a particular format or math would be difficult
-each sample is stored in the form of array value and normalised between a certain range
-everything in ML uses one or more datasets 
-features is like loopy for(8) and straight line for(1)
-ML will try to memorise the way to recognise those features and knowledge for every new input
-Functional approximation is if the model is big enough then it will able to approximate many    different function & letting it learn the function in an automatic fashion
-by trial and errors it fixes more and more and getting faster and faster
-Functions with million of parameters impossible to solve by hand for that we need millions of variable of tune
-Black box = dark with no details available
-Tree decision = top is root, where sample start fro going from top to bottom (Tree must have a split, 2 branches start from & decision is made based on features of input depending on the result and different path is taken
-decision tree continues to move input down a certain path, deciding what to do at each split
-when no splits are available anymore input is said to have reached a leaf
-decision tree will make decision based on which leaf input ended up at
-learning tree = deciding a loan amount/ doesn't require human supervision
-decision tree only good at predicting something = weak classifier = simple decision
-combing multiple trees together all performing same task = strong classifier = forest
-regression = technique used to simplify your data and its trends (when data is composed by value) = monetary data, measurement, years
-regression tries to model a function that explain data as best as possible in simple way (height of person in easy way)


Top 1% programmer in world:
-How does your source code get to a point where the CPU can understand it? How does your program allocate and de-allocate memory
-never code, concepts. Once you understand how it works, you can be unstoppable in any landscape
-concept is king
-Data structures are extremely important, understanding the efficiency of the operations you’ve 
 chosen (big O), and what ALL of the data boils down to (1s and 0s).
-super-structured datasets that relate and have rules on input/output
-bundle of software manipulating a database.
-software manipulating data
-encryption/decryption software, a credit card validation tool.
-RF communication
-top programmer can break down any problem into its smallest parts to be solved piece by piece
-compare only with your past self
-great programmer are great readers
-discipline 
-ability to turn off distractions and concentrate
-ability to think what the user would like so you are not dependent on the product manager
-Pattern of Enterprise Application Architecture
-understand the customer, I understand the business issues. The fact that I program gives me the ability to solve business issues
-Architecture - be the person who can design scalable, distributed system with enormous throughput from scratch

Languages - be the person who can design new programming languages, be the person who is an absolute expert in a specific language

Data science - be the person who can solve complex problems that involve tons of math

Application design - be the person who understands all about designing applications, like uncle bob
-Excellent intuition around data structures, algorithms, and their characteristics

You should be able to look at a function and understand how it scales, and if it has any bias for certain inputs (e.g. lists are optimal for iteration but not searching).

Wide range of programming patterns and idioms under your belt that you can pick between as appropriate

Example: you should know error handling patterns like the back of your hand: exceptions, Either types, error codes, promise rejections...

Deep knowledge of several languages from different programming paradigms - definitely at least one functional language and one systems language

Especially C++, Java/C#, JavaScript/TypeScript

High-level understanding of organizing large code bases

Isolation of concerns, effective testing, APIs + integration points

Strong platform knowledge

You shouldn't just know what your code does, but have a pretty good idea for how it works on the underlying platform (operating system, actual CPU, web browser...)
-


Artificial intelligence:
-It teaches the computer how to simulate intelligence in order to behave like human
-humans makes association to understand a topic
-Handwriting recognition = machine tries to understand the handwriting
-Speech recognition = similar, but tries to understand meaning and sentiment or sentences
-translation = machine create a bridge between 2 different languages
-spam filtering = used with emails (extendable to other domains) unwanted is filtered
-automation = reducing a task where a human is needed
-game AI
-planning


Deep learning:
-uses Artificial neutral (ANN) to make decision and lot more powerful stuff
-intensive computation
-unlimited accuracy
-requires millions of data points
-trains better on GPU
-learns features automatically
-text ----> pre-processing (token, lemma, stem, POS, NER, stop word) ----> dense embedding + hidden 
 layer --> sentiment  => positive/ negative
-image ----> (feutre extraction + classification) ----> output


Machine learning:
-quick to trains model
-accuracy plateaus
-good results with small data sets
-trains on CPU
-try different features to achieve best results
-text ----> pre-processing (token, lemma, stem, POS, NER, stop word) ----> feature extraction (one-hot, 
 count, TF-IDF) --> modelling (naive Bayes, SVM, logistic regression) -> sentiment => positive/negative
-input -------> feutre extraction -------> classification ----->  output


Browser -tor, firefox, brave
VPN -Nord VPN, tunnel bear, super VPN
Search engine -DuckduckGO, torch, Qwant


Sandbox in apps:
-without app sandbox -all user data <----> app <----> all system resources 
                     -unrestricted access
-with app sandbox -other user data & other system resources (no access)
                  -sandbox [() <-----> app <-----> ()]


Android development:
-component -activity -single screen of UI
                     -each activity completely isolated from each other
                     -different app invoke activity of other app it permitted
           -service -run in background, perform long running operations
                    -perform remote process, no user interface
           -content providers -shared set of application data 
                              -filsystem, SQLite, web
           -broadcast recovers -used for alerts, use status bar for notification
                               -no user interface
-[UI layer (UI elements ----> state holders)] ---> domain layer (optional) ---> data layer
-data layer ---application data---> [UI (view model <-----> UI elements)]
-data producing layer ---> business logic ---> screen UI state ---> UI logic ---> UI element state ---> 
 UI (views/ compose)
-UI lifecycle dependent -UI logic
                        -UI elements state
                        -UI (views/ compose)
-java runtime allows to write clean code and understandable programming language
-native or cross platform application
-don't too much ads at the beginning of an application
-put ads only after 50k or 100k downloads
-copying the description of your competitor is a good idea
-if app is working offline then no need to worry about scalability
-if app fetches the data from the server = focus on scaling
-using AWS free tier till got 500k users
-you can released your first app then add new features 
-release beta version of app
-increase traffic
-always try to learn new stuff like MVVM architect, compose
-spend some money on ads
-update your apps on monthly bases
-don't use copyright images and videos
-make sure play store account don't get suspended or terminate
-using bitting to get ads (CPM increases)
-use flat-icon
-Security  -use end-to-end encryption
	   -use strong encryption algorithm (strong enough to prevent attack by even most sophisticated 
            hackers)
	   -generate unique encryption keys for each chat
	   -don't store encryption keys on server (only be stored on users' devices)
	   -use secure authentication method
	   -keep app upto date (regularly updated with latest security patches)
-use website publicly (if you are using web view)
-making a portfolio is really important 
-marketing is important for your app (by 10000- 15000 is good enough)
-regular updates are important
-use mediation apps
-use google absence
-Data class = used to hold data
-Money: -sponsorships (partner with brands to create sponsored content) (displaying ads for brand, creating branded content, or running contests and giveaways)
	-monetisation	
	-advertisement
	-google admob
	-In-app purchases (users to purchase additional features or content within an app)
	-Affiliate marketing (promoting other products or services within their apps & earn a                      each time a user clicks on the link and makes a purchase)
	-referral marketing -CPA (cost per acquisition
			   -CPC (cost per click)
			   -crowdfunding (kick starter apps)
			   -premium and valuable services
			   -paid application
			   -physical services
-linux kernel --> native daemons/ libraries --> HAL --> android runtime --> system service --> android 
 framework (android API, privileged apps, system API, android app, device manufacturer apps)
-external storage <----- internet storage app A
                  <----- internet storage app B


App development:
-tool -vysor, android studio, source tree, unreal engine, stetho, codota, genymotion
-architecture -applications -home, contacts, camera, music, phone
              -framework -activity manager, package manager, NFC service, view system
              -runtime -zygote, core libraries, debug bridge
              -libraries -SSL, openGL, graphics, SGL
              -linux kernel -USB driver, audio driver, wifi driver, camera driver
-android studio (official IDE for android)
-java development kit (JDK) –needed for Java-based development
-android SDK –comes with android studio, contains all necessary libraries
-emulator or real device –test app on virtual or real phone
-java –older but still widely used
-kotlin –newer, google preferred language
-dart (flutter) –great for cross-platform development
-project structure -manifests/ ---> contains AndroidManifest.xml (app permissions, activities)
                   -java/ ---> Java/Kotlin source code
                   -res/ ---> UI elements (layouts, images, strings)
                   -gradle/ ---> dependency management
-testing & debugging -logcat ---> view app logs
                     -breakpoints ---> debug code line by line
                     -profiler ---> monitor CPU, memory usage
-publishing -generate signed APK ---> build ---> generate signed APK
                                 -choose key store & sign app
                                 -upload to google play console
            -optimise performance -reduce APK size using ProGuard
                                  -optimise images with WebP format
                                  -use efficient coding practices
-tools -android studio, gradle (build system), firebase (backend services), Retrofit (API calls), Room 
        database (Local storage), jetpack components (modern UI & architecture)
-adapter view ---> list, spinner, grid
-activity (fragment 1, fragment 2, fragment 3)
-earlier, going from activity A & another activity B ----> open some information ----> activity B
-fragment -interface component 1,2,3,4
          -combining several fragments in single activity
          -reuse same fragment across several activities as fragment have their own layout used across  
           many different activities
          -they make better use of larger screen space on tablets
          -support different layouts on portrait & landscape modes
          -flexible user interface across different screen sizes
          -fixed/ scrolling/ swiping tab display
          -dialog boxes purely made by using fragments as now
          -all action bar customisation with recycle view & tab modes possible with fragment


Languages:
[Html, Js, Css, Java, Kotlin, Php, Python, C, C++]


Hacking:
-rainbow Table -compares the hashed form, precomputing hashes of common passwords & storing them in 
                table
-dictionary attack -use list of common words, name, phrases
                   -reduces number of attempts & focuses on more likely password choices
-brute force attack -trying to every possible combination of characters until correct password is 
                     found, simplest & most time consuming approach
                    -modern computers crack 8-character alphanumeric password in just few hours 
-mass attack -variation of brute force where part of password is already known
             -attack focuses on unknown parts, makes faster than full brute force
-hybrid attack -combines dictionary & brute force technique
               -if password is changed, attacker 1st try variation of old password from dictionary 
                before resorting to brute force


[Dropshipping]


Startup:
-pitch deck outline
-CAC (customer acquisition cost) = tracking (google analytics)
-optimising (google optimisation)
-referral & traffic
-running test & finding out which test is responding well
-startup cancer = churn (when they don't get enough value of subscription & not fair price)
-3X or 4X your revenue year over year (just 50% increase in one 1 year is not attractive)
-slow growing company is better than dead one


Software for hacking:
-Deepsound
-ProtonMail
-Raspberry pi
-RSA secureID
-Kali linux
-John and Ripper
-Flexispy
-social-engineering-toolkit
-Metasploit and Meterpreter
-Tastic RFID Thief


Problem:
-give painkiller not vitamin
-PLR (private label right)
-bundle-hero
-Avloine


Youtube:
-use sunlight in front
-podcast microphone
-cover the floors and wall with towels
-have a rough script
-editing apps = Vita and deviancy resolve
-think like a third person
-don't copy 


Global community:
-try to join them & contribute
-have fun & explore their work
-keep learning new things & don't stop


Website:
-instamojo
-make proper landing page and link for that


Blogging:
-test and enter all relevant keyword
-most relevant result
-Google aims to provide users with the most relevant results for their queries
-Content types usually fall into one of five buckets: blog post, product, category, landing page, video
-Build an email list
-try offering free ebook, course 
-Reach out to people mentioned in your post
-Boost important posts with internal links
-relevant, high-authority pages to those pages that need boost can help improve their performance in 
 search engines
-build links
-Promote content in communities (but don't spam shit out of them)(booted & banned)
-use & make unique, distinct, and memorable images
-Share your content on Reddit 
-Refresh and republish your content
-Repurpose your content into a Twitter thread
-Run ads
-Pay a platform, & you’ll get traffic almost instantly (Quora, Twitter, or even display advertising)
-Publish original research (you’re creating opportunities for top-tier publications to link to you)
-Boost important posts with internal links ( links from one page to another within the same domain)
-high-authority pages to those pages
-Backlinks are an important Google ranking factor
-guest blogging


How TCS hire:
-handwork is important
-leave without pay
-all HRs are going to demotivate you
-they always check patience level
-package are 3.5, 7, 11 also
-job security is there in TCS
-always tell those things that is mentioned in your resume
-never copy any project
-start working on live projects right now
-network = net-worth (connect with many HRs & recruiters)
-jobs are many in industries
-if network is strong then getting job is easy
-always mention all details in resume
-communication skills are very important


Kunal Kushwaha:
-MLH Fellowship Evaluations
-make projects
-don't submit competitive programming profiles & leetcode solutions (straight rejected)
-be honest in interviews or application
-remember that interviewer wants you to succeed
-be patient
-read code of conduct carefully 
-don't spam


NFTs:
-ICO = initial coin offering
-IDO = initial dex offering
-crypto-punk
-ether rock
-nouns
-degen ape academy
-fidenza
-decertraland
-bored ape


After B-tech:
-for fang companies you need only leetcode
-degree is important in fang India (maybe not much in foreign countries)
-India Microsoft has average pay (1/3 of remote work)
-Indian startups = no need for degree part/ ask for good skills/ development skills/ good GitHub profile & have something to showcase/ make network
-remote work = skills & networking/ no discrimination/ salary 4X of fang/ work life balance/  
Company culture around world is next level/ 
-most remote jobs are full time (only some are contract based)
-under export of goods & services its 0% GST


Remote Jobs:
-DSA and CP is kind of important
-core forces (stars)
-mergify
-google summer of code
-CO
-developing product is important
-India startups are not good enough
-try to create something on your own
-GitHub profile is important
-its good to stay active in social media 
-learning in public
-engaging in communities & events & joint com...
-engaging in webinars
-you don't need hug hug following
-being introvert is not bad but don't shy
-it helps when you teach also
-never buy single course with anything try new things
-40lakh base pay is actual 13 lakh base pay
-devOps
-learn what is in demand
-build something fun, interesting & something helpful
-in 100s of no, you only need to get 1 yes
-larger companies have less impact & small companies have big impact (in contribution)
-communities (CNCF)
-git ops
-blockchain infrastructure 
-machine learning
-try to get job at product based company & not in some random bullshit service based company
-exporter
-gatekeepers in open source
-practice on hacker rank, interview bit, leet-code, code-chef, scoge, geeks-for-geeks 
-make nice GitHub profile
-neural network
-growing on twitter (massive community of programming)
-discrimination will be their 
-make blogs can be good idea
-jobs: -developer advocate
       -google summer of code mentee
       -ISL
       -organisation & internships
       -industries standard


Workstation:
-speaker
-phone
-mouse (logitech)
-keyboard (mechanical)
-M1 mac-mini (extremely fast)
-large size monitor (LG)


DevOps:
-concept, culture, collection of tools
-Operating System & linux
-network happens in cloud
-set of practices that software 
-coding to deployment to maintenance to update
-server administration -linux, unix, windows
-networking & security
-servers (web-server & apache, nginx, tomcat) (caching, databases, no sequel & sequel)
-mongodb, aws, mysql
-infrastructure in code
-ansible, puppet
-container: docker, kubernetes 
-terraform, google deployment manager
-CI/ CD (Jenkins)
-monitoring & logging
-cloud (gcp, was, asure)


Library vs framework vs module:
-library -collection of related functionality, means you are in control
         -write application --> leave boring details --> gets filled bye library 
         -collection of packages, offers set of functionality ready to use without worrying about how 
          its been written, only care about input & output
-framework -inversion of control, framework calls you, its in control
           -framework writer writes application --> leave out interesting details
           -set of libraries, along with functionalities, provides architecture design/ wire frame 
           -don't include framework, integrate into out code
-module -information details, has interface, explicitly, abstractly specifies both functionality it 
         provides & depends on (exported & imported functionality)  
        -interface has implementation or multiple implementation user of module are black box
        -smallest piece of software, set of methods & functions ready to be used somewhere
-package -collection of classes/ files of similar functionality


Protect your code on Github:
-


Process management in linux:
-foreground process -executed & initiated by user & not by system services
                    -take input from user & return output, processes running we can't directly initiate 
                     new process from same terminal
-background process -non interactive process, executed by system itself or by user & managed by users
                    -processes have unique PID/ process if assigned to them
-sleep 5
-jobs
-bg
-ps -ef | grep sleep
-fg
-nice -n 5 sleep 100
-top


Kubernetes:
-earlier it was costly to buy server & run applications in it
-1 machine you have many machines (virtual machines)
-cloud hosting platforms (AWS, azure, digital ocean)
-configuration management (ansible) (immutability) (at runtime you can not make changes) 
-provides reliability
-package manager = we don't need separate VM for every task
-managing containers
-monolithic application = front-end, back-end, database, app, networking (need to scale all parts in application to scalp & not very good design)
-micro-services = every part is running in its own container (like s1, s2, s3)
-1 app on 1 Vm (not cool for scaling)
-orchestral= helps us deploying  managing containers dynamically
	     0 downtime updates
	     self heal containers
	     cloud native
-before virtual machines in wasting
-container orchestration system
-K8S
-nodes are nothing but server
-deploying website in docker container
-brew link minikube
-minikube version
-minikube status
-minikube ip
-kubectl get pod
-kubectl get nodes
-minikube dashboard
-kubectl config view
-minkube docker-env
-docker container ls
-minikube ssh
-docker ps
-kubectl pods
-kubectl get pods
-kubectl config current-context
-kubectl get all
-kubectl get deployments
-minikube start --driver=virtualbox
-minikube start 


Kubernetes:
-kubectl create resource
-kubectl get resource
-kubectl describe resource name      
-kubectl delete resource name    
-kubectl run name --image=<image>
-kubectl get pods                                 
-kubectl describe pod name                      
-kubectl delete pod name                        
-kubectl exec -it <pod> -- <command>         
-kubectl logs <pod>                          
-kubectl port-forward <pod> <local-port>:<remote-port>  
-kubectl cp <pod>:<path> <local-path>  
-kubectl create deployment <name> --image=<image>         
-kubectl get deployments                                   
-kubectl describe deployment <name>                        
kubectl scale deployment <name> --replicas=<number>    
kubectl rollout status deployment <name>                  
kubectl rollout undo deployment/<name> 
kubectl expose pod <pod-name> --port=<port> --target-port=<target-port> --type=<type> 
kubectl get svc                                        # List all services
kubectl describe svc <name>                            # Show details of a service
kubectl delete svc <name>  
kubectl get configmaps                                 # List config maps
kubectl create configmap <name> --from-file=<file>     # Create a config map from a file
kubectl get secrets                                    # List secrets
kubectl create secret generic <name> --from-literal=<key>=<value> 
kubectl get namespaces                                 # List all namespaces
kubectl create namespace <name>                        # Create a namespace
kubectl delete namespace <name>     
kubectl get nodes                                      # List nodes
kubectl describe node <name>                           # Show details of a node
kubectl cordon <node-name>                             # Mark a node as unschedulable
kubectl drain <node-name>                              # Drain a node by evicting pods
kubectl uncordon <node-name>                           # Mark a node as schedulable
kubectl get daemonsets                                 # List daemonsets
kubectl describe daemonset <name>                      # Show details of a daemonset
kubectl get statefulsets                               # List statefulsets
kubectl describe statefulset <name>                    # Show details of a statefulset
kubectl get jobs                                       # List jobs
kubectl create job <name> --image=<image>              # Create a job
kubectl describe job <name>                            # Show details of a job
kubectl create cronjob <name> --image=<image> --schedule="<cron-schedule>" # Create a cronjob
kubectl get cronjobs                                  # List cronjobs
kubectl get pv                                         # List persistent volumes
kubectl get pvc                                        # List persistent volume claims
kubectl describe pv <name>                             # Show details of a persistent volume
kubectl describe pvc <name>                            # Show details of a persistent volume claim
kubectl get roles                                      # List roles
kubectl create role <name> --verb=<verb> --resource=<resource> # Create a role
kubectl describe role <name>                           # Show details of a role
kubectl get rolebindings                               # List rolebindings
kubectl create rolebinding <name> --role=<role-name> --user=<user-name> # Create a rolebinding
kubectl apply -f <file>                                # Apply configuration from a file
kubectl edit <resource> <name>                         # Edit a resource configuration
kubectl label <resource> <name> <label-key>=<label-value>  # Add a label to a resource
kubectl annotate <resource> <name> <annotation-key>=<annotation-value> # Add an annotation
kubectl top node                                       # Display resource usage of nodes
kubectl top pod                                        # Display resource usage of pods
kubectl config view                                    # Show kubectl config
kubectl config set-context <context-name>              # Set a context
kubectl config use-context <context-name>              # Switch context
kubectl version                                        # Get Kubernetes version info
kubectl get events                                     # List events
kubectl describe <resource> <name>                     # Show details of a resource for debugging
kubectl debug <pod> --image=<image> --attach=false     # Create debugging pod for troubleshooting
kubectl explain <resource>      


RAM vs ROM:
-RAM -temporary memory hold data & instructions (only when power supply present)
     -random access memory can be accessed & processed
     -high speed & high cost, volatile
     -store information by condenser
     -need refresh at regular intervals
     -used for registers & cache memory
     -store information in flip-flop circuit
-ROM -permanent memory holding even power is switched off
     -content in ROM can not be processed (only read)
     -booting instructions of computer
     -low speed at lesser cost than RAM
     -write information in manufacturing
     -impossible to write & by electrically write


[curl -s https://raw.githubusercontent.com/kubescape/kubescape/master/install.sh | /bin/bash]
[capitalism++]
[AuthNex]


Open source:
-update documentations & help on stack overflow
-get your PR merged
-become official contribution
-contributing is important
-enhance your resume
-non-code contributions
-documentation -features, deployment, installation guide, contributions, contributing, credits, 
                requirements


Off-campus:
-less opportunity in college & less packages (but still have chance)
-get out yourself
-focus on skill & resume
-focus on languages & DSA & sometimes CP also
-resume of only 1 page
-languages used, IDEs used
-use technical words
-hackathon, codechef, open source contribution, g-shocks, hashcode
-make repository & put it to GitHub
-code-force (1800 rating)
-linkedin
-recruiters
-referral 


[Fandom]


Computer Science:
-garbage collector = allocate & dislocate memory when object no longer reference to variable
-double = doubles amount of memory
-memoization = If function already been called it will use existing value instead of recomputing it from scratch 
-search engines
-logic board  microchips
-mathematics, graphics, networking
-linux = omnipresent in enterprise world, space agencies
-cloud computing = using someone else server (on rent)
-firmware is just like software but integrated in particular hardware & cannot be upgrade
-thread = takes CPU core & breaks it into  (JS is single threaded)
-concurrency model
-bare metals
-Icann
-node-js = server side run time based on javascript
-NPM = node package manager
-localhost = remote like server
-docker makes 
-function = block of code then takes input & performs specific operation 
-boolean data types = true false
-expression = code that produces value
-statement = when code does something
-dynamic programming = problem is broken down into many sub problem


[cloud converter]


Reverse debugging:
-program crashing problem
-tracking value of variables
-GNU debugger, Microsoft visual studio debugger, valgren debugger, radar-to debugger


Device driver:
-operating system know everything about webcam, space, which device, function of hardware device
-printer = external hardware for your computer
-device driver = CD, website of printer, background connection by wire (tells computer about external hardware system)


Run-time error:
-infinite loop
-number at alphabet


Terraform:
-modeling cloud infrastructure
-AWS account


Cryptography:
-hash = chop & mix (md5) (argon2)
-salting
-HMAC = hash-based message authentication code
-encryption
-key-pairs
-signing


Placement:
-comparison is key to self destruction and don't take pressure
-use different resume for different companies (follow according to job description)
-consistency
-never target only one company
-no one is 100% ready for an interview
-keep your eyes and ears open in off-campus and on-campus placement
-don't love a company just focus on money, knowledge, and connection
-make friends and network
-find patterns
-focus on coding questions and not on those mcg, descriptive question
-interviewer is not to reject you (be like big brother explaining to his little brother)
-show that you are interested in that company
-no place for demotivation (just wait for that one good day to win)
-project = never ever copy the project
-communication skills is highly important
-use phone and recording for practice


SEO:
-search engine optimisation
-own, manage, monetise, or promote online content
-easier for search engines to crawl, index, and understand your content
-small modifications = big difference
-If your site's robots.txt file disallows crawling of these assets, it directly harms how well our algorithms render and index your content
-Create unique, accurate page titles
-avoid long titles


Machine Learning algorithms used:
-Logistic Regression 
-Naive Bayes 
-Support Vector Machine (Linear) 
-K-Nearest Neighbours 
-Decision Tree 
-Random Forest 
-XGBoost 
-Artificial Neural Network with 1 Hidden layer 


Algorithm:
-Secret Message (has so much possibility)
-Page rank = tells importance of website
	     if 1 page is link to all page then that page is important
	     problem is someone can inflate page artificially
	     linked to more important pages
	     Random suffer model (how many times does user visit page)
	     Damping factor 
-Bloom filter = data structure that contains array of bits
		each bit can turned on & off
		pass book name in hash function & check if that bit is on & off
		you can use multiple hash functions (3 functions same input, 3 different output) check if all 3 bits are turned on 
-Dijkstra's Algorithm = update estimate
			choose next vertex -chose shortest time taken path
			width of algorithm should be non negative
-Elo rating = player's skills & winning in every match
	      more you lose or win your rating goes up and down
-Minimax = general purpose in game
	   optimal play = ensuring best outcome even in worst case scenario
	   terminal state = state when game is over
-Hamming code = data corrects itself
		we need extra information in data we correct -parity bit = counts no of 1
		we will use 3 p.bits 
		with just little bit of extra info = make something memory efficient
-Dekker Algorithm = avoid race conditions
		    game tree
		    some games can go long & take many moves & have many choices
		    can take so much processing power
		    giving program signal light
		    make sure that at one time only one region can be access (critical section)
-Randomness & Kolmogorov Complexity = patternless
				       only problem it is un-computed
				       how much information it takes to represent piece of data
-Computer built like dominos = chain reaction
-simple logic gates = small electronic units
-Elevators
-Halting
-Three pass protocol = 2 locks in box of message (still has vulnerability) (man-in-middle attack)
-how fast computer can be = bits/sec
-Advanced Encryption Standard 
				    

Data science:
-learn SQL
-you just need to fast & correct
-solving real company problems using data
-data product
-data recommendations
-writing model
-data visualisation
-leaving our footprint in digital world
-conditional probabilities
-Bayes theorem
-binomial distribution
-normal distribution
-descriptive statistics
-law of large numbers
-central limit theorem
-linear regression
-success metrics & tracking metrics


Software:
-instruction + data structures + documentation
-collections of various programs
-Generic products & customised products
-Model = start to end to make software
-umbrella activity = making anything before deadline
-Waterfall model = not suitable for large products/ not wage requirement/ only ready at end/ only for small projects/
-Incremental Model = dividing parts according to functionality/ initially less engineers/ easy false detecting/ more cost/ easy repair/ fast delivery/ 
-RAD (Rapid Application Development) model = diving in teams & simultaneous development/ high    cost/
-Spiral model = 1st, 2nd, 3rd iterations/ flexible/ large project/ time consuming/ never ending till software is made/ 
-Agile methodology = basic prototype/ involvement of iterative incremental delivery/ 
-Scrum = scrum master (task listing & giving to developer team)/ customer/ stakeholder/ product owner/ priority wise tasks/ scrum meeting/ everyday for 15 min/ 
-Requirement = 2 meaning = ambiguous/ SRH document creating & maintaining/ no unnecessary requirement/ grammatically correct/ feasible (not dangerous)/ 
-Activities in Requirement Engineering 
-SRS requirement specification = meeting/ document (software requirement specifications)/ IEE /involve with customer/ cannot be automate/ requirement change with time/ highly quality means less cost/ SRS should be easy to understand/ consistency (no clash between requirements)/ 
-Line of code (LOC) = estimating size of code/ no comments counted/ 
-Software-testing = unhiding all bugs & errors in software/ user experience should be good/ independent tester should always test software/ 
-unit tester = when particular module is ready/ driver/ stub/ testing 1 model at time/ identifies problems at starting/ cost can be saved in future/ cannot detect integrity/ can be time consuming/ 
-validation testing


ELO:
-R' = R + K x (S - E)
-R = current rating
-K = K-factor (determines how fast ratings change, typically 10, 20, 40 based on skill level)
-S = score from game -win = 1, draw = 0.5, loss = 0
-E = Expected score (probability of winning)
-E = 1 / 1 + 10 ^ ((Ro - R)/ 400)
-draws -both players ratings move slightly based on expectations
-400-point difference means stronger player is 90% likely to win


Big data:
-volume = amount of data generated every second
-velocity = data is moving fast & on time
-80% data is unstructured
-veracity = trust worthiness of data
-value generator from Data
-giant hardware]


Cryptography:
-internet is very unsafe place & dangerous place
-only authorised people can access (confidential)
-protect at rest & protect at motion
-CIA Triad
-message need to be integrity
-OSI model security architecture = basic security services & architecture identifications/ guidelines & standard to communicate with other computer/ 
Interact with other layers/ different services/ prevention & recovery from hack/ 
-security services = enhancing service/ authorised user/ denied of message handling
-we different security mechanism
-security audit = tells acceptable activity or suspicious activity to attack/
-routing control = sending message with different & multiple routes
-passive attacker = doesn't modify anything
-eavesdropping = listen & reads sensitive details
-active attacker = keeps specific communication packet to himself & use them to show that he is authorised users/ pretends to be authorised user/ 


Software engineer things to keep in mind:
-you have to raise your own voice (many times people take your credit)
-don't be too nice
-find write balance between "yes" or "no"
-be specialised in at-least 1 thing & keep exploring different things
-no shortcut to be 10x developer
-blocking your time
-keep on learning & never stop
-interact with different people
-problem arrive after 10-15 years
-you have to learn new things every 2-3 years
-your skillset should be your friend (so that you can do transition)
-service & product company
-never show fake experience
-criminal record check, PF going from multiple places
-don't work that hard work (people will give you more & more work) (if you are young then work hard)
-never quit & then ask for new job
-always know what going on in market


[geeksforgeeks]
[filmzilla]


Making money as student:
-don't worry about money but 1st focus on skills 
-just start YouTube channel you don't have to be perfect
-big companies in your background is very good for your upcoming life
-be active in community
-breaks are very important in life
-you don't owe anyone anything if you are doing it for free
-if you work hard, if you network with right people, it you spend your time & utilise it wisely that 
 there is no reason not to get successful


Discrimination of career:
-There are many companies that only hire IITians, some with branch, no degree, gap year
-4 step process -identify discrimination & explore & keep applying 
		-ignore & move on because discrimination is everywhere in life
		-go global 
		-have right guidance from starting
		-more desperate you are for early success more vulnerable you are to get misguided
		-believe in yourself & stop asking for other's opinion 
		-hard work is required 
		-try to be in global community


[Struggle is different & hustle is different]


Software engineer for Non-CS:
-90% college don't teach you about placements
-don't give excuse of any unfair advantage
-don't think about those companies who only hire CS & IT
-show your skills & profile & resume 
-prove them that you are worth it
-Try to get rid freshers tag in corporate world as soon as possible
-start with small companies or startups


[anything can happen in software engineer always focus on your skills & everything else is noise]
[ever software don't know everything]
[always check activity of profile in linked-in & mostly recruiters of google, Amazon are inactive &  
 check their connections] 
[In corporate world when you have more than 3 years of work experience then degree get neglected]
[apply through referral]


[glass-door]


Windows:
-Microsoft windows is everywhere (75% of desktop market)
-administrate it, support it, fix it, break it
-window is popular & frequent target to hack & insecure (because its popular)
-writing malware --> write that for mass
-windows 1.0, 3.5, 95, XP, Vista, 7, phone 7, 8 beta I, 7.5 (mango), 8
-windows is required in admin support perspective
-born in 1985 GUI for MS. Dos 
-window 3.0 was groundbreaking
-windows98 (improved USB support & multiple monitors)
-windows-me/millennium (terrible but with automatic update, window movie maker)
-windows 2000 (server version of same name & brought in active directory)
-windows XP (people use this OS forever)
-windows vista (no 1 liked it but windows search, windows defender, user account control)
-windows7 (only good replacement for windowsXP & good security) 
-windows8 (everyone hated & took our task bar)
-windows10 
-windows11 (gave us virtual desktop & better UI)
-windows servers -windows NT 3.1 
		-maybe in company they might be running windows 2022 in data centre
		-centrally managing user account through a little tool called active directory
		-instead of admin going to each machine (tedious, time consuming
		-rather launch doc or active director users 7 computer to create new user
		-server running active directory will handle authentication
		-server also act as centralised storage, creating shares through file & storage 	
		 service
		-creates network folder that can be accessed by anyone given permission using SMB 	
		 protocol
		-group policy = allow them to control everything about workstation in company
		-local group policy (kind of dangerous & got to be careful)
		-disable removable USB drive
		-Bad USB cannot hurt you
-task manager = shows information about about performance & other stuff
-making sure to have x84 & x84 system
-MacBooks are built with armed processors 9armed based OS)
-user knowledge & admin knowledge
-cloud = aser (Microsoft data center)


Product based & service based:
-


[knowing about company you are going to join must]


[IdeaBix]
[smart india hackathon 2020]
[Larry Ellison]
[intel 8080 emulator]


Joma Startup:
-MVP
-don't make your target market too wide or too narrow (make is correct)
-Investors care about ROI
-be unique & have some competitive advantage
-(activated my trump card/ act-2/ 


MySQL:
-SQL helps use to create, retrieve, update, delete data data from database
-database helps us to keep track of this data electronically
-Relational database = excel spreadsheet (rows & column) (concept of keys) (SQL) 
-Non-relational database = anything but a table (including key-value pairs, json file, graph data 
 structure) (NoSQL)
-DBMS (database management system) (workspace for us to write SQL statements & generally to just
 work with database) (MySQL, MicrosoftSQLserver, ORACLE, postgreSQL)
-1st install MySQl in your system
-SQL query ---> query language processor ---> DBMS engine ---> physical database
                         ^----parse + optimiser     ^----file manager + transaktion manager
-


Secret to become an successful software engineer:
-don't over engineer
-solve problems on time
-mentor others & learn from others
-understand business impact
-improve culture
-find problem & be independent
-read code & reviewing PR
-be subject matter person
-do something that is attainable & realistic & practical
-be customer obsessed


Open source platforms:
-Microsoft Open Source Program
-LFX Mentorship
-MLH Fellowship
-Google Summer of Code
-LFN Mentorship Program
-Linux Kernel Mentorship Program
-GNOME
-Outreachy
-Google Summer of Docs
-x.org/ Foundation
-Julia Season of Contributions
-Summer of Haskell
-Open Mainframe Projects
-25PullRequests
-Open Innovation Projects
-Hyperledger Mentorship Program
-Season of KDE
-DataONE
-Free Software Foundation
-Processing Foundation Fellowship
-Hacktober Fest
-Foss Asia
-Driven Data
-Kubernetes Shadow Program


Java:
-building web applications and micro-services. It provides a wide range of features, dependency 
 injection, MVC architecture, AOP, ORM (Object Relational Mapping), CRUD operations, MVC ,building  
 enterprise-level web applications, data validation, input processing, 
-vaadin -rich, interactive user interfaces
-apache Stripes -AJAX support, custom tags
-apache Wicket 
-javaServer Faces (JSF) -dynamic, data-driven web applications, provides set of reusable UI  
 components & supports AJAX, custom tags
-spark Framework -APIs
-(JDK java development kit(JRE java runtime env. Library & toolkits(JVM java virtual machine)))
-JDK -javac, jcheap, jconsole
-JVM -java class library


[Remote jobs are better than Faang Companies]
[Always clean your laptop & PC on regular basis]
[Laptops has higher processing power than notebooks]


Audruino


[VirusTotal.com]
[AlternativeTo.net]
[FileHippo.com]
[hdtodaytv.nl]
[capital trade]
[litsolutions.org]
[prmmovies]
[imfdb]
[wikipedia]


Joma:
-programming = telling set of instructions to computer what to execute
	       computer can generate bugs not because of them but because of human's code
-academic career
-resources, contacts
-MVP (minimum viable product)
-dropbox
-leveraging amazon CDN, load balancer, lambda's
-modularise using infrastructures using micro-service
-elastic scaling
-cost efficient solution
-Node js backend + react frontend
-crawler for searching best Video
-writing pipelines to funnel them in website
-more request handling by servers
-first company generally means best company
-brand themselves however they want
-pivot
-target market
-active users
-extension to make things easy
-logging every website
-duel match
-catching errors
-transition between android & IOS
-consumption smoothing (stop using this excuse to more)
-blockchain -liquidity on table
	    -liquidity provider
	    -decentralised reserved currency
	    -stability, credibility, utility 
	    -addiction in investing on different finance product
	    -getting rich on paper
	    -getting real cash by dumping fake government token on them


Monitoring your app/ website:
-server performance metrics (backend monitoring)
-tools -Prometheus + Grafana, New Relic, Datadog, AWS CloudWatch
       -CPU usage (%) ---> prevents overloading
       -memory usage (RAM) ---> avoids crashes due to high memory consumption
       -disk usage ---> ensures logs, database storage don’t fill up
       -request latency (Response Time) ---> track API response speed (should be <200ms ideally)
       -error rate (5xx, 4xx Errors) ---> Monitors failed requests
       -uptime (%) ---> should be 99.9%+ for reliability
       -throughput (requests per second - RPS) → How many requests your app handles per second
-application performance metrics (APM)
-tools -spring boot actuator, new Relic, Datadog, AppDynamics
       -application response time (latency) ---> slow APIs kill user experience
       -database query performance ---> slow DB queries impact app speed
       -thread pool utilisation ---> prevents thread starvation
       -JVM heap/GC metrics (for Java apps) ---> avoid memory leaks
       -cache hit ratio ---> ensures caching (Redis, Memcached) is effective
-frontend performance (web & mobile monitoring)
-tools -Google PageSpeed Insights, Lighthouse, Sentry
       -time to first byte (TTFB) ---> server response time should be <200ms
       -first contentful paint (FCP) ---> measures how fast content loads
       -largest contentful paint (LCP) ---> should be <2.5s for good UX
       -cumulative layout shift (CLS) ---> tracks UI stability
       -javaScript errors ---> uncaught exceptions
       -frontend load time ---> page should load <3s
-user experience & engagement
-tools -Google Analytics, Mixpanel, Hotjar
       -bounce rate (%) ---> high bounce means bad UX (should be <50%)
       -session duration ---> how long users stay
       -pages per session ---> measures engagement
       -user retention ---> % of users returning after X days
       -conversion rate ---> % of users completing an action (signup, purchase)
-security & compliance
-tools -OWASP ZAP, Snyk, Wazuh, AWS GuardDuty
       -Failed Login Attempts → Detect brute force attacks
       -Unauthorized API Access Attempts
       -DDoS Attack Monitoring (Traffic Spikes)
       -SSL/TLS Certificate Expiry
-business & financial metrics
-tools -Google Analytics, Stripe, PayPal APIs
       -revenue (MRR, ARR) ---> track financial health
       -churn rate (%) ---> customers leaving your app
       -customer acquisition cost (CAC) ---> cost to get new customer
       -lifetime value (LTV) ---> how much user is worth over time
-error tracking & logs
-tools -Sentry, Logstash + Elasticsearch + Kibana (ELK Stack)
       -exception rate ---> how often errors happen
       -crash reports ---> app crash frequency
       -slow queries ---> SQL or NoSQL slowdowns
-infrastructure monitoring (cloud & containers)
-tools -AWS CloudWatch, Kubernetes Dashboard, Prometheus
       -pod & container health (K8s, Docker)
       -network latency, storage utilisation, autoscaling metrics


Blender:
-polygon count -when work with meshes in 3D, memory usage with reference to meshes depends on number of 
                faces (or vertices) mesh contains, many useless faces (55 faces on side of mesh as flat 
                as 1 face), number of faces directly affect render time of images & animations 
               -smooth rounded meshes ---> no need infinite number of faces for smooth
-face structure -face structure -4-side (quad) vs 3-side (tri)
-lighting -ray shadows -use advanced algorithm to trace edge of any interfering objects & create 
                        perfect shadow onto receiving objects 
                       -calculation is memory-intensive & slow down render-time
          -buffer shadows -use different algorithm for similar results
                          -use bit-rate of shadow "pixels" fill in shadowing area
                          -adjust bit-rate to make shadow higher or lower quality
                          -calculation is memory-friendly
-coordinates -x, y, z axis, y = mx + b
-right handed system -thumb of right hand point towards x-axis, index finger to y-axis, middle finger 
                      to z-axis
-orthographic projections -staple of 3D visualisation
                          -describe shape of object from at least 2 (usually three) different angles 
                          -normal views used are front, side, top, though back, bottom be used
                          -OP -everything is to scale & proportional
-isometric projection -represents 3 dimensional object in 1 view rather than 3
                      -each at 120 degree angles with z-axis vertical view represented in pseudo-3D 
                       manner with measurements intact at skewed angles
-1-point perspective -use if facing object head-on & staring right at middle 
                     -imagine looking down straight set of train tracks ----> tracks appear to converge 
                      at some point on horizon (vanishing point)
-2-point perspective -corner of large department store that extends for couple blocks
                     -requires 2 vanishing points, usually to left & right draw corner of building as
                      vertical line & then extend lines toward vanishing points
                     -up-down lines still parallel & 2 sets of lines that converge
                     -4 left-right lines converge off to right & 4 in-out lines converge off to left
-3-point perspective -3 vanishing points left, right, up
                     -2-point perspective but sides of building towards distance not straight but 
                      towards vertical vanishing point
                     -vertical vanishing point will be below left & right points
                     -no longer any lines which appear parallel
                     -4 up-down lines, 4 left-right lines, 4 in-out lines all have their own vanishing 
                      points that converge 
-coordinate spaces -x-axis (red) to right, y-axis (green) to rear, z-axis (blue) upward
-menu > 3D Viewport
-view > area > split or RC > join areas (windows left or right gets erase)
-emulating Numpad
-logic buttons, script buttons, shading buttons, object buttons, edit buttons, scene buttons
-viewport -camera -location & rotation determine scene at render time
                  -activate -NUM0 key
          -lamp -light source, not be rendered
          -cube -will be rendered
          -view from different angles
-


Animation:
-softwares -2D animation (flash, TVpaint, toon boom harmony, moho)
           -background painting (painter, photoshop, painttool SAI)
           -storyboard (sketchbook, storyboard pro, photoshop)
           -3D modelling (Maya, 3DS max, blender, Zbrush)
           -3D animation (Maya, 3DS max, cinema 4D)
           -compositing (adobe after effect, adobe premier pro)
-24 frames per second usually
-12 frames per second & 6 FPS when low in budget
-story, character, humour, story telling
-voice comes 1st before animation
-12 principles of animation
-rigging character for moving arms & elbow
-there is no limitations in your story
-types -traditional animation (frame-by-frame) -hand-drawn on paper (Disney classics)
                                               -every frame drawn separately & photographed
                                               -Toon Boom Harmony, Adobe Animate
       -2D digital animation -created using vector-based software
                             -used in anime, cartoons, explainer videos
                             -Adobe Animate, OpenToonz, Synfig
       -3D Animation (CGI) -characters & objects built in 3D space
                           -used in movies (Pixar, DreamWorks), games, VFX
                           -Blender, Maya, 3ds Max
       -stop motion animation -real world objects moved slightly b/w frames
                              -used in claymation (wallace & gromit), puppet animation (coraline)
                              -Dragonframe, Stop Motion Studio
       -motion graphics -used in advertising, intros, explainer videos
                        -animated text, logos, UI elements
                        -Adobe After Effects, DaVinci Resolve, Blender
-Disney’s 12 principles -squash & stretch -adds weight & flexibility
                        -anticipation -prepares viewer for action
                        -staging -present clear movement & storytelling
                        -straight ahead & Pose-to-Pose -different animation techniques
                        -follow through & overlapping action -realistic movements
                        -slow in & slow out -natural acceleration & deceleration
                        -arcs -realistic motion follows curved paths
                        -secondary action -extra movement to make actions believable
                        -timing -dictates how fast & slow animation plays
                        -exaggeration -makes movements more expressive
                        -solid drawing -3D forms & weight awareness in 2D
                        -appeal -making characters engaging & visually interesting
-pipeline -pre-production -storyboarding sketch out key scenes
                          -character design characters & environments
                          -scriptwriting, dialogue & story beats
                          -rough animated storyboard
          -production -modelling (3D)/ rigging (2D & 3D) ---> create characters & skeletons
                      -animation ---> bring characters to life using keyframes or frame-by-frame
                      -texturing & lighting ---> add materials, textures, lighting effects
          -post-production -rendering -convert scenes into high-quality frames
                           -compositing -blend layers, add VFX, finalise visuals
                           -sound Design -add music, sound effects, voiceovers
          -advanced techniques -key-framing -Defining animation points manually
                               -inverse kinematics (IK) -makes character movement realistic
                               -motion capture -uses real-world actors for 3D animation
                               -AI-assisted animation -tools like DeepMotion, NVIDIA GANimation
                               -particle effects -used for fire, smoke, explosions (Blender, Houdini)


[GRE]
[touch lectern infral]


Accessing Dark-web safely:
-Snowden level security
-dark web has tones of legitimate uses
-you stuff is for sale in this place (passwords, emails, logins)
-perfect breeding ground for all types of illegal activity
-


Social networking hacking scene:
-university used to have public directories for students & faculty
-Harvard various houses like Adams, Lowell, Kirkland
-apache is most widely used web servers own internet
-uses indexes (can get pages that returns with links to every image used in certain directory)
-wget = network utility that comes with Mac/ linux used to download files from internet
-wget -A.jpg -r -nd(we want any file with jpeg file extension)(recursively download each file until no  
 more remaining)(don't create anymore directory)
-empty search returns all record
-emacs
				

Interview:
-take it easy
-PRP 100
-listen carefully
-do coding questions faster
-use hacker earth 1 to 1
-speak out loud


Hacking:
-sending email with dangerous links inside


VPN:
-virtual private network
-without VPN anyone can track your IP addresses & even your location
-encrypted
-highly secure 
-AWS (EC2 = sever helps us to deploy virtual machine in cloud)
-computer ---- modem ---- ISP ------- VPN server ----- website
                                                 ----- website
                                                 ----- website


CPU/GPU/DPU:
-using Vm ware we can take all server & take them all in 1 server
-we have switches, routers, firewalls & all kinds of security appliances
-encrypting & decrypting traffic, transferring lot of data, network going faster CPU is slow
-GPU is only for graphics & AI stuff
-Ethernet cable NIC
-DPU = offload stress from CPU
	server inside server
	network traffic is coming to DPU
	has its own OS
	firewall is installed in DPU
	more RAM, power efficient, high performance data


TPU:
-tensor processing unit, application specific integrated circuit (ASIC) designed to accelerate training 
 & inference of deep learning models
-custom-built for tensor computations, allows faster & more efficient deep learning operations
-optimised for AI & ML
-extremely fast matrix operations
-low power consumption
-specialised for tensor-flow
-TPUs outperform GPUs in ML tasks -processing huge amounts of tensor operations in parallel
                                  -being highly optimised for TensorFlow operations
                                  -consuming less power & provides faster computations
-TPU architecture breakdown -matrix multiply unit (MXU)
                            -core of TPU optimised for matrix multiplications
                            -performs calculations faster than traditional CPUs/GPUs
                            -unified buffer -high-speed memory for storing intermediate computations
                            -handles nonlinear activation functions (ReLU, Sigmoid, Softmax)
                            -control logic -directs data flow & ensures parallel execution
                            -process 1000s of multiplications at once
-TPU v1	---> 92 TFLOPS, inference (google search, AI)
-TPU v2	---> 180 TFLOP, 8 GB HBM, training & inference
-TPU v3	---> 420 TFLOPS, 16 GB HBM, advanced ML, BERT
-TPU v4	---> 1000+ TFLOPS, 32 GB HBM, supercomputing ML tasks


Reality of social media:
-ads goes to those who can afford them
-attention of people is most valuable thing
-ads are shown where more audience is there
-taking data of people
-make patterns with data
-data scientist
-like, share, comments are like trackers & digital footprints
-avoid accepting cookies
-third party cookie
-google advertising, Microsoft advertising, amazon advertising, Facebook audience network
-multiple times enquiry
-conspiracy theory
-they just want you to keep on using their apps
-sleep is biggest enemy
-data mining & targeted content
-don't use all social media applications 
-far right & far left people comes in lime light
-everything is interconnected


AI on software engineering impact:
-no 1 has seen future
-engineers are decreasing
-job opportunities have decreased (many companies are opening their tech centres)
-startups are increasing day by day
-need of engineers will always be there (skilled 1s)
-competition has increased very much as compared to jobs supply
-memorising DSA cannot help you (understanding things is really important)
-Zerodha has only 32 engineers team
-fundamentals should be very clear to clearing all bugs
-use your AI to do your work
-you will get job 


Remote work taxes:
-scenario-1: staying in India working for an Indian company
-they talk in basely not in CTC
-maximum 30% taxes on more than 10 lakh rupees
-contract based = 30% taxes
-full time employee = hired on paper by Indian company (remote.com, deal.com)(same tax slab)
-PF component (non-taxable) (insurance & FD)
-labour laws 
-freelancing (getting 44ADA only on 50% of your income)
-depreciation & appreciation in Rupee & dollar should be considered
-Singapore & Dubai has really low taxes
-getting your income in USDC (has both pros & cons)
-having an amazing open source profile


Open source contribution:
-competitive programming is not that important
-no discrimination
-next level work culture outside India (going globally)
-platforms are free to access, use, modify (sometimes depends upon your licenses)


Discrimination from companies:
-Not from IITs, not from CS branch, not from degree
-learn from other experiences (take guidance from strugglers)
-go global & not only in India
-take guidance from extraordinary people
-The more desperate you are for early success the more vulnerable you are for misguided
-always believe in yourself
-challenges, hardwood, struggle are different things
-some people go from 1 to another to another & then go to big tech companies
-some people get directly their desired roll


73 job offers stories:
-be heavily involved in open source
-Masters can be good option after Bachelors (not necessary you have to do that)
-take help from community
-getting people involved in cloud native projects
-designing entire production engineering curriculum for MLS fellowship
-doing lot of evens & workshops with Facebook engineers
-creating your own luck
-don't rely on college or anyone 
-always try to do challenging things & keep learning new things
-learn while contributing
-bootcamps & course
-communication as engineer is very important
-co cloud, cncf
-experience is really important
-always focus on numbers


Are remote jobs secure:
-might not be secure
-work-life balance is better
-still remote jobs are best
-both big tech companies & remote companies can be risky
-15-20 years of money made in fang companies can be made in remote companies in just 2-3 years


College placements if not sitting:
-if your college has decent placements then have backup plan
-never argue with teachers at any cost
-many college are not supporting & have toxic environment (but its ok it makes you stronger)
-resume template story
-just go with flow say yes to them (naan sir, ok sir, bilkul, bilkul, bilkul)
-what they think about you does not mean anything to you 
-what your community members & co-worker think about you matters
-you need to prove anything to anyone


Web scraping:
-data on internet is very deep (data mining)
-puppeteer (headless browser) (hatch bunch of different API method that help you parse webpage)
-finding trending products on eBay --> build dataset --> GPT4 to analyse that data (write reviews, advertisings, ad copy, automate any other task) --> 
-(amazon don't want traffic of bots & may block ip address)
-bright-data provides proxy network
-connecting to remote browser
-(access bank parameter)
-don't have to worry about proxies & drivers
-scrapping at scale 
-using chrome driver
-process of automatically extracting data from website 
-website employees javascript or requires some users interaction (clicking & hovering)
-headless browser = not required any graphical user interface that run in background (controlled by  
 programming language) (no GUI)
-stimulates human interaction with website enabling developers to scrape data 
-protected by protected software (may lead to block)
-GUI browsers are less likely to be detected by bot retention
-scraping browser (uses high level APIs (puppeteer, playwright) (capabilities for unblocking websites) (solving captchas, browsing fingerprints, selecting headers, cookies
Rendering javascripts)
-no popup window
-bypass blocks
-CDP protocol 


Content Delivery Network (CDN):
-makes your website faster


Virtual radio access network:
-Radio unit
-base band unit
-virtual central unit
-virtual distribution unit


Twitter vs linkedin:
-twitter is better for developer community
-highly customisable in twitter
-be active on both


Clean-code:
-documentation comments (used when people are consuming your API) & clarification comments
-explain functions with doc code
-use naming convention rather than always using comments
-don't comment your code just delete it
-use Guard clauses when writing heavy code like game development
-every class should have only one responsibility
-don't unnecessarily refactor your code
-there is no such thing called perfect code
-refactor small bits at time
-show code idea & do code review


-desktop environment


ReactJS:
-declarative, efficient, & flexible JavaScript library
-improve speed
-JavaScript virtual DOM is faster than the regular DOM
-develop User Interfaces (UI)


Switch:
-ethernet cables
-comes in different sizes (8 ports/ 48 ports)
-electrical signals
-its smarter than hub
-packet tracer
-ping message (ping IP address)
-stores information in CAM table (content addressable memory)
-MAC address (layer 2 address)
-physical wire & electrical signals (layer 1)
-switch frames layer 2
-wireless connection is more like hub


Process scheduling:
-process of process manager handling removal of active process form CPU & selecting another poses based 
 on specific strategy
-


Types of user interface:
-command line -DOS, SQL, allows user to interact with computers by running programs & managing files
-menu-driven -old DOS applications, interact allows users to interact with programs or system through 
              series of menus
-natural driven -beloved of science fiction
-graphic user interface -GUI, 4 main components windows, icons, menus & pointer
-forms & dialogue boxes -used in windows application (print & browser)
-touch user interface -uses touchpad touchscreen display as combines input & output device
-natural language interface, virtual reality user interface
-graphical user interface -GUIs/ WIMP (windows, icon, menu, pointer, widow, icon, mouse, pulldown menu)


Linux:
-terminal emulator uses terminal in graphical way
-automation of system (answering gmails, schedule multiple apps on different intervals of time, python 
 script)
-linux can update almost any software on machine, including patches, minor OS version updates
-never forces to update, patch, restart & everything in out control
-present in cell tower, trains, planes, ATC system, electrical grid
-GNU/linux distro run on linux kernel & all have same speed
-GUI is slower than CLI, systemd is slower than init system
-Damn small linux (faster distro, fits in 50MB disk runs on 16MB RAM)
-Bodhi linux (runs on 500MHx processor & needs 128MB RAM & 4GB disk space)
-Puppy linux (333MHz processor & 256MB RAM)
-software engineering, IT, web ----> Debian, ubuntu, red-hat, centOS
-computer engineering, system programming ----> gentoo, Slackware
-hardware engineering ----> gentoo, Slackware, linux from scratch
-shell = CLI (takes all commands as inputs --> output)
-root = username of current user
-hostname of server
-executable file
-Commands:
-ls -a
-ls -l
-ls -al
-ls -R
-open . (opens home directory)
-cd ../pictures
-mkdir foldername
-cd (change directory)
-cd .. (going back folder)
-echo $PATH
-.bash/ bash rc/ bash underscore files
-cat .zshrc
-cat /etc/zshrc
-cat ~/.zprofile
-one path: another path: existing path
-export MY_PATH = "Ankur"
-pwd


Linux on supercomputers:
-drivers for high speed interconnect, which support OS bypass & memory registration for RDMA
-porting linux to new computer is easy compared to windows
-supercomputers don't need graphics cards, GUI, complex OS (windows written in multiple languages) & 
 only depends on server, needs kernel to schedule multiprocessor threads, CLI, basic IO


Remotely access your computer from anywhere:
-set up SSH on your computer (server)
-sudo systemctl enable ssh
-sudo systemctl start ssh
-macOS, SSH is enabled by default
-system preferences --> sharing & check remote login
-ifconfig (find IP address)
-curl ifconfig.me
-windows 
-settings --> apps --> optional features & add OpenSSH server
-start-service sshd
-New-NetFirewallRule -Name sshd -DisplayName "OpenSSH Server (sshd)" -Enabled True -Direction Inbound -Protocol TCP -Action Allow -LocalPort 22 (allow SSH through windows firewall)
-ssh username@your_public_ip (login remotely using SSH)
-set up dynamic DNS (DDNS) for easier access


Algorithm trading:
-equal weight version of S&P 500 
-we some APIs
-making & using computer to make investment decisions
-python is often used as glue language to trigger code
-numpy has numpy-array which allows to store & manipulate 1 & 2 dimensional data-structure 
-backtesting in as many market as possible is good
-real API token
-sandbox API token provides random data & free
-IRS code API
-generating excel documents of executed trades
-interact with your software & potentially control someone else software
-IE x cloud API
-database of financial data & importing that into our python script
-GET request to gather data from IEX cloud API
-POST add data to database exposed by API (create only)
-PUT add & overwrites data in database exposed by API (create or replace)
-DELETE deletes all data from API
-


Trading system:
-I5 processor, 8GM ram, 500 GM hard drive, 128 GM SSD & 8 monitors
-viewing different charts 


Programming concepts:
-recursion = going deeper & deeper until reach base case
-Big O notation = calorie count of code (low calorie count --> low big O)(efficient & code's speed)
-Lambda function = secret agents of code (short, sweet & to point) (quick operation & disappear leaving  
 no traces behind)
-functional programming = no side effect, no mutation, just pure clean function
-memoization = cheat sheet of code, saves result for later use instead of recalculation over & over 
 again
-monads = black sheep of code, incredibly powerful, (box to put your code in), suddenly code becomes 
 easier to work with
-continuation passing style = passing code from 1 function to next (passing in relay)
-higher order function = take other function & turn them into something powerful
-category theory
-tail call optimisation 
-constructor = special method used to create object (when created constructor used to call & initialise 
 object)
-overloading = ability to define multiple methods (same name & different parameter)
-single responsibility principal = ever class has 1 responsibility
-open closed principals = 
-mutability = ability of object to be changed after its created
-


Risk in software engineering:
-slip disc, lower body pain, obesity, sugar, multiple deficiency can happen (just stay fit & exercise  
 daily & you will be fine)
-buying good chair is important for body posture
-getting some sunshine is important
-avoid caffeine
-professional goals are temporary but personal life is permanent
-your learning is much more important than your earning
-be open mind try to be friendly as much as you can
-best software developers are made through collaborations
-be ready to work overtime (it can happen sometimes)
-rapid changes in industry
-exploitation is very high
-negotiation is important


[There are not much good software developer out there as long as you are good 1 you will get job & paid  
 well]


Arduino:
-electricity = type of energy travel from 1 place to another
-static electricity = electricity gathers in 1 place
-current electricity = moves from 1 place to another 
-lightning also happens due to static electricity
-similar charges repel & different charges attract
-atoms = protons & electrons
-static electricity may damage electrical components
-always put components in anti-static packets
-voltage = force make electrons moves in wire (electromotive force)(EMF)
-water analogy = less pressure means less water flowing
-current flows opposite to direction of electron (I=q/t)
-current always takes least resistive path
-microprocessors = brain of any computer (CPU) + need additional peripheral (RAM & ROM)
-micro-controllers = integrated chips (tiny components & powerful enough to do many task like controlling motor pumps other appliances, sending sensor data to internet cloud, basic displays, intermediate level robotics (has inbuilt flash chips)(cheaper than microprocessor)
-Arduino board = circuit board with microcontroller on it
-hardware & software is open source
-no need of assembly language
-technical specification = atmega328 (main chip), operating voltage (5V), input voltage recommended (7-12V), input limit(6-20V), 14 digital I/O pins(PWM capable), 6 analog pins (use to connect Arduino sensors to arduino), ADC (analog to digital converter), I/O pins capable of 40mA DC current/I/O pin), DC current for 3.3V pin pf 50mA, flash memory (32kb)(0.5 used in boot loader)(1000-2000 lines of code), SRAM (2kb), clock speed (16mHz)
-Text-editor + compiler = bear minimum requirement for coding
-USB cable (specific serial port)
-LED blinking means successfully uploaded code
-breadboard = meant to make quick non-permanent connections between electronic components, covered with tiny socket holes connected in rows
-cannot connect to any pin more than 5V
-never connect 5V pin to ground pin (short)
-cannot connect + & - terminal of pin
-usb power is more than enough
-sensor signals = output 
-processed signal (depends of programming) = input
-input and output devices are fixed reference to computer
-Input devices = rotatory potentiometer, force sensing resistor, light dependent resistor, triple axis accelerator, Joystick, touch sensor, rotary encoding, ultrasonic distance sensor, temperature sensor, temperature & humidity sensor, infrared sensor
-Output devices = light emitting diode, RGB LED, buzzer, loudspeaker, seven segment display, dot matrix display, DC motor, servo motor (stopping at particular angle), stepper motor (entire rotation is dived into equal steps)(lifting heavy load)
-signal = time varying quantity(voltage or current) with some sort of information (video, audio, encode data)
-serial monitor


Routers:
-connects network
-ARP
-broadcast address


Age limit in software engineering job:
-there is not age limit but you need to be skilful
-hard-work is important
-try to start as early as possible


Fiber optic cable:
-extremely fast internet (1GB/sec)
-old copper ethernet cables were good but 
-not electrical signals but light pulses travelling through this cable (31% slower in speed) (100s of TBs per seconds)
-it can go even further & crazy far (upto 100kms or 60 miles) (without hurting signals)
-very low attenuation rate
-attenuation = any medium rate at which signal decreases
-advantage over ethernet 
-no EMI & no electromagnetic field issues
-single mode fiberoptic = core is small (5-9 microns) (more expensive) (helps in connecting buildings, campuses) (uses glass)
-multimode fiberoptic = core is big (made up of plastic or sometimes glass) (10x than single mode fibre) (50 & 62.5 microns)
-need to use repeaters to repeat light signals
-Total internal refraction (not exactly speed of light because of going into another medium)
-never ever bend your cable
-critical angle
-cladding = special layer around core to prevent light from going outside
-more expensive than ethernet
-making sure to have right connector with right cable
-duplex fibre optic cable = goes both ways (receiving & transmitting)
-SFP (small form factor pluggable)
-helps in connecting floor switches & my IDF closets & main server
-ton of bandwidth 
-FS community 


APIs:
-some api can also on run on server-less function
-most api are free & open-source & free tier
-alpaca = mix of stripe(payment processor for developer) & robin hood (easy way to trade 0 commissioned stocks)
-web-socket protocol
-real-time updates without polling server
-every receipt, invoice, documentations are stored in pdf
-words Api = generates insane amount of data & information of one word/ if application has some language feature/ 
-IGDB api = robust gaming database
-crowd sourced internet databases is an awesome thing
-


Project ideas:
-making pixelated version of artwork & having to guess what that artwork is ???
-


Elon musk way of coding:
-best part is no part & best process is no process
-simple machine are best (less errors)
-built simplest possible logic
-internal combustion engines are complicated than electric engine
-most complex takes more time
-keep on adding feature later on


Scaling API Design:
-tricky part is to have cohesive sense of platform 
-portfolios of api
-thought-works technology radar every year (great source for trending technology)
-we want to look our api to like product that customer see & not like system they are build on
-


Installing linux in system:
-install iso image file
-Rufus software or universal usb installer
-create a bootable pendrive
-unplug your pen-drive
-f12 key in dell laptop & f10 key in hp laptop
-boot from usb storage


E-commerce business:
-sales is important
-


YouTube algorithm:
-click through rates
-watch time 
-retention rate (how much video person watches in percentage)
-if video speed = 25% less (retention rate increase to 400%)
-community guidelines


Dark web:
-never ever open this (only when you are pro)
-never download files from dark web without first enabling your antivirus (malware)
-.onion
-tor & onion browser
-90% content is illegal & fake also
-never click on any pop up ads or even cross 
-impossible to ban it
-task forces
-monitor dark web
	

Programming options:
Full-Time Employment = Working as programmer for company on salaried or hourly basis
Freelancing = Offering your programming services independently to clients through freelancing platforms
Software Development = Creating & selling software products, such as mobile apps, web applications, or desktop programs
Web Development = Building websites for individuals/ businesses
Mobile App Development = Creating mobile applications for platforms like iOS or Android
Game Development = Designing & developing video games for various platforms
Web Design = Focusing on visual & user interface aspects of website development
Consulting = Providing expert advice & guidance on technical matters to individuals/ organisations
Teaching & Tutoring = Sharing your programming knowledge by offering courses, online tutorials, private tutoring
Open Source Contributions = Contributing to open-source projects & getting paid through sponsorships, donations, grants
Software Maintenance & Support = Offering ongoing maintenance, updates & technical support for software applications
Remote Work =  Working as programmer remotely for clients companies located in different geographical regions
Bug Bounties = Participating in bug bounty programs, find & report security vulnerabilities in software exchange for rewards
Algorithmic Trading = Developing trading algorithms & software for automated trading financial markets
Content Creation = Creating programming-related content, tutorials, videos, blog posts, monetising it through advertising & sponsorships
Building & Selling Digital Products = Creating & selling digital assets like themes, templates, plugins for websites software platforms
Data Analysis & Visualisation = Utilising programming skills to analyse & visualise data for businesses/ researchers
Artificial Intelligence & Machine Learning = Developing AI models, algorithms, applications for various industries
Internet of Things (IoT) = Building software solutions & applications for IoT devices & systems
Blockchain Development = Working on blockchain projects, developing smart contracts, building decentralised applications (dApps)
Software Testing = Offer your expertise in testing software for functionality, performance, security, usability issues
UX/UI Design = Combine programming skills with user experience (UX) & user interface (UI) design to create intuitive & visually appealing software
Code Review: Provide code review services to help developers improve the quality, efficiency, and maintainability of their code
Technical Writing = Create documentation, tutorials, technical articles on programming topics for software companies, blogs, publications
Project Management = Utilise your programming knowledge to manage software development projects, including planning, coordination, & resource management
Virtual Reality (VR) & Augmented Reality (AR) = Develop VR or AR applications, games, experiences for various industries
Ethical Hacking and Security Consulting = Help organisations identify vulnerabilities in their systems & provide recommendations for improving security
API Development = Design & develop APIs (Application Programming Interfaces) that allow different software applications to communicate & integrate with each other
Data Science and Analytics: Apply programming skills to analyse and extract insights from large datasets, perform predictive modelling, or build machine learning models.
E-commerce Solutions: Build custom e-commerce platforms, shopping carts, or payment gateways for businesses.
Cryptocurrency & Blockchain: Develop blockchain-based applications, smart contracts, or cryptocurrency-related software.
Automation Scripts: Create scripts or tools that automate repetitive tasks or streamline workflows for individuals or businesses.
Voice Assistants and Chatbots: Develop voice-activated applications or chatbots using natural language processing (NLP) technologies.
API Integration: Assist businesses in integrating third-party APIs into their applications or building custom APIs for their services.
Cloud Computing: Provide expertise in deploying, configuring, and managing applications and infrastructure on cloud platforms like AWS, Azure, or Google Cloud.
Software Localisation: Adapt software applications to different languages and cultures, ensuring they are culturally appropriate and function correctly in various regions.
WordPress Development: Specialise in developing custom themes, plugins, websites using WordPress content management system
Internet Marketing and SEO: Help businesses optimise their online presence, improve search engine rankings, or create effective digital marketing strategies.
Mobile Game Development: Create mobile games for platforms like iOS and Android, leveraging your programming skills and game design knowledge.
IT Support and Troubleshooting: Provide technical support, diagnose and fix software or hardware issues, or assist with system administration tasks.


Data structures & algorithm:
Sorting Algorithms:
Selection sort:
-selecting an element & putting that in right position
-swap with correct index
-can be done with both minimum & maximum element
-if n elements then there are n-1, n-2, n-3, n-4 comparison
-total comparison = 1 + 2 + 3 + .... + (n-1)
-runs good in small arrays / lists
-already in correct position & ignore it


Hash-map:
-items are not in sorted order but stores data in (key, value) pairs
-each key associated with value, can access value by using corresponding key
-internally uses hashing (similar to hashtable in Java)
-not synchronised (unlike hashtable in Java) & faster for most of cases
-allows to store null keys, but only 1 null key object & any number of null values
-duplicate elements not allowed, if insert duplicate key in HashMap -> replace element of corresponding 
 key 
-uses keys in same way as array uses index
-allows for efficient key-based retrieval, insertion & removal with average O(1) time complexity
-not ordered, order of elements added to map not preserved
-linkedHashMap is variation of HashMap that preserves insertion order
-thread-unsafe, multiple threads access same HashMap simultaneously --> lead to data inconsistencies If 
-thread safety is required, -ConCurrentHashmap can be used
-capacity (number of elements it holds), load factor (measures how full hash-map can be before its 
 resized)
-time complexity (adding, removing, extracting element) = O(1)
-space complexity (adding, removing, extracting element) = O(N)
-advantages -fast retrieval -provide constant time access to elements ---> retrieval & insertion of 
                             elements is very fast
            -efficient storage -use hashing function to map keys to indices in array ---> allows for 
                                quick lookup of values based on keys
            -flexibility -allow null keys & values, store key-value pairs of any data type
            -simple interface & easily implemented
            -handle large data sets without slowing down
-disadvantages -unordered -not ordered ---> order in which elements are added to map is not preserved
               -not thread-safe ---> if multiple threads access same hash-map simultaneously ----> 
                lead to data inconsistencies
               -if hashing function is not properly implemented & load factor is too high ---> 
                performance degrade
               -more complex than arrays/ lists
               -higher memory usage -use underlying array


Performance measures:
-initial capacity –capacity of HashMap at time of its creation 
                  -number of buckets HashMap can hold when HashMap is instantiated
                  -its 2^4=16 initially ---> hold 16 key-value pairs
-load factor –percent value of capacity after which capacity of HashMap is to be increased 
             -percentage fill of buckets after which rehashing happens 
             -its 0.75f by default -----> rehashing happens after filling 75% of capacity
-threshold –product of Load Factor & Initial Capacity
           -by default, its (16 * 0.75 = 12)
           -rehashing happens after inserting 12 key-value pairs into HashMap
-rehashing –process of doubling capacity of HashMap after reaches its threshold
           -continues to rehash by default in sequence (2^4, 2^5, 2^6, 2^7........) 


Count sort:
-non-comparison sorting algorithm
-good for smaller numbers
-frequency array is when index number = element number
-way too simple
-ideal best way is to use array


Radix sort:
-divides number into buckets & sorts it according to it
-initially its going to take largest number (more numbers of digits)
-1s ,10s, 100s place
-sorting array using count sort
-digit by digit starting from least
-faster than quick sort or merge sort (for big data)
-growing linearly with number of digit


Huffman Coding Greedy Algorithm:
-reducing size of an algorithm
-any & every digital information in this world is in form of bits (0s & 1s)
-lossless compression algorithm (data will not be lost)
-2 hash maps (encoders & decoders)
-transform sequence of some character ---> bits (encoder)
-decoder (opposite of above)
-passing main string
-making frequency map
-for every key in frequency map -> create node -> insert node in minimum heap/ priority queue
-remove 2 element from heap & combine them
-insertion & removal


[gates notes]


Springboot:
-always install long term support JDK on your system, apache maven, 
-framework to built web & enterprise application in java
-makes easy with minimal configuration to make production ready applications
-development process is simplified (set of tools)
-spring-boot is part of larger spring ecosystem (boiler plate code & more beneficial) 
-spring framework you have to do many things manually (like dependencies, configurations)
-focus on developing rather than doing all configurations 
-setting up http requests & management of databases
-use spring initialiser
-we don't build in xml file
-you can also change maven path in settings of IDE
-spring-boot annotations 
-creating controller to handle http requests 


Load balancer:
-NAS (network attached storage) or plex server 
-you need load balancer called kemp 
-few websites
-by exposing only 1 port in network you can securely access anything from anywhere
-only 1 public address 
-every website using SSL certificate
-Kemp 
-you need to be host on hypervisor (esxi or kvm)(proxmox)
-cloud flare account & domain name
-when so much of traffic happens (CPU is crashing, ram is freaking out)
-load balancer distributes traffic systematically
-running website with millions of users & immensely popular
-sending traffic out into in internet (cloud)
-putting load balance between application server & cloud internet
-
-dynamically serve according to need
-round-robin = 1 - 2 - 3 - 1 - 2 
-smart load balancer 
-random select 
-9 algorithm


Hacking tactics:
-


Machine learning:
-Mimic human brain (jaarvis, ultron, terminators)
-estimating result form previous data 
-machine learning (way to achieve AI)
-y = mx + c (m & c are given by machine)
-generalised answer ---> formula ---> future prediction
-taking sum of all errors & trying to minimise error as much as possible 
-model trained when reached point of minimised error 
-replaying algorithm with artificial neural network (deep learning)


Linear search:
-checking each element in array until you get what you want to search
-index value & I pointer
-best case O(1) constant (not depending on size of array)/ worst case O(N) (you do not find item after checking entire array)
-time & size graph is going linearly (worst case)
-straight horizontal line graph (best case)


Putting up website online using GitHub:
-using GitHub pages (free, easy to use, helps us to follow best practices)
-repository is basically like folder
-upload existing file
-you need to buy domain name from domain registrar (company that are certified to sell domain name)
-.com = cost around $10-$15/year
-namecheap
-web-server = just piece of software that communicate with browser
-by typing URL in browser we can ask web server for certain files
-web servers are just software they need computer to run
-server running on web server 
-Setting up DNS record inside our Domain registrar 
-taking IP addresses & making DNS record for each of them
-setting up subdomain name
-could take up to 12-48 hours for domain to register


Different roles as software engineering:
-SDE (software development engineering) (good knowledge in DSA & good projects can help you, competitive coding) 
-Tester (quality assure engineer) (QAE) (making products) 
-software development engineer testing (both development & testing)
-DevOps (operational team that put that feature into servers & managing server & high traffic) (operating system & computer network)
-cloud architecture (making full architecture of business of company)
-data engineer (structured & unstructured data & scrapping data 
-data analyst 


Docker:
-micro-services are the future
-when your download particular module --> you are unable to execute (because of errors) --> mismatch 
 of modules
-containerise application = makes it easy to scale
-when company releases new package --> they upgrade & depreciate lot of existing functions & module 
-key (software) --> value (version)
-containerisation is more optimised solution than virtual machine
-without docker engine there is no point having docker container
-virtual machines have their own operating system, dedicated storage & CPU
-host engine is where you install docker & docker engine handles container (like an entry point)
-docker containers are light weighted & you can easily transport them
-docker container = lunchbox (contains programs, dependencies or libraries & configurations (recipes)  
 or settings)
-program is heart of docker container
-docker --version (show docker version)
-docker info (display docker system-wide information)
-docker help (Show help)
-docker images (List all images)
-docker pull <image> (Pull an image from a registry)
-docker build -t <name> <path> (Build an image from a Dockerfile)
-docker rmi <image> (Remove an image)
-docker tag <image> <new-name> (Tag an image with a new name)
-docker ps (List running containers)
-docker ps -a (List all containers (running and stopped))
-docker run <image> (Run a container from an image)
-docker run -it <image> /bin/bash (Run a container with interactive terminal access)
-docker stop <container> (Stop a running container)
-docker start <container> (Start a stopped container)
-docker restart <container> (Restart a container)
-docker rm <container> (Remove a stopped container)
-docker exec -it <container> /bin/bash (Run commands in a running container (interactive))
-docker logs <container> (Get logs of a container)
-docker inspect <container> (Display detailed information about a container)
-docker attach <container> (Attach to a running container)
-docker port <container>  (List port mappings for a container)
-docker volume create <name>  (Create a volume)
-docker volume ls (List all volumes)
-docker volume inspect <name> (Show details about a volume)
-docker volume rm <name> (Remove a volume)
-docker network ls (List all Docker networks)
-docker network create <name> (Create a new network)
-docker network inspect <name> (Show details about a network)
-docker network connect <network> <container> (Connect a container to a network)
-docker network disconnect <network> <container> (Disconnect a container from a network)
-docker network rm <name> (Remove a network)
-docker-compose up (Build and start containers using docker-compose.yml)
-docker-compose down (Stop and remove containers, networks, images, and volumes)
-docker-compose build (Build images specified in docker-compose.yml)
-docker-compose ps (List containers managed by Docker Compose)
-docker-compose logs (View logs of Docker Compose services)
-docker-compose exec <service> <command> (Run a command in a specific service container)
-docker-compose stop (Stop all services in Docker Compose)
-docker-compose start (Start all services defined in docker-compose.yml)
-docker history <image> (Show history of an image's layers)
-docker commit <container> <new-image> (Create a new image from a container's changes)
-docker login (Login to a Docker registry (e.g., Docker Hub)
-docker logout (Logout from a Docker registry)
-docker push <image> (Push an image to a registry)
-docker pull <image> (Pull an image from a registry)
-docker search <term> (Search for images on Docker Hub)
-docker stats <container> (Display live container resource usage statistics)
-docker top <container> (Show running processes in a container)
-docker update --cpus=<amount> <container> (Update container resource limits (e.g., CPU, memory))
-docker save -o <file> <image> (Save an image to a tar file)
-docker load -i <file> (Load an image from a tar file)
-docker export <container> -o <file> (Export a container's filesystem as a tar file)
-docker import <file> (Import a container from a tar file)
-docker system prune (Remove unused data (containers, images, volumes, networks))
-docker container prune (Remove all stopped containers)
-docker image prune (Remove unused images)
-docker volume prune (Remove unused volumes)
-docker network prune (Remove unused networks)
-docker rename <old-name> <new-name> (Rename a container)
-docker pause <container> (Pause all processes in a container)
-docker unpause <container> (Unpause all processes in a container)
-docker diff <container> (Inspect changes to files or directories on a container's)
-docker events (Get real-time events from the Docker daemon)
-docker wait <container> (Block until a container stops, then print its exit code)
-docker kill <container> (Kill a container by sending a SIGKILL signal)
-docker daemon (Run the Docker daemon)
-docker service create <service> (Create a new service)
-docker service update <service> (Update an existing service)
-docker service rm <service> (Remove a service)
-docker swarm init (Initialise a new swarm)
-docker swarm join-token manager (Get a command for adding a manager node to the swarm)
-docker swarm join-token worker (Get a command for adding a worker node to the swarm)
-docker node ls (List all nodes in the swarm)
-docker node inspect <node> (Show details of a node)
-docker node promote <node> (Promote a node to manager)
-docker node demote <node> (Demote a manager node to worker)
-docker node rm <node> (Remove a node from the swarm)
-docker service ls (List all services in a swarm)
-docker service ps <service> (List tasks of a service)
-docker stack deploy -c <compose-file> <stack> (Deploy a new stack using a Docker Compose file)
-docker stack ls (List stacks) 
-docker stack ps <stack> (List tasks in a stack)
-docker stack rm <stack> (Remove a stack)
-docker stack services <stack> (List services in a stack)


[codechef]
[codeforces]
[coding-ninja]
[hackerrank]
[MLH fellowship]
[never do unpaid internship]


Product vs service based company:
-improving of products = product based company (hires specific people) (difficult interviews & more technical)
-service based company = outsourcing service based company for making their product


Things to remember in interview:
-always know what their requirements are & what they are expecting from you
-ask questions
-accept what you know & what you don't know
-always dry run your code in your mind & be confident
-there is actually no language barrier
-practicing variety of questions is important
-quality of code is important


[automation, testing, full stack web development, backend development]


Aptitude test in coding interviews:
-mathematical problems, blood relation, train problems, time & work, English, profit & loss
-math problem 
-never be overconfident
-never memorise maths
-start preparing form 3rd year
-study from videos
-give mock test (very important)
-never take any question on your ego 


Git & Github & Github desktop:
-git = type of software called version control system & tracks & changes the file which tracks changes to file (runs on command line)
-GitHub desktop = program that runs on git on your computer
-detect all code changes & can record different version of files at different point at time
-each developer can work on copy of project on their own computer (copy is stored in folder connected with git called local repository)
-developers can send their code changes to main repository stored online & get code changes made by other developer 
-collaborating with other users & discover other open source repository
-branches are 1 version of codebase & you can have multiple branches


Uploading any folder or file in GitHub or git:
-adding --> committing --> pushing


Git and GitHub:
-GitHub -hosting service for git repositories
        -service to use git
-git -tool, revision control system used to track changes in computer files, its tool to manage code & 
 file history while coordinating work remotely on those files with others
-git-hub <-----> git
         <-----> git
         <-----> git
-server (repository) <---push/pull---> repository <---commit/upload---> working copy (workstation 1)
                     <---push/pull---> repository <---commit/upload---> working copy (workstation 1)
                     <---push/pull---> repository <---commit/upload---> working copy (workstation 1)
-git pull -git pull updates your current branch w/ latest change from remote 
          -remote -[]->[]->[]->[] (master)
                        |->[]->[] (remote branch origin tabby)
          -local -[]->[]->[] (master)
                       |->[]->[] (local branch tabby)
          -local head master -when current branch is master
                             -[]->[]->[]->[] (master) (git pull origin master)
                                   |->[]->[] (tabby) (this branch is unchanged)
                             -git fetch origin 
                             -git merge origin/ master
          -local head tabby -when current branch is tabby
                            -[]->[]->[] (master) (this branch unchanged)
                                  |->[]->[] (tabby) (git pull origin tabby)
                            -git fetch origin
                            -git merge origin/tabby 
-git push -transfer your commits form your local repo to remote repo
          -local head tabby []->[]->[] (latest commit on local tabby branch)
                                     |->[] (tabby)
          -remote -[]->[]->[]
                        |->[]->[] (remote branch origin/ tabby)
          -tabby branch on local & remote are synced
          -git push -u origin tabby
          -git push <remote> <branch> (git push origin tabby) (push specified branch with all commits)
          -git push -u <remote> <branch>
          -u flag sets up association b/w your branch & remote branch explicitly 
          -git push -f <remote> <branch>
          -force push, even it it results in non-fast forward merge just ignore & push
          -git push --all <remote> (push all of your local branches)
-git merge -incorporate change into current branch
           -local head tabby -[]->[]->[]->[]\ (master)
                                   |->[]->[]->[] (tabby)
           -git merge master 
           -merge is like having 2 parents & 1 results child
           -rebase add all new changes on top of parents
-git rebase -moves branch from 1 commit to another
            -local head tabby -[]->[]->[]-[] (master)
                                           |->[]->[] (git release master)
            -git fetch origin 
            -git rebase origin/ master
            -git pull --rebase origin master
-git cherry-pick -lets your grab some commits from 1 branch & apply it into another branch
                 -local head tabby -[]->[]->[]->[] (master)
                                     |->[]->[] (tabby)
                 -git cherry-pick 2e46cd
                 -[]->[]->[]->[] (master)
                   |->[]->[]->[] (tabby)
-git log -let you view commit history
         -[]->[]->[]->[] 
         -git log printsout 
         -git log --oneline
-project folder 
-collaboration with new people
-GitHub held us to identify who, when, which about project
-CIL (helps us to manipulate file structures using commands)
-remote = working with urls
-our code that not finalised yet might contain some errors (should go on separate brach where users  
 are not affected)
-commits are pushed
-git status
-git add . 
-git commit -m "rollno modified"
-git log
-ls .git
-git remote -v
-git push origin master


-setup
-git config --global user.name “[firstname lastname]” (set name that identifiable for credit when 
 review version history)
-git config --global user.email “[valid-email]” (set email address that associated with each history 
 marker)
-git config --global color.ui auto (set automatic command line colouring for Git for easy reviewing)
-setup & init 
-git init (initialise existing directory as git repository)
-git clone [url] (retrieve entire repository from hosted location with URL)
-stage & snapshot
-git status (show modified files in working directory, staged for your next commit)
-git add [file] (add file as looks now to your next commit (stage))
-git reset [file] (unstage file while retaining changes in working directory
-git diff (diff of what is changed but not staged)
-git diff --staged (diff of what is staged but not yet committed)
-git commit -m [descriptive message] (commit your staged content as new commit snapshot)
-branch & merge (isolating work in branches, changing context & integrating changes)
-git branch (list your branches, a * will appear next to currently active branch)
-git branch [branch-name] (create new branch at current commit)
-git checkout (switch to another branch & check it out into your working directory)
-git merge [branch] (merge specified branch’s history into current one)
-git log (show all commits in current branch’s history)
-INSPECT & COMPARE
Examining logs, diffs and object information
SHARE & UPDATE
Retrieving updates from another repository and updating local repos
git log
show the commit history for the currently active branch
git log branchB..branchA
show the commits on branchA that are not on branchB
git log --follow [file]
show the commits that changed file, even across renames
git diff branchB...branchA
show the diff of what is in branchA that is not in branchB
git show [SHA]
show any object in Git in human-readable format
git remote add [alias] [url]
add a git URL as an alias
git fetch [alias]
fetch down all the branches from that Git remote
git merge [alias]/[branch]
merge a remote branch into your current branch to bring it up to date
git push [alias] [branch]
Transmit local branch commits to the remote repository branch
git pull
fetch and merge any commits from the tracking remote branch
TRACKING PATH CHANGES
Versioning file removes and path changes
REWRITE HISTORY
Rewriting branches, updating commits and clearing history
TEMPORARY COMMITS
Temporarily store modified, tracked files in order to change branches
git rebase [branch]
apply any commits of current branch ahead of specified one
git reset --hard [commit]
clear staging area, rewrite working tree from specified commit
git rm [file]
delete the file from project and stage the removal for commit
git mv [existing-path] [new-path]
change an existing file path and stage the move
git log --stat -M
show all commit logs with indication of any paths that moved
git stash
Save modified and staged changes
git stash list
list stack-order of stashed file changes
git stash pop
write working from top of stash stack
git stash drop
discard the changes from top of stash stack


Backend developer:
-node Js = runtime that allows us to run javascript on server
-most servers are written on java & php
-when request is received we can use node to handle that request (listing URL that points to your 
 server)
-lots of low level implementations
-nvm package for Mac & linux
-REPL (read of owl print loop)
-ctrl + c (to stop terminal)
-allow node to push intensive operation to separate thread (very fast non-blocking operations 
 happens)
-file system = file system module called fs (read, write, delete files)(blocking & non-blocking)
-promises are asynchronies & non-blocking
-module = javascript file that executes its code node & has bunch of built-in module like fs
-npm = node package manager
-express = web application framework & most popular 3rd party node modules
-never touch node module
-app engine of google


Web-sockets:
-building 2 way connecting between client & server
-multiplayer game & leaderboard is constantly changing
-how to broadcast update -refreshing browser window every 2 seconds
			-using interval takes data every few seconds to pull server for new data
-TCP/IP 
-bidirectional connection (connection stays open until 1 party drops off) (TCP resources will be 
 unallocated)
-full duplex connection
-webRTC
-webTransport


How you-tubers update their videos automatically:
-API (2 pieces of software talk to each other)
-REST (representational state transfer) (restful apis are stateless) (clients & server don't know 
 anything about each other internal state) (simply passes messages back & forth)
-get request = accessing data but not modifying it
-post request = making some new data on server 
-YouTube has API explorer (we can look at raw HTTP messages)
-URL = resource or entity & verb defines what you want to do do with that
-header = contains additional metadata about request & also about authorisation
-status code = tells what happened to request (200 -> good, 400 -> something wrong, 500 -> server 
 failed)
-body = actual content that server sending back to client
-cloud function = making calls  & with nodes runtime
-SDK simplifies making call to API 


Firebase:
-backend-as-a-service (Baas)
-SDKs are highly optimised
-need nodes installed in your system
-firebase is just extension for google cloud platform (helps to connect with backend cloud infrastructure)
-app can be for IOS, android or javascript that share same database & backend server
-firebase CLI (connecting command line to cloud)
-firebase hosting = web application will be deployed (storage bucket available on internet)(making app more fast around world)
-


Recursion:
-


Being up to date about software engineer:
-make learning part of your job
-follow on twitters
-attend events


How CPU works:
-programming language code --> executed as machine code in cpu 
-CPU (carefully crafted piece of metals & silicons contains billion of tiny transistors)
-modern chips contains billions of transistors (that can be flipped billions of times per second)
-state of CPU synchronised by oscillator known as clock generator
-gamers sometimes overclock their CPU to gain more performance at cost of high temperature & low life 
 expectancy
-connecting with RAM (instruction cycle) 
-fetch phase = set of software program store in RAM & CPU has registers temporarily store address & 
 memory to interact with
-decode phase = control units parses actual bits in instruction (opt code contains instruction (add/
 subtract) & operand is address in memory to perform that operation on)
-execute stage = takes decoded information passes it as electrical signals to relevant parts of CPU
-ALU (arithmetic logic unit can perform maths & store result in RAM to change state of the program
-Cycle is repeated billions of time
-modern chips utilises multiple CPU crore to run multiple computations in parallel
-apple machines are beating intel machines
-apple silicon chip is collection of many chips (system on chip) (faster & energy efficient)
-CPU, GPU, IO engine, ML controller are all co-located 
-Intel machine = CPU as single chip & memory is located somewhere else on motherboard (more time 
 consuming & more energy needed)
-c & c++, javascript, mobile apps, unity = M1 cheap works best
-.net apps = Pc with windows


Fancy Programming Words:
-idempotent = operation when applied multiplied multiplied many times produces same result (get, put, delete always implemented in idempotent) (For example payment system)
-ephemeral = last for specific time (RAM is ephemeral) & (hard dish is persistent memory can be retrieve later) (used in cloud computing)(instead of persistent servers we can have ephemeral servers)(ephemeral IP address = address reassigned after server shuts down)
-anonymous = global group of hackevist fight against censorship (defines functions don't have name & functions defined as argument)
-predicate = function that return single boolean value (true & false)
-memoization = cache return value of function 
-abstraction = process of hiding implementation details from end user
-serialisation = java does not understand php code but we can take code from either language & serialise it formate that both can understand (taking data --> converting into more generic formate understood by other program)


Roadmap for software engineering:
-java -> DSA -> levelling up (300 questions) -> participate in leet-code contest every Sunday 8) 
-> sorting algorithm -> DP & graphs -> development (minimum 3 projects) 
-hackathon, competitions, workshop
-profile, LinkedIn, resume
-post on liked after 10-15 days milestone
-contests are important
-mock interviews are important
-learn to code in docs also
-speak in English & speak little loud


File system in linux:
-hierarchy standard 
-bin directory = contains binaries or executable essential for entire operating system
-Sbin directory = contains system binaries only executed by root user
-many of these binaries shares common libraries stored in lib directory
-/usr with its own bin & sbin directories (binaries or applications are non essential to operating  
 system itself & intended for end user)
-/usr/local/bin = contains any binaries that completely manually to provide safe place that won't 
 conflict with software installed by any system package manager
-all these binaries get mapped together with path environment variable (you can execute them from any 
 directory in terminal)
-/etc directory = editable text configuration (you can modify them in editor)
-linux can support multiple users 
-/boot = contains file needed to boot system like linux kernel itself
-/dev = device files (you can interface with hardware or drivers as they were regular files) 
 (creating disk portions or interface with floppy drive)
-/opt directory = contains optional or add-on software (you will rarely interact with it)
-/var director = contains variable files that will change as operating system is being used (like 
 logs & cache files)
-/temp is for temporary files (won't be persisted as reboot)
-/proc directory = illusionary file system (does not actually exist in disk it created on memory on 
 fly by linux kernel to keep track of running process


C:
-low level & most hardware compatible, allow fine grained control over computer hardware & write code 
 interfaces directly directly with hardware components
-compiles directly to machine code & require minimum runtime support
-platform dependent & runs on specific OS
-high level language designed for human yet provide low level control over memory & hardware
-no garbage collector
-manages its own memory
-assigned an address in memory & can store that address in another variable called pointer
-when variable no longer needed you need to free it to avoid memory leak
-GCC compier
-procedural language that & does not support object oriented features


[Job market is completely brutal]
[Maths is highly important in life if you are good in maths at young age then advantages are next level]
[jailbreak leads to stop getting updates & lose phones warranty]


Instagram algorithm:
-use lates features of Instagram & use latest fonts, songs, etc
-make your video on loop (starting & ending)
-make quality video
-find niche of your video & stick to that 
-show something that people wants or connect with
-try not to let your audience scroll down
-show something informative in your videos
-do some commitments
-give some reason to your audience to follow you
-high quality of video
-average view duration, title, thumbnail
-use premium & powerful softwares to edit your videos


C programming:
-Struck = data structure (can store groups of datatype) (strong all datatypes in 1 single data  
 structure)(helps in modelling real world entities)
-memory addressing = access MA in C
-pointer = memory address which refers to physical address to memory of computer (treat pointer as 
 types of data)
-dereferencing pointer = going to memory address of that pointer & grabbing piece of information 
 stored in it


Types of softwares:
-system software -controls internal computer operations
                 -system management -OS, device driver, system utility
                 -developing softwares -programming language, linker, loader, language translator
-application software -carries necessary operations for specified application to function
                      -general purpose -work processor, presentation, spreadsheet, image editor
                      -specified purpose -reservation, attendance, billing, report card systems


Roadmap Video editing:
-inshot, VN app, caput, kinemaster, openshot, kapring, iMovie, premiere pro, you cut, vita, Final Cut 
 pro, movavi, Gilmore, hitfilm
-da Vinci resolve (everything it can do that paid software does)
-adobe premier pro & Final Cut Pro
-VN video editor, mix kit, motion array, Envato elements, free templates
-shortcuts
-AI tools (D-ID, Runway ML, Descript)
-show your best projects & portfolio
-reach out tones people, keep learning new things, & keep upgrading your projects


CUDA:
-compute unified device architecture developed by NVIDIA
-computing large amount of data in parallel which unlocks true potential of deep neural networks 
 behind artificial intelligence
-modern GPUs are measured in teraflops
-cuda allows developers to go really fast in parallel & tap into GPU's power
-data scientist all around world are using at this very moments trying to train most powerful
 machine learning model
-CUDA kernel that runs on GPU 
-final result from GPU is copied back to main memory


Cryptocurrency:
-alt coins = any there than bitcoin
-remember that some point there is everyone going to book their profit
-beauty of crypto is that it is permission less & anyone can put & launch anything 
-always think for yourself in investing
-many new blockchains claim them to be ethereal killer
-Solana is decentralised, scalable, high security
-private & public crypto
-Monaro is not traceable crypto currency & cannot read from public legure
-central bank digital cryptocurrency
-everything going to 
-holding as asset not like medium of exchange
-cutting edge technology
-strict monetary policies
-SEBI, RBI, central government relationship 
-wallets of people
-proof of stake & proof of work


Using AI to make videos for YouTube:
-Trends = using YouTube & google analysis & trends
-generating content = summarise content, rewrite existing videos & articles (down-sub website), 
 asking GPT to write, Hinglish, writing description, generating tags
-Thumbnail = using prompt-base, hugging face, arc.tensent
-Voice = speechchelo, narakeet


Python:
-Python is a powerful language that enables us to craft a wide array of applications and solve real-
 world problems
-They serve as aids, reducing complexity and making our programs more readable and maintainable
-manganing quantities
-
-extra lines does not make any difference but indentation does
-or = either 1 in true from both
-and = only evaluates 2nd argument if 1st 1 is true
-Sort only works when there are items of same datatype
-Tuples can not be modified
-declaring our own classes & we can instantiate objects from that class
-object is instance of class & class type of object


Generative AI:
-type of artificial intelligence technology that can produce various types of content, including text, 
 imagery, audio, and synthetic data.
-AI is descipline & ML is subfield
-AI has to do with the theory and methods to build machines that think and act like humans.
-2 of most common classes of machine learning models are unsupervised supervised ML models
-supervised models have labels (labeled data with tag, name, type, number)
-unlabelled data has no tag
-supervised learning -model learns from past examples to predict future values
                     -testing data values (“x”) are input into model
-unsupervised problems are all about discovery, raw data, checking if naturally falls into groups
-semi-supervised learning -neural network trained on small amount of labeled data & large amount of 
                           unlabelled data
                          -historical data of bill amount & how much different people tipped based on 
                           order type -pick-up or delivery
-model tries to reduce this error until predicted & actual values are closer together
-machine learning is broad field encompasses many different techniques
-deep learning is type of machine learning uses artificial neural networks, process more complex 
 patterns than machine learning
-artificial neural networks inspired by human brain
-labeled data helps neural network to learn basic concepts of tasks, unlabelled data helps neural 
 network to generalise to new examples
-Gen AI -subset of deep learning, uses artificial neural networks, process both labeled & unlabelled 
         data, using supervised, unsupervised, semi-supervised methods
-large language models -subset of deep learning
-deep learning models (machine learning models in general) divided into 2 types –generative & 
 discriminative
-discriminative model -type of model used to classify or predict labels for data points
                      -trained on dataset of labeled data points & they learn relationship b/w features 
                       of data points & labels
                      -trained, used to predict label for new data points
-generative model -generates new data instances based on learned probability distribution of existing 
                   data
                  -generate new content
                  -learns conditional probability distribution or probability of “y” (our output) given 
                   “x” (our input), that this is dog & classifies as dog & not cat
                  -learns joint probability distribution (probability of x & y) p(x,y) & predicts  
                   conditional probability that its dog & generate picture of dog
                  -generate new data instances & discriminative models discriminate b/w different kinds 
                   of data instances
-its not GenAI when output ("y”, or label) is number, class (spam or not spam), or probability
-its GenAI when output is natural language (like speech or text), audio, or image
-generative AI process take training code, labeled data, unlabelled data of all data types & build 
 foundation model
-foundation model then generate new content, text, code, images, audio, video
-traditional programming -hard code rules for distinguishing cat -type: animal, legs: 4, ears: 2, fur: 
                          yes, likes: yarn, catnip, dislikes: Fred
-models like Gemini (Google’s multimodal AI model), LaMDA (language model for dialogue applications) 
 very large data from multiple sources across internet & build foundation language models
-Gen-AI -type of artificial intelligence & creates new content based on what it learned from existing 
         content
        -process of learning from existing content -training & results in creation of statistical model
        -when given prompt, GenAI uses statistical model to predict expected response & generates new 
         content
-learns underlying structure of data & can generate new samples are similar to data it trained on
-generative language model take what it learned from examples its been shown & create something 
 entirely new based on that information
-large language models generate novel combinations of text in form of natural-sounding language only 
 1 type of generative AI, generative image model takes image as input & output text, another image, 
 video, under output text getting visual question & answering
-under output image, image completion generated & under output video, animation generated
-generative language model takes text as input & output more text, image, audio, decisions
-under output text, question & answering is generated & output image video is generated
-power of Generative AI comes from use of transformers
-transformers revolution in natural language processing, consists of encoder & decoder
-encoder encodes input sequence & passes it to decoder, learns how to decode representations for 
 relevant task
-Hallucinations -words or phrases generated by model often nonsensical or grammatically incorrect
                -like when model not trained on enough data, trained on noisy or dirty data, not given 
                 enough context, or enough constraints
                -make output text difficult to understand, generate incorrect or misleading information
-prompt -short piece of text given to large language model as input & used to control output of model 
         in variety of ways
        -prompt design -process of creating prompt generate desired output from LLM
        -Generative AI depends lot on training data that have fed into it
        -analyses patterns & structures of input data
-Text-to-text models -take natural language input & produce text output
                    -trained to learn mapping between pair of texts
                    -translating from 1 language to others
-Text-to-image models -trained on large set of images, each captioned with short text description
                     -diffusion is 1 method used to achieve 
-Text-to-video models -generate video representation from text input
-Text-to-3D models -generate 3-dimensional objects correspond to user’s text description, for use in 
                   games or other 3D worlds
-Text-to-task models -trained to perform defined task or action based on text input
                    -wide range of actions such as answering question, performing search, making 
                     prediction, taking some sort of action
                    -trained to navigate web user interface or make changes to doc through graphical 
                     user interface
-foundation model -large AI model pre-trained on vast quantity of data, designed to be adapted (fine-
                  tuned) to wide range of downstream tasks, sentiment analysis, image captioning, 
                  object recognition
                 -potential to revolutionise many industries, including healthcare, finance, customer 
                  service
                 -used to detect fraud & provide personalised customer support
                 -Vertex AI offers -model garden includes foundation models
                 -language foundation models include chat, text, code
                 -vision foundation models includes stable diffusion, shown to be effective at 
                  generating high-quality images from text descriptions

Responsible AI:
-prediction from traffic, weather, recommendation of TV shows
-developing responsible AI require understanding of possible issues, limitation, unintended 
 consequences
-unique principles of each organisations
-fairness, accountability, privacy, transparency
-defined & reputable process of using AI responsibly
-human collect data, control deployment, apply
-every decision point requires consideration, evaluation, to ensure choices made responsibly
-develop technology with ethics in mind
-principles actively governs research & product development & affect business decision
-1 -socially benificial
-2 -avoid creating or reinforcing unfair bias
-3 -built & tested for safety
-4 -accountable to people
-5 -incorporate privacy design principle
-6 -uphold high standards for scientific excellence
-7 -be made available for users should follow these principles


Image generation:
-model families 
-variational auto encoders (VAEs) -encode image to compressed size & decode them back to original 
 size while learning distribution of data 
-generative adversarial model (GANs) -pit 2 neural network against each other
                                     -generator creates images & other network discriminator 
                                      predict if image is real or fake
                                     -over time discriminator gets better distinguishing & 
                                      generator gets better at producing real images
-autoregressive model -generate image by treating image as sequence of pixel
-diffusion model -draws inspiration from physics & thermodynamics
                 -underpin many state of art image generation model 
                 -unconditioned generation -no additional input or instruction can be trained on 
                                            images of specific thing to generate new images, face
                                           -super resolution
                 -conditional generation -text to image, image in-painting, text guided image to 
                                          image
                 -unconditional diffusion -destroy structure in data distribution through through  
                                           iterative forward diffusion process, learn reverse 
                                           diffusion process that restore structure in data
                 -forward & backward
-demonising diffusion probabilities models (DDPM) -takes pure noise ----> synthesis novel image


Google Analytics:
-


Programing fundamentals:
-bugs & crash
-every language has its strength & weaknesses
-some ideal for programming small programs with limited memory & some handle mathematical 
 computation ----> machine language (0s & 1s)
-file extension of different language
-php, javascript are interpreted language
-source code -----> compile/ interpreter/ combination of both -----> machine code
-C/C++/objective C are all compiled languages
-java, C#, python are combination of both
-intelisence
-python
-exit()
-python3
-syntax -rules of programming language
-each statement made-up of keywords, expression, operators, operands
-interpreter for code suggestion
-
argument [Setting parameters and arguments]
The actual value given in a function call that “fills in” the parameter variable
assignment operator [Introduction to variables and data types]
The equals sign; the value on the right is assigned to (stored in) the variable named on the left-hand side.
B
block [Exploring conditional code]
A group of statements that belong together
bug [What is programming?]
Something that happens unexpectedly in a program
C
comment [Working with comments]
A note to describe what a program does
comment out [Working with comments]
Using comments to temporarily ignore a section of code
compile [Running your code]
Translate a program from high-level code to machine code
concise [Why Python?]
A concise programming language takes fewer lines of code to accomplish a goal.
conditional expression [Making decisions in code]
Any expression that evaluates to True or False; also called a Boolean expression, named after British mathematician George Boole
crash [What is programming?]
When a program stops early or freezes
D
data type [Introduction to variables and data types]
A category for values; for example, a value can be a number, or it can be a string of text characters. A data type also defines how we can operate on those values.
E
expression [Basic statements and expressions]
A combination of operands and operators that break down into a single value
F
file extension [Writing source code]
The characters after the last “.” in a file name; we usually use “.py” for Python, “.js” for JavaScript, etc.
float [Working with numbers]
Any number with a decimal point (short for “floating point” number)
function [Introduction to functions]
A block of code packaged together with a name, also called subroutine, procedure, or method
function body [Creating and calling functions]
The code block that belongs to a function; the code that the function will execute
function call [Creating and calling functions]
Making a function do its action by giving its name and possibly giving it argument values for parameters, also called invoking a function
G
gutter [Running Python in an IDE]
The left side of an IDE window, where line numbers appear
H
high-level language [What is a programming language?]
A programming language with structure, keywords, and syntax that are easier for humans to understand
I
IDE [Using an IDE]
Integrated development environment—an application that provides the tools needed to write, compile, run, and debug programs
if-else statement [Working with simple conditions]
A statement that tests a condition; when the condition is True, the program will perform a specified action. When the condition is False, the program does the action following the “else.”
if statement [Exploring conditional code]
A statement that tests a condition; when the condition is True, the program will do the action(s) following the “if.” When the condition is False, the program does not do the action(s).
integer [Working with numbers]
A whole number without any decimal places
IntelliSense [Using an IDE]
A feature of the Visual Studio Code IDE that makes code suggestions as you type
interpret [Running your code]
Translate a program from high-level code tomachine code one source code line at a time
K
keyword [Variables across languages]
Reserved words that mean something special in a programming language; for example, the word “for” is a keyword in many languages, including Python, Java, C, and C++.
M
machine language [What is a programming language?]
The language that a computer “understands”—directly using the instructions wired into the CPU
O
operand [Basic statements and expressions]
The value or values that an operator works on; for example, in 4 + 3, the operator is + and the operands are 4 and 3.
operator [Basic statements and expressions]
A symbol for an arithmetic operation, such as +, -, *, and /
order of operations [Basic statements and expressions]
The order in which operations are performed, also called priority of operations; for example, multiplication in an expression is done before addition, just as in mathematics—4 + 3 * 5 is 19, not 35.
P
parameter [Setting parameters and arguments]
Variable name in a function definition, used to modify the behavior of the function code; you can think of it as a “placeholder” that will be filled in when the function is called.
programming [What is programming?]
The process of converting ideas into instructions
R
relational operator [Making decisions in code]
An operator that yields a True or False value depending on the relation between its operands; for example, > is a relational operator; 4 > 2 evaluates to True.
return value [Returning values from functions]
The value that a function gives back to the code that called it
runtime error [Troubleshooting issues]
When the computer is unable to execute part of your code; for example, when 12 / 0 can't be calculated
S
semantic error [Troubleshooting issues]
When the output of the program is not what you expected, also called a logic error; for example, calculating area of a rectangle as length plus width instead of length times width
source code [Writing source code]
Instructions for the computer written in plain text
statement [Basic statements and expressions]
The individual actions you want a program to take; statements can combine keywords, operations, and expressions.
syntax [What is a programming language?]
The rules for how a programming language expects its code to be written
syntax error [Troubleshooting issues]
When a program does not follow the rules of the language; for example, 3 + * 5
syntax highlighting [Using an IDE]
Use of color in an IDE to point out keywords and improve readability of code
V
variable [Introduction to variables and data types]
A container for a value
W
white space [Properly using whitespace]
Blanks and/or blank lines; you add these to programs to make them more readable to humans.
algorithm [Introduction to algorithms]
A set of instructions that describes how to get the exact result you want
argument [Setting parameters and arguments]
The actual value given in a function call that “fills in” the parameter variable
array [Understanding collections]
A collection that groups pieces of data in a certain order and assigns the collection a name, also called an array or list in some programming languages; the position of each element is defined by an index.
assignment operator [Introduction to variables and data types]
The equals sign; the value on the right is assigned to (stored in) the variable named on the left-hand side.
attribute [Introduction to object-oriented programming]
Data that an object has, also called a field or property
autocompletion [Debugging code in an IDE]
Also known as code completion, this is a feature of IDEs that offer to finish code for you while you’re typing.
B
block [Exploring conditional code]
A group of statements that belong together
bug [What is programming?]
Something that happens unexpectedly in a program
C
class [Introduction to object-oriented programming]
A detailed description; the definition or template of what an object will be
collection [Understanding collections]
A programming construct that lets you group similar items together
comment [Working with comments]
A note to describe what a program does
comment out [Working with comments]
Using comments to temporarily ignore a section of code
compile [Running your code]
Translate a program from high-level code to machine code
concatenation [Combining and manipulating strings]
Combining multiple strings into a single string; in many languages, the + operator is used to concatenate strings.
concise [Why Python?]
A concise programming language takes fewer lines of code to accomplish a goal.
conditional expression [Making decisions in code]
Any expression that evaluates to True or False; also called a Boolean expression, named after British mathematician George Boole
constructor function [Creating custom classes and objects]
A function whose purpose is to specify the properties to use when you create an object; in many program languages, you invoke the constructor by giving the name of the class it belongs to.
crash [What is programming?]
When a program stops early or freezes
D
data type [Introduction to variables and data types]
A category for values; for example, a value can be a number, or it can be a string of text characters. A data type also defines how we can operate on those values.
debug [Introduction to debugging]
The process of identifying and fixing bugs in a program
dictionary (collection) [Understanding collections, Creating more complex collections]
A collection that lets you store related information with a label for each item, also called a map, hash map, table, or associative array in some programming languages
E
expression [Basic statements and expressions]
A combination of operands and operators that break down into a single value
F
field [Introduction to object-oriented programming]
Data that an object has, also called an attribute or property
file extension [Writing source code]
The characters after the last “.” in a file name; we usually use “.py” for Python, “.js” for JavaScript, etc.
float [Working with numbers]
Any number with a decimal point (short for “floating point” number)
for loop [Iterating through collections]
A programming construct in many languages that lets you specify iteration to a specified endpoint; usually used when you know exactly how many times the loop must iterate
framework [Understanding libraries and frameworks]
Code that is used together in a specific way; frameworks define how you should accomplish a task, with some decisions already made for you.
function [Introduction to functions]
A block of code packaged together with a name, also called subroutine, procedure, or method
function body [Creating and calling functions]
The code block that belongs to a function; the code that the function will execute
function call [Creating and calling functions]
Making a function do its action by giving its name and possibly giving it argument values for parameters, also called invoking a function
G
garbage collection [Memory management across languages]
A process by which the runtime system keeps track of which items in memory are no longer needed and deletes them
gutter [Running Python in an IDE]
The left side of an IDE window, where line numbers appear
H
high-level language [What is a programming language?]
A programming language with structure, keywords, and syntax that are easier for humans to understand
I
IDE [Using an IDE]
Integrated development environment—an application that provides the tools needed to write, compile, run, and debug programs
if-else statement [Working with simple conditions]
A statement that tests a condition; when the condition is True, the program will perform a specified action. When the condition is False, the program does the action following the “else.”
if statement [Exploring conditional code]
A statement that tests a condition; when the condition is True, the program will do the action(s) following the “if.” When the condition is False, the program does not do the action(s).
immutable [Collections in other languages]
Refers to variables or collections whose existing values cannot change after they are created
importing [Comparing types of external code]
Referencing a module by its name so your program can use its code
index [Understanding collections; Working with collections]
A number that gives an item’s position in a list; in most programming languages, the first item in a list has an index of zero.
index number [Understanding collections; Working with collections]
A number that gives an item’s position in a list; in most programming languages, the first item in a list has an index of zero.
infinite loop [Introduction to iteration]
A bug that occurs when a loop never stops
integer [Working with numbers]
A whole number without any decimal places
IntelliSense [Using an IDE]
A feature of the Visual Studio Code IDE that makes code suggestions as you type
interpret [Running your code]
Translate a program from high-level code to machine code one source code line at a time
int method [Combining and manipulating strings]
A method to convert a string to an integer in Python; many other languages have similar methods for type conversion.
IO [Introduction to input and output]
Input/output
iterate [Introduction to iteration]
Repeat a procedure multiple times until it reaches a specified endpoint
K
keyword [Variables across languages]
Reserved words that mean something special in a programming language; for example, the word “for” is a keyword in many languages, including Python, Java, C, and C++.
L
linting [Debugging code in an IDE]
An IDE feature that checks code for bugs before you execute it; the name comes from the process of removing lint from clothing.
list (collection) [Understanding collections]
A collection that groups pieces of data in a certain order and assigns the collection a name, also called an array or list in some programming languages; the position of each element is defined by an index.
loop [Introduction to iteration]
Code that iterates (repeats until reaching a specified endpoint)
loop, infinite [Introduction to iteration]
A bug that occurs when a loop never stops
M
machine language [What is a programming language?]
The language that a computer “understands”—directly using the instructions wired into the CPU
method [Introduction to object-oriented programming]
Also called a behavior, a function that specifies what actions an object can perform; it is a block of code that can be called to perform some action, and it may return a value.
module [Comparing types of external code]
In Python, a file that contains code, such as variables and functions that are related; for example, Python’s random module, which has several functions for generating random numbers
multi-threading [Introduction to multithreading]
An approach to writing code that executes multiple threads (tasks) concurrently
mutable [Collections in other languages]
Refers to variables or collections whose existing values can be changed
O
object-oriented programming [Introduction to object-oriented programming]
OOP—an approach to programming that breaks programs up into smaller parts known as objects, each of which has its own distinct focus
operand [Basic statements and expressions]
The value or values that an operator works on; for example, in 4 + 3, the operator is + and the operands are 4 and 3.
operator [Basic statements and expressions]
A symbol for an arithmetic operation, such as +, -, *, and /
order of operations [Basic statements and expressions]
The order in which operations are performed, also called priority of operations; for example, multiplication in an expression is done before addition, just as in mathematics—4 + 3 * 5 is 19, not 35.
P
package [Understanding libraries and frameworks]
Also called a library, this is a group of related modules in Python to help you accomplish a task. It is like a set of tools.
parameter [Setting parameters and arguments]
Variable name in a function definition, used to modify the behavior of the function code; you can think of it as a “placeholder” that will be filled in when the function is called.
PEP 8 [Choosing a code style]
Python Enhancement Proposal 8—the most commonly used style guide for Python
programming [What is programming?]
The process of converting ideas into instructions
property [Introduction to object-oriented programming]
Data that an object has, also called a field or attribute
pseudocode [Writing pseudocode]
A description of the logic you're trying to create using plain language
R
regular expression [Creating regular expressions]
An encoded description of a pattern that you want to match within a string
relational operator [Making decisions in code]
An operator that yields a True or False value depending on the relation between its operands; for example, > is a relational operator; 4 > 2 evaluates to True.
return value [Returning values from functions]
The value that a function gives back to the code that called it
runtime error [Troubleshooting issues]
When the computer is unable to execute part of your code; for example, when 12 / 0 can't be calculated
S
semantic error [Troubleshooting issues]
When the output of the program is not what you expected, also called a logic error; for example, calculating area of a rectangle as length plus width instead of length times width
slice [Finding patterns in strings]
In Python, a part of a string or a list; for strings, this operation is called substring in many other programming languages.
source code [Writing source code]
Instructions for the computer written in plain text
statement [Basic statements and expressions]
The individual actions you want a program to take; statements can combine keywords, operations, and expressions.
style guide [Choosing a code style]
A document describing a programmer’s (or company’s) approach to code
syntax [What is a programming language?]
The rules for how a programming language expects its code to be written
syntax error [Troubleshooting issues]
When a program does not follow the rules of the language; for example, 3 + * 5
syntax highlighting [Using an IDE]
Use of color in an IDE to point out keywords and improve readability of code
T
test case [Creating a test case]
Commands or scripts that use a program in a way designed to test a specific scenario or feature of the program
tuple [Collections in other languages]
In Python, an immutable list
V
variable [Introduction to variables and data types]
A container for a value
W
while loop [Iterating to a custom endpoint]
A programming construct in many languages that iterates until the program arrives at a certain state
white space [Properly using whitespace]
Blanks and/or blank lines; you add these to programs to make them more readable to humans.
abstract class [Abstract and concrete classes]
A class that exists purely for the sake of being inherited by other classes to provide some shared behavior
abstraction [Abstraction]
Focusing on the essential qualities of something rather than one specific example
access control [Access control, compliance, and injection]
Rules specifying who can access which parts of a database
accessor [Creating class diagrams: Behaviors]
See getter method.
ACID [ACID and transactions]
An acronym that refers to the requirement that database transactions be atomic, consistent, isolated, and durable
actor (use case) [Identifying the actors]
Anything that lives outside the application but interacts with it to accomplish some goal
aggregate functions [Aggregate functions]
SQL functions that use more than one piece of data to generate a value
aggregation [Aggregation]
An object relationship in which one object is built of other objects, often referred to as a has-a relationship; the subsidiary objects have an existence independent of the containing object.
analysis (object-oriented) [Analysis, design, and programming]
Figuring out what a program should do; what problem you are trying to solve
ANSI [Basic SQL]
American National Standards Institute. Their web site says ANSI is “a private, non-profit organization that administers and coordinates the U.S. voluntary standards and conformity assessment system.”
approximate algorithm [What are algorithms?]
An algorithm that tries to find an answer that might or might not be exact (such as a facial recognition algorithm, which might not give the same answer every single time)
array [Arrays; What are arrays?]
A collection that groups pieces of data in a certain order and assigns the collection a name, also called an array or list in some programming languages; the position of each element is defined by an index.
array index out of bounds error [What are arrays?]
An error that happens when a program tries to access an item at an index position outside an array’s limit
array indexing [Arrays]
A constant-time operation to access an element of an array
array insertion/deletion [Arrays]
A linear time operation to insert or delete an element at an arbitrary location in an array; at the end of an array, this is usually a constant time operation.
array, jagged [Jagged arrays]
A multidimensional array where each row can have a different length
array, ragged [Jagged arrays]
A multidimensional array where each row can have a different length
array, resizable [Resizable arrays and language support]
An array whose length can be modified; programs can add additional elements to such an array.
ASCII [Understanding hash functions]
American Standard Code for Information Interchange—a format for text where each character has a single numerical representation; this encoding has only 256 possible entries.
associative table (database) [Relationships]
A table that contains columns for foreign keys from the tables being associated
atomic transaction [ACID and transactions]
A transaction must be indivisible; pieces of it can’t be separated out.
attribute [Objects]
Data that an object has, also called a field or property
auto-increment [Primary and foreign keys]
A database field whose value increases by one every time a row is added; usually used for a primary key
B
behavior [Objects]
An action that an object can do, also called a method
behavioral patterns [Design patterns]
Design patterns concerned with communication between objects as a program is running
big O notation [Measuring algorithm performance; Big O notation]
A notation used to describe how a particular algorithm performs as the size of the set of inputs grows over time; the O stands for orderof operation.
binary search [Ordered list search; Search arrays]
An algorithm that determines whether an item is in a sorted list; it works by starting in the middle of the list and, depending on whether the value sought is less or greater than the item, discards the “wrong half” of the list. It repeats this process until the item is found or there are no elements left to search. Its time complexity is logarithmic, O(log n).
binary search tree [Understand binary search trees]
A binary tree in which the left child must be less than its parent and the right child must be greater than its parent
bit [Numerical data types]
A single zero or one
black boxing [Encapsulation]
The principle that an object should not make anything about itself available except what is absolutely necessary for other parts of an application to work
Boolean data type [Booleans and characters]
A data type with two possible values: True or False; usually used to perform logical operations, most commonly to determine whether some condition is true
BST [Understand binary search trees]
A binary tree in which the left child must be less than its parent and the right child must be greater than its parent
bubble sort [The bubble sort]
A sorting algorithm that works by repeatedly comparing each item to its neighbor and swapping them if needed; its time performance is quadratic, O(n2).
bucket [Understanding hash tables]
A place for a key-value pair to go in a hash table
C
camel case format [Creating class diagrams: Attributes]
Naming convention that starts with a lowercase letter and uses uppercase for additional words, such as priceAfterDiscount; Java tends to use this convention.
cascading delete [Relationship rules and referential integrity]
A process in which associated records are removed in order to maintain consistency; for example, deleting a restaurant customer would also remove all their orders.
chaining [Pros and cons of hash-based structures]
Creating a linked list with additional values to handle collisions in a hash table
CHAR [Columns and data types]
A database data type that contains a string with a fixed length of characters
character data type [Booleans and characters]
A data type that can store a single symbol or letter
child class [Inheritance; Identifying inheritance situations]
See subclass.
child node [Introduction to tree data structures]
A node in a tree that is referred to by another node
class [Classes]
A detailed description; the definition or template of what an object will be
class, child [Inheritance; Identifying inheritance situations]
See subclass.
class, parent [Inheritance; Identifying inheritance situations]
See superclass.
class relationships [Identifying class relationships]
A diagram showing how objects in an application are related to one another
class responsibilities [Identifying class responsibilities]
Determination of the actions that a class must perform and which classes are responsible for which actions
clause, SQL [Basic SQL]
A part of an SQL statement that has a keyword specifying some action to take and something to act on or use
code smell [General development principles]
Valid code that somehow doesn’t seem right; it doesn’t pass the “smell test”
collaborator [CRC cards]
A class that will interact with a class being described in a CRC card
collection algorithms [Common algorithms in programming]
Algorithms that involve manipulating or navigating among sets of data that are stored within a particular structure
collision [Hash Tables; Understanding hash functions]
An event that occurs when two separate keys in a hash table map to the same slot in the table
column (database) [Relational databases; Understanding databases: Benefits of spreadsheets]
Columns represent attributes of each row. For example, each customer’s row might contain information about their name, email address, and phone number.
compile-time polymorphism [Polymorphism]
Choosing which of several overloaded methods to call by looking at the method signature, also called static polymorphism
composite key [Keys and unique values]
A key that is made up of two or more fields in the data
composition [Composition]
An object relationship in which one object is built of other objects; the subsidiary objects are owned by the containing object.
computational algorithms [Common algorithms in programming]
Algorithms that take one set of data and derive another set of data from it
conceptual model [Identifying the objects]
Model that identifies the most important objects in an application and the relationship between them
concrete class [Abstract and concrete classes]
A class that implements any missing functionality from an abstract class
consistent transaction [ACID and transactions]
Whatever a transaction does, it must leave the database in a valid or consistent state.
constant time [Measuring algorithm performance; Big O notation]
A big O of one; an operation that doesn’t depend on the number of elements in a dataset
CRC cards [CRC cards]
Class, responsibility, collaboration—index cards containing the same information as a conceptual object diagram
creational patterns [Design patterns]
Design patterns focused on the instantiation of objects
CRUD [Basic SQL]
An acronym for common database operations: Create, Read, Update, and Delete
D
data structure [Introduction to data structures]
A container that allows programmers to combine several pieces of data into a single structure; this helps connect and group data.
data type [Introduction to data and data types]
A category for values; for example, a value can be a number, or it can be a string of text characters. A data type also defines how we can operate on those values.
data type (database) [Columns and data types]
The kind of information stored in each column
database [Why use a database?]
A structure that stores information in an organized, consistent, reliable, and searchable way
database column [Relational databases; Understanding databases: Benefits of spreadsheets]
Columns represent attributes of each row. For example, each customer’s row might contain information about their name, email address, and phone number.
database field [Understanding databases: Benefits of spreadsheets]
See database column.
database index [Indexes, transactions, and stored procedures]
A reference to each value in a field and where it’s located for quick access; this makes retrieval faster but can increase time for some operations like inserting a record.
database key [Keys and unique values]
A unique value used to refer to only one specific row or record
database, relational [Relational databases]
A database in which data are organized into relations—tables of related data
database row [Relational databases; Understanding databases: Benefits of spreadsheets]
An instance of a given entity; for example, each customer in a database has their information in a table row.
database table [Relational databases]
A collection of rows (representing individual entities) and columns (the attributes of those entities)
database transaction [Indexes, transactions, and stored procedures]
A group of queries or statements treated as a block of activities; if one of the components fails for any reason, the whole group of statements is not executed, and anything that is partially completed is rolled back.
DATETIME [Columns and data types]
A database type that stores a time along with a date
DBMS [What you should know]
Database management system—this is the software we use to interact with a database.
DCL [Basic SQL]
Data control language—commands for controlling access to database tables
DDL [Basic SQL]
Data definition language—commands for defining a database
delete, cascading [Relationship rules and referential integrity]
A process in which associated records are removed in order to maintain consistency; for example, deleting a restaurant customer would also remove all their orders.
DELETE statement [Modifying data]
An SQL statement that lets you remove specific rows in a database table
denormalization [Denormalization]
The process of intentionally duplicating information in database tables in violation of normalization rules
deque [Stacks and queues; Specialized queues]
Double-ended queue—a data structure that is optimized for adding and removing elements from both ends of the collection
dequeue [Stacks and queues; Implement queues in Swift]
Remove an element from a queue; Note: this is not the same as a deque, although the spellings are similar.
design (object-oriented) [Analysis, design, and programming]
Figuring out how a program should accomplish its task
design pattern [Design patterns]
A common, repeatable solution for creating software programs; these patterns define code architectures and best practices for common problems that occur across all kinds of applications.
desktop databases [Software options]
Database tools intended for small solutions with just a few users, usually hosted on a workstation rather than a dedicated server
destructor [Classes with multiple constructors]
A method that is called when an object is no longer needed and is being disposed of, also called a finalizer
deterministic algorithm [What are algorithms?]
An algorithm where each step has an exact decision
dictionary (collection) [Hash Tables; What are associative arrays?; Using dictionaries in Python]
A collection that lets you store related information with a label for each item, also called a map, hash map, table, or associative array in some programming languages
difference (set) [Sets in Python 3]
Given two sets, the difference is a new set that contains all the items in the first set that are not in the second set; for example, the difference of A, B, C and B, D, E is A, C.
divide-and-conquer algorithm [The merge sort]
An algorithm that works by dividing a problem into smaller parts and solving those
DML [Basic SQL]
Data manipulation language—commands for interacting with database data
doubly linked list [Singly vs. doubly linked lists]
A linked list in which each node has both a pointer to the next node and a pointer to the previous node in the list
DRY [General development principles]
“Don’t repeat yourself”—a principle that says you should avoid copying and pasting large sections of code without any changes
durable transaction [ACID and transactions]
The information changed in a transaction must actually get written to the database.
dynamically typed language [OOP support in different languages]
A language where a variable’s type does not need to be specified; Python and Ruby are dynamically typed.
E
encapsulation [Encapsulation]
Bundling an object’s attributes and methods within the same class; this is often done to restrict access to some of an object’s components.
enqueue [Stacks and queues; Implement queues in Swift]
Add an element to a queue
enterprise database management systems [Software options]
Database systems intended to be used by huge numbers of people and run on infrastructure that can serve millions of interactions simultaneously
ER diagram [Modeling and planning a database]
Entity-relationship diagram—shows a table’s fields and its relationships to other tables
exact algorithm [What are algorithms?]
An algorithm that produces a known predictable value
execution flow [Use cases]
In a use case, the steps needed to accomplish a goal
expression, SQL [Basic SQL]
Part of an SQL statement that sets parameters within which to operate
F
factorial [Power and factorial]
A mathematical operator that is the product of a number and all the numbers before it; thus, 5 factorial (written as 5!) is 5 × 4 × 3 × 2 × 1, or 120.
factory method [Design patterns]
A design pattern providing a structured way to instantiate different types of objects
field [Objects]
Data that an object has, also called an attribute or property
field (database) [Understanding databases: Benefits of spreadsheets]
See database column.
FIFO [What are queues?]
First in, first out—the policy that a queue follows
filter [Unique filtering with hash table]
A filtering algorithm goes through a data structure, retaining only those elements that satisfy some condition and discarding the others; for example, you might want to go through a list of items and keep only the unique items, discarding all the duplicates.
final class [Abstract and concrete classes]
In Java, a class that cannot be extended or inherited from
finalizer [Classes with multiple constructors]
See destructor.
finite set [Sets in Python 3]
A set with a specific set of elements that cannot be added to
first normal form [First normal form]
A database requirement that values in each field in each table have only one value in them and there are no columns representing repeated kinds of data for each row
foreign key [Relationships]
A key that is a primary key in one table but not in another
frozen set [Sets in Python 3]
A set with a specific set of elements that cannot be added to
function, hash [Hash Tables; Understanding hash functions]
A function that uses a key to compute an index to the slots in the hash table and map the key to the value
functionality [FURPS+ requirements]
The capabilities and features of an app
functions, aggregate [Sorting results]
SQL functions that use more than one piece of data to generate a value
FURPS [FURPS+ requirements]
Functionality, usability, reliability, performance, and supportability—a checklist of key qualities to consider when determining requirements
FURPS Plus [FURPS+ requirements]
FURPS with four more categories: design constraints, implementation, standards, and physical requirements
G
garbage collection [Classes with multiple constructors]
A process by which the runtime system keeps track of which items in memory are no longer needed and deletes them
getter method [Creating class diagrams: Behaviors]
A method that retrieves the value of an object’s attribute, also called an accessor
“god object” [Identifying class responsibilities]
In object-oriented design, an object that knows too much or does too much
H
hash function [Hash Tables; Understanding hash functions]
A function that uses a key to compute an index to the slots in the hash table and map the key to the value
head (linked list) [What are linked lists?]
The first node in a linked list
heap (using trees) [Understand heaps]
A data structure implemented as a binary tree to hold a collection of objects; these can be used for a priority queue.
I
identity [Objects]
An object’s existence; an object’s identity is different from every other object’s identity.
index [What are arrays?]
A number that gives an item’s position in a list; in most programming languages, the first item in a list has an index of zero.
index, database [Indexes, transactions, and stored procedures]
A reference to each value in a field and where it’s located for quick access; this makes retrieval faster but can increase time for some operations like inserting a record.
index number [What are arrays?]
A number that gives an item’s position in a list; in most programming languages, the first item in a list has an index of zero.
infinite set [Sets in Python 3]
A set with an infinite number of elements, such as a set containing all negative numbers
inheritance [Inheritance; Identifying inheritance situations]
A process for passing on attributes and methods from other existing classes to a new class
initialize [Use arrays in Swift]
To give a piece of data or data structure a starting (initial) value
instance [Classes]
An individual object; different instances can have different values for their attributes even if they share the same class.
instantiation [Classes; Instantiating classes]
Creating an object based on a class
interface (object-oriented) [Interfaces; Lists in other languages]
A structure that declares a set of methods for a class to implement; the methods are not implemented—the method signatures specify a capability for a class to implement. Every class that implements the interface must provide a body for all the methods.
intersection (set) [Sets in Python 3]
Given two sets, the intersection is a new set that contains the items in the first set that also belong to the second set; for example, the intersection of A, B, C and B, D, E is B (it is the only item in both sets).
isolated transaction [ACID and transactions]
While activities in a transaction are being completed, nothing else can make changes to the data involved.
J
jagged array [Jagged arrays]
A multidimensional array where each row can have a different length
JOIN keyword [Joining tables]
An SQL keyword that tells the database to consider two or more tables when making a selection
K
key, composite [Keys and unique values]
A key that is made up of two or more fields in the data
key, database [Keys and unique values]
A unique value used to refer to only one specific row or record
key, foreign [Relationships]
A key that is a primary key in one table but not in another
key, surrogate [Keys and unique values]
A field that is added to a table and has no natural key so that each row can have a unique value
key, synthetic [Keys and unique values]
A field that is added to a table and has no natural key so that each row can have a unique value
key-value pair [What are associative arrays?]
Entries in a dictionary; the key is used for indexing the dictionary to find the corresponding value.
L
leaf node [Introduction to tree data structures]
A node in a tree that has no child nodes
LIFO [What are stacks?]
Last in, first out—the policy that a stack follows
linear time [Measuring algorithm performance; Search arrays; Big O notation]
A big O of n; the operation takes time proportional to the number of elements in the dataset.
linked list [Linked lists; What are linked lists?]
A linear collection of data elements, sometimes called nodes; the data items in a linked list need not be contiguous—they are linked using pointers.
linking table (database) [Relationships]
A table that contains columns for foreign keys from the tables being associated
list (collection) [Arrays; What are arrays?]
A collection that groups pieces of data in a certain order and assigns the collection a name, also called an array or list in some programming languages; the position of each element is defined by an index.
log-linear time [Measuring algorithm performance]
A big O of n log n; the operation takes time proportional to the number of elements in a dataset times the logarithm of the number of elements.
logarithmic time [Measuring algorithm performance]
A big O of log n; the operation takes time proportional to the logarithm of the number of items in the dataset.
M
many-to-many relationship [Relationships; Many-to-many relationships]
A relation that associates many records in one table with multiple records in another table; for example, associating many customers with many purchases if you want to keep a record of each purchase each customer has ever ordered
master object [Identifying class responsibilities]
An object filled with many unrelated behaviors, seemingly existing to control everything else around it; this is something to avoid.
max heap [Understand heaps]
A heap (using trees) in which the root node always contains the largest value in the entire heap
memento design pattern [Design patterns]
A design pattern outlining a proven approach for restoring an object to a previous state
merge sort [The merge sort]
A sorting algorithm that recursively divides a set of data into smaller parts, sorts them, and then recombines the parts; in general, its time performance is log linear, O(n log n). This sort requires additional memory.
method [Classes]
Also called a behavior, a function that specifies what actions an object can perform; it is a block of code that can be called to perform some action, and it may return a value.
method signature [Polymorphism]
In Java, the method’s name and the number and types of its parameters
method, static [Static attributes and methods]
A variable or method that is shared across all objects in the same class, also referred to as a class-level or shared variable/method
min heap [Understand heaps]
A heap (using trees) in which the root node always contains the lowest value in the entire heap
minimum viable product [Defining requirements]
The bare necessities required to have a usable product
multidimensional array [Multidimensional arrays]
An array that has other arrays embedded in it, also called a multidimensional list in some programming languages
multiple inheritance [OOP support in different languages]
The condition where a derived class can inherit from more than one base class; C++ and Python support this.
multiplicity [Identifying class relationships]
In a UML diagram, a representation of one or more of something
mutator [Creating class diagrams: Behaviors]
See setter method.
MVP [Defining requirements]
The bare necessities required to have a usable product
N
node [Linked lists; What are linked lists?]
An element in a linked list
node, child [Introduction to tree data structures]
A node in a tree that is referred to by another node
node, leaf [Introduction to tree data structures]
A node in a tree that has no child nodes
node, parent [Introduction to tree data structures]
A node in a tree that refers to another node; the root node in a tree does not have a parent node—no other nodes refer to it.
node, root [Introduction to tree data structures]
The specific starting node in a tree
node, sibling [Introduction to tree data structures]
Two child nodes in a tree with the same parent node
non-deterministic algorithm [What are algorithms?]
An algorithm that attempts to produce a solution using successive guesses that become more accurate over time
non-functional requirements [Defining requirements]
Requirements that place constraints on how an application should function; for example, a banking transaction may have to comply with regulations.
normalization rules [Normalization]
Rules that help reduce redundancy and improve the integrity of data in a database
null [Numbers and other types]
A database value that indicates that a value is missing
numerical data type [Numerical data types]
Different ways numbers are classified, for example whole numbers and decimal numbers.
O
object [Primitive vs. reference types in memory]
A value in memory referenced by an identifier
one-to-many relationship [Relationships; One-to-many relationships]
A relation that associates one record in one table with multiple records in another table; for example, one item on a menu might be associated with multiple customers who choose it as their favorite.
one-to-one relationship [Relationships; One-to-one relationships]
A relation that associates only one record on one table with one—and only one—record on another table
ORDER BY clause [Sorting results]
An SQL clause that lets you specify the order in which results should be sorted; Ascending order is abbreviated as ASC and descending order as DESC.
ordered list search [Ordered list search; Search arrays]
An algorithm that determines whether an item is in a sorted list; it works by starting in the middle of the list and, depending on whether the value sought is less or greater than the item, discards the “wrong half” of the list. It repeats this process until the item is found or there are no elements left to search. Its time complexity is logarithmic, O(log n).
overloaded methods [Polymorphism; Classes with multiple constructors]
Several methods in the same class with the same name but a different set of input parameters
P
parallel algorithm [What are algorithms?]
An algorithm that can split up its data into parts and work on the parts simultaneously
parent class [Inheritance; Identifying inheritance situations]
See superclass.
parent node [Introduction to tree data structures]
A node in a tree that refers to another node; the root node in a tree does not have a parent node—no other nodes refer to it.
performance [FURPS+ requirements]
Measurement based on factors such as an app’s speed, efficiency, memory usage, and response time throughput
performance requirements [Defining requirements; FURPS+ requirements]
Constraints on an application’s performance, such as response time or number of simultaneous users
pointer [Primitive vs. reference types in memory]
An address that points to where a data structure is in memory
polymorphism [Polymorphism]
From the Greek words for “many forms”; see run-time polymorphism and compile-time polymorphism.
pop [Resizable arrays and language support; Implement stacks in Swift]
An operation that removes items from the end of an array or the top of a stack
precision (numerical) [Numerical data types]
The range of numerical values that a data type can store
precondition (use case) [Use cases]
A condition that must be true to begin the use case
predicate, SQL [Basic SQL]
Part of an SQL statement that sets parameters within which to operate
primary actor [Use cases]
In a use case, the person who will interact with the application
primary actor (use case) [Identifying the actors]
The person who initiates a scenario; this person might not be the most important actor.
primary key (database) [Keys and unique values]
The most important key in a table
primitive data type [Primitive types in memory]
Basic or value types; they have a fixed size that does not depend on the data inside them.
priority queue [Specialized queues]
A queue in which each element has a priority associated with it; the next item to be dequeued is the item with the highest priority.
procedural programming [Object-oriented thinking]
Writing a program as a long series of operations to execute
programming paradigm [Object-oriented thinking]
A set of ideas that is supported by many languages
property [Objects]
Data that an object has, also called a field or attribute
push [Resizable arrays and language support; Implement stacks in Swift]
An operation that adds items to the end of an array or the top of a stack
Q
quadratic time [Measuring algorithm performance]
A big O of n2; the operation takes time proportional to the square of the number of elements in a dataset.
queue [Stacks and queues; What are queues?]
A data structure where the first entry stored is also the first item removed; you can think of a queue like the line of customers in a store—the first person in line is the first person to be served.
quicksort [The quicksort]
A sorting algorithm that recursively divides a set of data into parts that are greater and less than a pivot point, sorts the subparts, and recombines them; its time performance is log linear, O(n log n). This sort does not require additional memory.
R
ragged array [Jagged arrays]
A multidimensional array where each row can have a different length
random access [Pros and cons of lists]
Access to a data structure in which you give an index and get the value at that slot immediately, as in an array
recursion [Understanding recursion]
When a function calls itself from within its own code
reference type [Primitive vs. reference types in memory]
A data type that uses a reference (pointer) to its specific value from an address where the item is stored rather than giving direct access to the data itself
referential integrity [Relationship rules and referential integrity]
A design principle in which ta database is aware of a relationship and will not let you modify data in a way that violates that relationship
relational database [Relational databases]
A database in which data are organized into relations—tables of related data
relationship [Relationships]
How records should be connected to one another
relationship, many to many [Relationships; Many-to-many relationships]
A relation that associates many records in one table with multiple records in another table; for example, associating many customers with many purchases if you want to keep a record of each purchase each customer has ever ordered
relationship, one to many [Relationships; One-to-many relationships]
A relation that associates one record in one table with multiple records in another table; for example, one item on a menu might be associated with multiple customers who choose it as their favorite.
relationship, one to one [Relationships; One-to-one relationships]
A relation that associates only one record on one table with one—and only one—record on another table
reliability [FURPS+ requirements]
Usually expressed in terms of how much system downtime is acceptable and how the system can be recovered
requirements [Defining requirements]
What an application or product needs to do
resizable array [Resizable arrays and language support]
An array whose length can be modified; programs can add additional elements to such an array.
root node [Introduction to tree data structures]
The specific starting node in a tree
row (database) [Relational databases; Understanding databases: Benefits of spreadsheets]
An instance of a given entity; for example, each customer in a database has their information in a table row.
run-time polymorphism [Polymorphism]
A process that allows programmers to access methods using the same interface on different types of objects that may implement those methods in different ways
runtime stack [Error tracing with stacks]
A stack that keeps track of the state of a program, including values and function calls; related to a call stack
S
search, binary [Ordered list search; Search arrays]
An algorithm that determines whether an item is in a sorted list; it works by starting in the middle of the list and, depending on whether the value sought is less or greater than the item, discards the “wrong half” of the list. It repeats this process until the item is found or there are no elements left to search. Its time complexity is logarithmic, O(log n).
search, ordered list [Ordered list search; Search arrays]
An algorithm that determines whether an item is in a sorted list; it works by starting in the middle of the list and, depending on whether the value sought is less or greater than the item, discards the “wrong half” of the list. It repeats this process until the item is found or there are no elements left to search. Its time complexity is logarithmic, O(log n).
search, unordered list [Unordered list search]
An algorithm that determines whether an item is in a list whose elements are in no particular order by examining each item in turn; its time complexity is linear, O(n).
searching algorithms [Common algorithms in programming]
Algorithms that find a specific piece of data inside a larger data structure
second normal form [Second normal form]
A database requirement that, for every non-key table column, each of the values must rely on only the whole key; the values must describe something about the row that can’t be determined from just the part of a key.
secondary actor (use case) [Diagramming use cases]
An actor that takes more of a reactive role than the primary actor
security requirements [Defining requirements]
Requirements that determine what security an application will need
SELECT statement [Narrowing query results]
An SQL statement that asks for specific rows in a database table
sequential access [Pros and cons of lists]
Access to a data structure in which you need to go through each item in turn to get to a specific index, as in a linked list
sequential algorithm [What are algorithms?]
An algorithm in which each operation is done in sequence
set [What are sets?]
A collection of different objects where the order doesn’t matter; no two objects in the set are identical.
SET statement [Modifying data]
An SQL statement that lets you update data in a database
setter method [Creating class diagrams: Behaviors]
A method that allows a program to set the value of an object’s attribute, also called a mutator
short int [Numerical data types]
An integer data type that is usually 16 bits long
sibling nodes [Introduction to tree data structures]
Two child nodes in a tree with the same parent node
signed data value [Numerical data types]
A numerical value that contains negative, zero, or positive values
single inheritance [Inheritance]
The condition where a derived class can only inherit from one class; Java is one such language.
singly linked list [Singly vs. doubly linked lists]
A linked list that only has a pointer to the next node in the list
snake case format [Converting class diagrams into code]
Naming convention where words in a variable name are separated by underscores, such as price_after_discount; Python tends to use this convention.
SOLID [General development principles]
A set of five separate but interrelated principles that apply to object-oriented design
sort, bubble [The bubble sort]
A sorting algorithm that works by repeatedly comparing each item to its neighbor and swapping them if needed; its time performance is quadratic, O(n2).
sort, merge [The merge sort]
A sorting algorithm that recursively divides a set of data into smaller parts, sorts them, and then recombines the parts; in general, its time performance is log linear, O(n log n). This sort requires additional memory.
sort, quicksort [The quicksort]
A sorting algorithm that recursively divides a set of data into parts that are greater and less than a pivot point, sorts the subparts, and recombines them; its time performance is log linear, O(n log n). This sort does not require additional memory.
sorting algorithms [Common algorithms in programming; Sort arrays]
Algorithms that take a set of data and place it into a particular order
space complexity [What are algorithms?]
The amount of memory and storage space an algorithm needs to do its work
SQL [Basic SQL]
Structured Query Language—a set of commands for interacting with the data in a database
SQL clause [Basic SQL]
A part of an SQL statement that has a keyword specifying some action to take and something to act on or use
SQL expression [Basic SQL]
Part of an SQL statement that sets parameters within which to operate
SQL injection [Access control, compliance, and injection]
A technique in which a user enters a value that is part of an SQL command to alter the query that should be running and change how it works
SQL predicate [Basic SQL]
Part of an SQL statement that sets parameters within which to operate
stack [Stacks and queues; What are stacks?]
A data structure where the first entry stored is the last entry removed; you can think of it as a stack of mail, where you handle the top items (most recently put on the stack) first and the bottom items (least recently put on the stack) last.
static analysis tool [General development principles]
A tool that will analyze your code and highlight things such as duplicated or unnecessary code
static variable/method [Static attributes and methods]
A variable or method that is shared across all objects in the same class, also referred to as a class-level or shared variable/method
statically typed language [OOP support in different languages]
A language in which the type of all variables is known at compile time; Java and C++ are statically typed.
stored procedure [Indexes, transactions, and stored procedures]
In databases, a kind of program that’s stored in the database server; it contains a series of commands that you can then reference and use when interacting with the database.
string [Primitive types in memory]
A data type composed of a sequence of characters
string data type [Primitive types in memory]
A data type composed of a sequence of characters
structural patterns [Design patterns]
Design patterns describing how classes are designed, using inheritance, composition, and aggregation
subclass [Inheritance; Identifying inheritance situations]
A class that inherits from another class, also called a child class; for example, a Car is a subclass of a Vehicle.
superclass [Inheritance; Identifying inheritance situations]
The class from which another class inherits attributes and methods, also called a ; for example, a Vehicle is a superclass of a Car.parent class
support requirements [Defining requirements; FURPS+ requirements]
Requirements that determine how an application will be supported
supportability [FURPS+ requirements]
How well an application can be tested, extended, serviced, and installed and configured
surrogate key [Keys and unique values]
A field that is added to a table and has no natural key so that each row can have a unique value
synthetic key [Keys and unique values]
A field that is added to a table and has no natural key so that each row can have a unique value
T
table, associative (database) [Relationships]
A table that contains columns for foreign keys from the tables being associated
table (database) [Relational databases]
A collection of rows (representing individual entities) and columns (the attributes of those entities)
table, linking (database) [Relationships]
A table that contains columns for foreign keys from the tables being associated
third normal form [Third normal form]
A database requirement that it should not be possible to determine any value in a column from a field that isn’t a key
time complexity [What are algorithms?]
How efficient an algorithm is relative to the size of the input it is given
TIMESTAMP [Columns and data types]
A database type that captures and stores the date and time when a row is updated
transaction, atomic [ACID and transactions]
A transaction must be indivisible; pieces of it can’t be separated out.
transaction, consistent [ACID and transactions]
Whatever a transaction does, it must leave the database in a valid or consistent state.
transaction, database [Indexes, transactions, and stored procedures]
A group of queries or statements treated as a block of activities; if one of the components fails for any reason, the whole group of statements is not executed, and anything that is partially completed is rolled back.
transaction, durable [ACID and transactions]
The information changed in a transaction must actually get written to the database.
transaction, isolated [ACID and transactions]
While activities in a transaction are being completed, nothing else can make changes to the data involved.
tree [Introduction to tree data structures]
A collection of nodes in which a node might be linked to one, two, or more nodes
tree, binary search [Understand binary search trees]
A binary tree in which the left child must be less than its parent and the right child must be greater than its parent
tree, unbalanced [Understand binary search trees]
A tree in which there are more levels of nodes on one side than the other
U
UML [Unified modeling language (UML)]
Unified Modeling Language— a graphical notation for drawing diagrams to visualize object-oriented systems
unbalanced tree [Understand binary search trees]
A tree in which there are more levels of nodes on one side than the other
union (set) [Sets in Python 3]
Given two sets, the union is a new set that contains all the items in both sets; for example, the union of A, B, C and B, D, E is A, B, C, D, E.
unit test [Software testing]
Code that tests a specific part of a program
unordered list search [Unordered list search]
An algorithm that determines whether an item is in a list whose elements are in no particular order by examining each item in turn; its time complexity is linear, O(n).
unsigned data value [Numerical data types]
A numerical value that can only contain zero or positive values
usability [FURPS+ requirements]
How intuitive an app is; accuracy and completeness of documentation
use case diagram [Diagramming use cases]
A UML diagram showing the relationship between actors and the different use cases in which they’re involved
use case scenario [Identifying the scenarios]
A description of a goal that an actor can accomplish in a single encounter; this should focus on the user’s intention—what they really want to accomplish.
V
VARCHAR [Columns and data types]
A database data type that contains a variable-length character string
variable, static [Static attributes and methods]
A variable or method that is shared across all objects in the same class, also referred to as a class-level or shared variable/method
visibility [Creating class diagrams: Behaviors]
Whether a method or attribute is exposed to other classes; in general, this can be public (accessible by other objects) or private (not accessible by other objects).
W
WHERE clause [Narrowing query results]
An SQL clause that lets you choose only specific records or records that match given criteria
Y
YAGNI [General development principles]
“You ain’t going to need it”—a principle that says you should avoid trying to account for every possible variation of everything you could ever possibly see
acceptance criteria [Where to start?; Write acceptance criteria]
The criteria that must be fulfilled to satisfy a user story and be accepted by a project stakeholder
access control [Authorization and access control issues]
Rules specifying who can access which parts of a database
ACID [SOAP overview]
An acronym that refers to the requirement that database transactions be atomic, consistent, isolated, and durable
ACL [Authorization and access control issues]
Access control list—lists which users have what kinds of access to system resources
adapter design pattern [The Adapter pattern defined]
A pattern that is used to convert the interface of a class into another interface that clients expect
@Afterall [Test structure]
in JUnit, an annotation for code that is to be executed after all tests are completed
@AfterEach [Test structure]
In JUnit, an annotation for code that is to be executed after every test
aggregate object [Understanding the Iterator pattern]
In the iterator design pattern, a collection of objects, like an array or arrayList
agile [TDD and agile]
A software development methodology characterized by a collaborative approach with continuous improvement and delivery of usable software
allocation, memory [Why do we need to manage the memory?; Allocating memory]
Reserving a chunk of memory for a certain bit of information
API [Web services, APIs, and microservices]
Application programming interface—the communication and data sharing mechanism between two different applications or systems; these are typically more lightweight than a web service and may not depend on a protocol such as SOAP.
arena (Python) [Memory management in Python]
The largest bits of memory, containing sequential blocks of memory
argument (GraphQL) [The structure of GraphQL queries]
A set of key-value pairs attached to a specific field
assert statement [Writing test cases]
A statement in a programming language that ensures that a certain condition is true at a given point in a program’s execution; if the condition is not true, the program generates an error.
assertEquals [Assertions]
An assert statement that checks that the values of an actual and expected object are the same
assertions, type-specific [Assertion frameworks]
Assertions that allow the use of use tests that are specific to a particular data type; for example, when testing a String data type, one can use a test such as endsWith.
AssertJ [TDD tools and frameworks]
A third-party assertion framework that extends core xUnit libraries
assertSame [Assertions]
An assert statement that checks that the actual and expected object refer to the same place in memory
assertThrows [Testing exceptions]
An assert statement that checks that a given exception occurs
attack tree [Embrace security in testing]
A diagram or flowchart showing how a resource might be attacked
authentication [Secure web services]
Validating the identity of a client who is attempting to call a web service that accesses secure data
authorization [Secure web services]
Deciding which data an authenticated user can access or modify
automated [Make a test plan]
Part of a test plan that tells whether a test is automated or not
automatic memory management [Why do we need to manage the memory?]
A system of managing memory that is built into the programming language and runtime; Python, Java, and JavaScript take care of memory management for you.
automatic variables (C language) [The C way: Allocating memory]
Another name for local variables; they are automatically freed when no longer needed.
B
base object [Extending behavior with composition]
In the decorator design pattern, the object that has other objects “wrapped around it” by composition
@BeforeAll [Test structure]
in JUnit, an annotation for code that is to be executed before the test class instance is created
@BeforeEach [Test structure]
In JUnit, an annotation for code that is to be executed before every test
bind variables [Database issues]
Variables whose values are inserted into an SQL statement (as opposed to concatenating with user input strings)
black box testing [Box testing]
A form of box testing where you know the input and output but have no knowledge about the internals of an application
blacklisting [Input validation issues]
Looking for key patterns (such as <script> tags in HTML) and filtering them out
block (Python) [Memory management in Python]
The actual memory addresses that are going to be assigned when doing memory management
block starting symbol (C language) [The C way: Allocating memory]
Block starting symbol—a special area of memory in the C runtime for static and global variables that are un-initialized at compile time
body (SOAP) [SOAP overview]
A required part of a SOAP message that contains the actual XML data that the server transmits
bottom-up approach [What is test-driven development (TDD)?]
An approach to building software that involves taking small, incremental steps that are joined together to create the product
box testing [Box testing]
Testing performed so that there is a holistic approach
broken cryptographic routine [Cryptography issues]
A cryptographic algorithm that has been cracked, theoretically can be cracked, or has a flaw that has been identified
brute-force attack [Authentication and password issues]
An attack in which the malicious actor continuously submits many passwords with the hope of finding one that works
BSS [The C way: Allocating memory]
Block starting symbol—a special area of memory in the C runtime for static and global variables that are un-initialized at compile time
buffer overflow vulnerability [Memory management issues]
An attack that writes, for example, a 10-byte buffer with 13 bytes of data, which may cause code to be executed
bug bash [Have bug bashes]
A week in which team members focus entirely on fixing bugs; it is recommended to have these two to four times a year.
bug book [Document what you understand]
A document describing security bugs found in a system
bug priority [Triage bugs]
How fast a bug should be fixed
bug severity [Triage bugs]
How impactful a bug is to the business
bug triage [Triage bugs]
Classification of an application bug (problem) by its severity and the priority for fixing it
build phase [Get involved throughout the SDLC]
The part of the SDLC where the software is actually constructed
C
call stack [Stack memory]
A stack that keeps track of the order of function calls
certificate [Communication channel issues]
An electronic document that verifies the identity of its owner
changing functional declaration [Refactor to improve the design]
In TDD, changing the name of a method to make it easier to understand what it does
CI/CD [Embrace security in testing]
Continuous integration/continuous deployment—frequent rebuilding and delivery of a software system
client-side validation [Input validation issues]
Validating input in the browser or client application; this should be done in addition to, but not as a substitute for, server-side validation.
code smell [Refactor to improve the design]
Valid code that somehow doesn’t seem right; it doesn’t pass the “smell test”
compacting [Actual removing or sweeping]
Closing gaps in heap memory when removing objects
composition, vs. inheritance [Why HAS-A is better than IS-A]
A design principle that says, if you have a choice, use composition rather than inheritance because typically, composition leads to a more flexible design
concurrency [Heap vs. stack memory]
Multiple things happening at the same time
configuration [Configuration issues]
The feature flags, options, and other data elements that an application needs to run but that can be optionally modified at startup or runtime
containerized [Embrace security in deployment]
A situation in which software is packaged with all its dependencies and configuration information
convention [Writing test cases]
An unwritten rule that software developers are expected to follow; for example, in unit testing, a convention is to keep code and test cases separate. Another example: when writing Java, variable names by convention begin with lowercase letters; class names begin with uppercase letters.
copy, deep [Best practices with memory]
A copy of the object and its attributes, and their attributes, and so on; the data itself is copied.
copy, shallow [Best practices with memory]
A copy of an object reference; the data referred to is not copied.
CPU [What is memory?]
Central processing unit of a computer
cross-site scripting [Input validation issues]
An attack in which a bad actor injects a script (in a programming language) that is executed in the browser
CVE [Dependency issues]
Common Vulnerabilities and Exposures—a catalog of publicly disclosed security vulnerabilities
CWE [Dependency issues]
Common Weakness Enumeration—a listing of common software and hardware weaknesses with security ramifications (from https://cwe.mitre.org)
cyclic reference [Garbage collection]
Two objects that reference each other
D
dangling pointer [The C way: Deallocating and reallocating memory]
A reference to a memory area that has been deallocated
data segment (C language) [The C way: Allocating memory]
Data segment—an area of memory in the C runtime for initialized global and static variables
DBA [Database issues]
Database Administrator -- the person who manages a database. This may include configuration, security, updates, etc.
deallocation, memory [Why do we need to manage the memory?; Deallocating memory]
Releasing memory when information is no longer needed
decorator design pattern [Understanding the Decorator pattern]
A design pattern in which additional responsibilities are added to an object dynamically
deep copy [Best practices with memory]
A copy of the object and its attributes, and their attributes, and so on; the data itself is copied.
define phase [Get involved throughout the SDLC]
The part of the SDLC where requirements are defined for the developers; writing of specifications and acceptance criteria
DELETE operation (REST) [REST overview]
An operation to remove a resource
dependency graph [Dependency issues]
A document showing which software dependencies are vulnerable to an attack
dependent object [The Observer pattern defined]
In the observer design pattern, the “many” objects in a one-to-many relationship; for example, one publisher has many subscribers, and the subscribers are dependent objects.
deploy phase [Get involved throughout the SDLC]
The part of the SDLC where the product is released to the customer
design pattern, adapter [The Adapter pattern defined]
A pattern that is used to convert the interface of a class into another interface that clients expect
design pattern, decorator [Understanding the Decorator pattern]
A design pattern in which additional responsibilities are added to an object dynamically
design pattern, factory method [The Factory Method pattern]
A pattern that allows programmers to decouple the process of creating objects from the clients that use those objects; it defines an interface for creating an object but lets subclasses decide which classes to instantiate.
design pattern, iterator [Understanding the Iterator pattern]
A design pattern that provides a way to access the elements of an aggregate object sequentially without exposing its underlying representation
design pattern, observer [The Observer pattern defined]
A pattern that defines a one-to-many dependency between objects so that when one object changes state, all its dependents are notified and updated automatically
design pattern, strategy [What are design principles?]
A pattern that separates out an object’s behavior in a flexible and extensible way
design phase [Get involved throughout the SDLC]
The part of the SDLC where the team builds mockups and prototypes
design principle, open-closed [Understanding the open-closed principle]
A principle that says classes should be open for extension but closed for modification
design principle, single responsibility [The single responsibility principle]
A principle that says a class should have only one reason to change
design principles [What are design principles?]
General guidelines for developing programs, as opposed to design patterns, which are specific design solutions for common object-oriented programs
development sprint [Getting bugs fixed]
A specific block of time in which developers are to complete a set of goals; this is part of the agile development methodology.
DevOps [Roles and responsibilities]
Practices for integrating and automating development and information technology operations
DevSecOps [Break what you build]
A methodology for integrating and automating a system’s development, security, and operations
DoS [Security testing]
Denial of service (DoS)—an attack in which a bad actor uses automated scripts to flood a server with traffic so it cannot handle legitimate requests
DS [The C way: Allocating memory]
Data segment—an area of memory in the C runtime for initialized global and static variables
dummy object [Test doubles]
A test double object created just to make code compile
dynamic analysis [Implement best practices]
Analysis of run-time performance of a system: time and memory usage, etc.
dynamic memory allocation [Why do we need to manage the memory?; Allocating memory]
Memory allocation that occurs during runtime
E
endurance testing [Performance testing]
A form of performance testing done to make sure an application can handle the expected load over a long period of time
envelope [SOAP overview]
An XML file that contains the multiple parts of a SOAP message
error messaging, information disclosure through [Error handling issues]
A situation in which an error message provides information useful to an attacker, such a stack trace or an authentication error that tells that a username is valid but the password is not
error, out of memory [Out of Memory error]
An error that occurs when the system cannot allocate a requested memory block anymore
error, stack overflow [Stack memory]
An error that occurs when a program exceeds the size limit of stack memory
escaping references [Best practices with memory]
The situation when an object is accessed unintentionally through another function
expected result [Make a test plan]
Part of a test plan that describes what the outcome will be for a given result
extract function refactoring [Refactor to improve the design]
The technique of moving out a certain functionality to make a method’s implementation align with its intention
F
factory method design pattern [The Factory Method pattern]
A pattern that allows programmers to decouple the process of creating objects from the clients that use those objects; it defines an interface for creating an object but lets subclasses decide which classes to instantiate.
fake object [Test doubles]
A test double method that provides some functionality but is not production ready—it is better than having nothing at all.
faking it [TDD and agile]
In TDD, writing code only to pass the test and no more
fault (SOAP) [SOAP overview]
An optional part of a SOAP message containing information about any errors that might occur during message processing
field name (GraphQL) [The structure of GraphQL queries]
Each field represents a unit of data you are asking for.
fragmentation, heap [Deallocating memory]
The situation where gaps occur in the heap when memory is allocated and deallocated
free (C language) [The C way: Deallocating and reallocating memory]
A function that deallocates memory
functional declaration, changing [Refactor to improve the design]
In TDD, changing the name of a method to make it easier to understand what it does
G
garbage collection [Deallocating memory]
A process by which the runtime system keeps track of which items in memory are no longer needed and deletes them
GET operation (REST) [REST overview]
An operation to retrieve a resource
given [Write acceptance criteria]
Part of an acceptance criteria that specifies the precondition or beginning state
GraphQL [GraphQL overview]
A query language for APIs; it is a syntax that describes how to ask for data and is generally used to load data from a server to a client.
gray box testing [Box testing]
A form of box testing where scenarios examine the interaction between the outside and inside of the box; this includes such things as integration testing.
H
Hamcrest [TDD tools and frameworks]
A third-party assertion framework that extends core xUnit libraries
happy path scenario [Manual testing]
A scenario with a successful result
hasNext method [Using the Iterator pattern]
A method in the iterator design pattern that determines whether there are more items to iterate over in the aggregate object
HATEOAS [HATEOAS overview]
Hypermedia as the Engine of Application State—the principle that specifies that a RESTful API should provide enough information to the client to interact with the server.
header (SOAP) [SOAP overview]
An optional part of a SOAP message that contains message attributes
heap fragmentation [Deallocating memory]
The situation where gaps occur in the heap when memory is allocated and deallocated
heap memory [Heap memory]
A part of RAM used for storing values that need to be accessed throughout the entire application; it also holds larger values that might not fit in the limited stack memory.
I
infected file upload [File and I/O issues]
A file that a malicious actor uploads; the file contains some form of malware.
information disclosure through error messaging [Error handling issues]
A situation in which an error message provides information useful to an attacker, such a stack trace or an authentication error that tells that a username is valid but the password is not
inheritance [Revisiting inheritance]
A process for passing on attributes and methods from other existing classes to a new class
inheritance, vs. composition [Why HAS-A is better than IS-A]
A design principle that says, if you have a choice, use composition rather than inheritance because typically, composition leads to a more flexible design
initialization vector [Cryptography issues]
A random (or pseudorandom) number used to prevent malicious actors from repeating or mimicking previous valid transactions
injection attack [Input validation issues]
An attack in which a bad actor introduces input that is executed as code
input validation issues [Input validation issues]
Security problems caused by improper validation of input, allowing malicious input into the system
integration testing [Integration testing]
Testing that focuses on the interaction between components at lower layers of the application, seeing how the system reacts to certain actions; these tests have some knowledge of how the system works internally.
interface (object-oriented) [Trying interfaces]
A structure that declares a set of methods for a class to implement; the methods are not implemented—the method signatures specify a capability for a class to implement. Every class that implements the interface must provide a body for all the methods.
iteration pattern as language feature [The Iterator pattern as language feature]
Language features that hide an iterator design pattern behind the scenes and make it easy to iterate through collections of values; in Java, this is the enhanced for; in Python, it is the for/in statement; in JavaScript, it is the for/of statement.
iterator design pattern [Understanding the Iterator pattern]
A design pattern that provides a way to access the elements of an aggregate object sequentially without exposing its underlying representation
iterator object [Understanding the Iterator pattern]
In the iterator design pattern, an object that knows how to iterate over an aggregate object
J
Java EE [Create web service]
Java Enterprise Edition—a version of Java with specifications for enterprise capabilities such as web services and distributed computing.
JAX-WS [Create web service]
Java API for XML-Based Web Services
Jira [Report bugs]
A tool used for tracking features, user stories, tasks, and bug reports
JSON [Benefits of REST]
JavaScript Object Notation. The json.org website describes it as “a lightweight data-interchange format. It is easy for humans to read and write. It is easy for machines to parse and generate. It is based on a subset of the JavaScript Programming Language...”
JUnit [xUnit and jUnit]
The xUnit framework, translated to Java
L
language transparency [Advantages of web services]
The capability to have a web service in one language with the client written in a totally different language; they communicate through a common language, such as XML or JSON.
latency [Considerations of web services]
The amount of time it takes once a request is made to receive a response
latest result [Make a test plan]
Part of a test plan that gives the most recent result of executing a test (pass or fail)
load testing [Performance testing]
Testing that checks an application’s ability to perform under anticipated user loads; the objective is to identify the maximum operating capacity of an application.
log aggregation attack [Logging and output issues]
An attack in which someone with access to system logs can find sensitive information in error logs
loose coupling (REST) [Benefits of REST]
Systems designed so that changes and enhancements to web services don’t break clients that are already using them
loosely coupled [Understanding the observer pattern; The Observer pattern and loose coupling]
A situation in which objects interact with one another but don’t know a lot about each other
M
main memory [What is memory?]
Analogous to human short-term memory; when you shut down a computer, the main memory gets erased. This is called volatile.
malloc (C language) [The C way: Allocating memory]
A function that allocates heap memory
man in the middle [Communication channel issues]
An attack in which a bad actor intercepts, and possibly alters, the communication channel between two parties
manual memory management [Why do we need to manage the memory?]
A system of managing memory in which the developer has to allocate and deallocate memory; this is the way C and C++ work.
manual testing [Manual testing]
Testing that follows the steps as a user performing workflows in the application; its goal is to uncover any issues in application functionality and usability.
matcher [Assertion frameworks]
In Hamcrest, a predicate (condition) that returns true if an object matches what the condition specifies
Maven [What you should know]
A framework for building Java applications
memory allocation [Why do we need to manage the memory?; Allocating memory]
Reserving a chunk of memory for a certain bit of information
memory allocation, dynamic [Why do we need to manage the memory?; Allocating memory]
Memory allocation that occurs during runtime
memory allocation, static [Why do we need to manage the memory?; Allocating memory]
Memory allocation that occurs before a program is executed
memory deallocation [Why do we need to manage the memory?; Deallocating memory]
Releasing memory when information is no longer needed
memory, heap [Heap memory]
A part of RAM used for storing values that need to be accessed throughout the entire application; it also holds larger values that might not fit in the limited stack memory.
memory leak [Garbage collection]
A situation where memory should be deallocated but has not and therefore cannot be reached anymore
memory management [Why do we need to manage the memory?]
The allocation and releasing of memory
memory management, automatic [Why do we need to manage the memory?]
A system of managing memory that is built into the programming language and runtime; Python, Java, and JavaScript take care of memory management for you.
memory management, manual [Why do we need to manage the memory?]
A system of managing memory in which the developer has to allocate and deallocate memory; this is the way C and C++ work.
memory profiler [Best practices with memory]
A program that lets you see how memory is used when a program runs
memory, stack [Stack memory]
A stack that stores the variables created by functions; when entering a function, memory is allocated on the stack. When the function is done, the stack memory is deallocated.
microservice [Web services, APIs, and microservices]
Fully contained, individual components that communicate with each other in calling clients
mob testing session [Have bug bashes]
A one-hour interval when team members get together to test particular features in an application
mock [Mocking]
An object that simulates the expected behavior of some external dependency (as opposed to its state)
mocking framework [Mocking]
A framework that complements xUnit and can be integrated into the regular TDD setup
Mockito [Mocking]
An API that is the most popular mocking framework among Java developers
multi-threading [Memory management in Python]
An approach to writing code that executes multiple threads (tasks) concurrently
mutation (GraphQL) [The structure of GraphQL queries]
A GraphQL operation for modifying server-side data
N
next() method [Using the Iterator pattern]
A method in the iterator design pattern that retrieves the next item in the aggregate object
nonce [Cryptography issues]
A random (or pseudorandom) number used to prevent malicious actors from repeating or mimicking previous valid transactions
O
observer design pattern [The Observer pattern defined]
A pattern that defines a one-to-many dependency between objects so that when one object changes state, all its dependents are notified and updated automatically
on-the-wire attack [Communication channel issues]
An attack on a communication channel in which the bad actor has access to the network of either the client or server
open-closed design principle [Understanding the open-closed principle]
A principle that says classes should be open for extension but closed for modification
OpenAPI [Document an API]
A standard, language-agnostic interface to HTTP APIs
out of memory error [Out of Memory error]
An error that occurs when the system cannot allocate a requested memory block anymore
OWASP [Configuration issues]
Open Worldwide Application Security Project —described by their website as “a nonprofit foundation that works to improve the security of software.”
P
partial failure [Considerations of web services]
The condition in which a component like a server or network fails to respond to a request
password hashing algorithm [Authentication and password issues]
An algorithm that encrypts a password
pen test [Break what you build]
penetration test—a simulated attack on a system to evaluate its security
performance testing [Performance testing]
Testing to benchmark how a system performs under load
plan phase [Get involved throughout the SDLC]
The part of the SDLC where business requirements and use cases are gathered from the customer
pointer (C language) [The C way: Allocating memory]
A reference to a memory address where a value is stored
POJO [Create web service]
Plain old Java object—an object that has no special restrictions beyond those imposed by the Java programming language.
polymorphism, replace conditional with [Refactor to improve the design]
In TDD, a more complex refactoring technique requiring changes at the class level
pool (Python) [Memory management in Python]
A subdivision of an arena containing blocks of memory of a specific same size
POST operation (REST) [REST overview]
An operation to create a resource
Postman [Consume a RESTful API via Postman]
A tool used to test an API
profiler, memory [Best practices with memory]
A program that lets you see how memory is used when a program runs
PUT operation (REST) [REST overview]
An operation to update a resource
Q
QA [What is quality assurance?]
Quality assurance—a systematic process used to determine whether a product meets specifications
QA deliverables [Create a test strategy]
Part of the test strategy that describes what QA will provide to the team; this may include test plans for each feature, issues reported for bugs, and a release process document.
quality assurance [What is quality assurance?]
Quality assurance—a systematic process used to determine whether a product meets specifications
query document [The structure of GraphQL queries]
A string you use in GraphQL that is sent to the server to process and request data
query (GraphQL) [The structure of GraphQL queries]
Part of the GraphQL type system that allows you to get information about specific fields from objects
R
rainbow table [Cryptography issues]
A precomputed table of results of a cryptographic hash algorithm
RAM [What is memory?]
Random-access memory; see main memory.
range-act-assert pattern [Test structure]
A TDD test structure that arranges the elements required to test, acts on the elements, and then asserts that the result is as expected
realloc (C language) [The C way: Deallocating and reallocating memory]
A function that re-allocates memory
red-green-refactor cycle [The iterative red-green-refactor cycle]
The process of taking a failing test case to writing the code to pass the test case; this may involve refactoring to, for example, get rid of test cases that are no longer necessary.
refactoring [What is test-driven development (TDD)?; Refactor to improve the design]
Improving the internal structure of code to make it easier to understand or modify without changing its external behavior
refactoring, extract function [Refactor to improve the design]
The technique of moving out a certain functionality to make a method’s implementation align with its intention
reference counter [Garbage collection; Memory management in Python]
A counter that tells how many references exist to an object on the heap
references, escaping [Best practices with memory]
The situation when an object is accessed unintentionally through another function
replace conditional with polymorphism [Refactor to improve the design]
In TDD, a more complex refactoring technique requiring changes at the class level
resolver (GraphQL) [The structure of GraphQL queries]
Part of the GraphQL type system that is responsible for getting data to the client
REST [Web services overview; REST overview]
Representational State Transfer—a service that uses a web protocol, HTTP (HyperText Transfer Protocol), to access resources
RESTful API [REST overview]
An API that uses REST for communicating between client and server
risk register [Document what you understand]
A document detailing a system’s security risks and how to mitigate those risks
ROM [What is memory?]
Read-only memory—slower than RAM but is non-volatile and doesn’t disappear when the computer is shut down; usually used for the logic needed to start a computer and operating system
S
sad path scenario [Manual testing]
A scenario that returns errors or does not have results
salt [Cryptography issues]
Random data that is part of a cryptographic hash; this prevents bad actors from building tables of cryptographic hash results.
sandboxing [File and I/O issues]
Running a program in its own environment, separate from other programs
scenario [Make a test plan]
Part of a test plan that explains the steps or actions that will be executed
scenario, happy path [Manual testing]
A scenario with a successful result
scenario, sad path [Manual testing]
A scenario that returns errors or does not have results
schema (GraphQL) [The structure of GraphQL queries]
Part of the GraphQL type system that defines a set of types
scope of testing [Create a test strategy]
Part of the test strategy that describes what types of tests exist for this project, which tools are used to write each type, and who owns them
scripting attack [Input validation issues]
An attack in which a bad actor injects a script (in a programming language) that is executed in the browser
scrum [Embrace security in design]
A team collaboration approach to software design
SDLC [Embrace security in design; Get involved throughout the SDLC]
Software development life cycle—a process that produces high-quality software in the shortest amount of time; it includes detailed steps for how to effectively develop, change, and maintain a software system.
secondary storage [What is memory?]
Analogous to human long-term memory. This storage persists even when the computer is shut down. An example is files and programs on your hard drive. This is called non-volatile.
secret storage service [Internal data management issues]
A way to store passwords or other authentication information securely
security testing [Security testing]
Testing performed to reveal flaws or vulnerabilities that can be exposed by users, causing an app to behave in unexpected ways or stop it from working
selection set [The structure of GraphQL queries]
A set of key-value pairs attached to a specific field
server-side validation [Input validation issues]
Validating user input when it is received by the server; this should always be done, and be done before the input is processed further.
service, denial of [Security testing]
Denial of service (DoS)—an attack in which a bad actor uses automated scripts to flood a server with traffic so it cannot handle legitimate requests
session [Session management issues]
Data that contains application state; it may be necessary when using HTTP, which is a stateless protocol.
session fixation attack [Session fixation]
An attack in which a bad actor uses a pre-authentication token that was not updated to a secure token after logging in
session hijacking [Session hijacking]
A vulnerability caused when a bad actor can predict a session token and use it to access a user’s session data
set up-test-tear down pattern [Test structure]
A TDD test structure that sets up a fixture, does the test, and then destroys any older objects or re-initializes any other variables modified in previous tests; this can sometimes make test cases run faster.
shallow copy [Best practices with memory]
A copy of an object reference; the data referred to is not copied.
single responsibility design principle [The single responsibility principle]
A principle that says a class should have only one reason to change
soak testing [Performance testing]
A form of performance testing done to make sure an application can handle the expected load over a long period of time
SOAP [Web services overview; SOAP overview]
Simple Object Access Protocol—a service that uses XML (Extensible Markup Language) to send messages
SoapUI [Consume a SOAP web service via SoapUI]
A tool for testing SOAP web services
source control [Implement best practices]
Software that helps keep track of changes and updates to the source code for a project
spoofing attack [Communication channel issues]
An attack in which a bad actor presents false data on the network; for example, giving a false IP (Internet Protocol) address
spy [Test doubles]
A test double variable used to check that, for example, some event has occurred or count how many times something has happened
SQL injection [Input validation issues; Security testing]
A technique in which a user enters a value that is part of an SQL command to alter the query that should be running and change how it works
SSL [Communication channel issues]
Secure Sockets Layer—a now-deprecated predecessor of TLS
stack, call [Stack memory]
A stack that keeps track of the order of function calls
stack memory [Stack memory]
A stack that stores the variables created by functions; when entering a function, memory is allocated on the stack. When the function is done, the stack memory is deallocated.
stack overflow error [Stack memory]
An error that occurs when a program exceeds the size limit of stack memory
stateless [REST overview]
The condition in which a server will not remember or store any state about the client that made the call
static analysis [Implement best practices]
Analysis of the source code for such things as performance, memory usage, unused variables, etc.
static memory allocation [Why do we need to manage the memory?; Allocating memory]
Memory allocation that occurs before a program is executed
strategy design pattern [What are design principles?]
A pattern that separates out an object’s behavior in a flexible and extensible way
stress testing [Performance testing]
A form of performance testing that tests an application under extreme workloads; the objective is to identify the breaking point of an application.
stub [Test doubles]
A test double method that returns a value, feeding desired inputs into the tests rather than reflecting real behavior
subject object [The Observer pattern defined]
In the observer design pattern, the “one” object in a one-to-many relationship; for example, one publisher has many subscribers, and the publisher is the subject object.
subscription (GraphQL) [The structure of GraphQL queries]
A GraphQL operation that allows for notification of changes to data in real time
sweeping [Actual removing or sweeping]
The actual removal of objects on the heap during garbage collection
T
TDD [Small steps to great things]
Test-driven development
test-code-refactor [What is test-driven development (TDD)?]
A development cycle in which a programmer first writes a failing test case and then writes the code that passes that test case
test double [Test doubles]
A proxy to represent an external dependency when doing tests in TDD
test-driven approach [What is test-driven development (TDD)?]
An approach to building software in which, given requirements, a programmer writes a set of unit test cases that will drive the rest of development
test fixture [Test structure]
In TDD, a block of code that represents a certain state of the system for test cases to run
test management [Create a test strategy]
Part of the test strategy that describes what resources are needed to carry out testing in terms of tooling, environments, supported platforms and versions, and test data
test phase [Get involved throughout the SDLC]
The part of the SDLC where QA has the major role: testing that the software meets specifications
test plan [Make a test plan]
A QA plan for testing a feature
test strategy [Create a test strategy]
A plan that describes how a product will be tested; it usually consists of an introduction, references (relevant project links), QA deliverables, test management, and scope of testing.
testing, black box [Box testing]
A form of box testing where you know the input and output but have no knowledge about the internals of an application
testing, box [Box testing]
Testing performed so that there is a holistic approach
testing, endurance [Performance testing]
A form of performance testing done to make sure an application can handle the expected load over a long period of time
testing, gray box [Box testing]
A form of box testing where scenarios examine the interaction between the outside and inside of the box; this includes such things as integration testing.
testing, integration [Integration testing]
Testing that focuses on the interaction between components at lower layers of the application, seeing how the system reacts to certain actions; these tests have some knowledge of how the system works internally.
testing, load [Performance testing]
Testing that checks an application’s ability to perform under anticipated user loads; the objective is to identify the maximum operating capacity of an application.
testing, manual [Manual testing]
Testing that follows the steps as a user performing workflows in the application; its goal is to uncover any issues in application functionality and usability.
testing, performance [Performance testing]
Testing to benchmark how a system performs under load
testing, scope of [Create a test strategy]
Part of the test strategy that describes what types of tests exist for this project, which tools are used to write each type, and who owns them
testing, security [Security testing]
Testing performed to reveal flaws or vulnerabilities that can be exposed by users, causing an app to behave in unexpected ways or stop it from working
testing, soak [Performance testing]
A form of performance testing done to make sure an application can handle the expected load over a long period of time
testing, stress [Performance testing]
A form of performance testing that tests an application under extreme workloads; the objective is to identify the breaking point of an application.
testing, UI automation [UI automation testing]
Testing of a user interface (UI) accomplished by running scripts rather than manually entering input
testing, white box [Box testing]
A form of box testing that focuses on the internals of the application and what is happening at the code or system level
text segment (C language) [The C way: Allocating memory]
An area of memory for compiled code that is being stored
then [Write acceptance criteria]
Part of an acceptance criteria that specifies the expected outcome of a scenario
thread [Heap vs. stack memory]
A part of execution within a concurrent application; every thread has its own stack.
TLS [Communication channel issues]
Transport Layer Security—a cryptographic protocol on the transport layer of the communications network
token [Session management issues]
A unique identifier generated at the start of a session
top-down approach [What is test-driven development (TDD)?]
An approach to building software that starts from the “big picture” and breaks it down into smaller steps
triage, bug [Triage bugs]
Classification of an application bug (problem) by its severity and the priority for fixing it
Truth [Assertion frameworks]
A third-party assertion framework that extends core xUnit libraries
two-way certificate pinning [Internal data management issues]
Having a client and server authenticate each other
type-specific assertions [Assertion frameworks]
Assertions that allow the use of use tests that are specific to a particular data type; for example, when testing a String data type, one can use a test such as endsWith.
U
UI automation testing [UI automation testing]
Testing of a user interface (UI) accomplished by running scripts rather than manually entering input
unit test [What is test-driven development (TDD)?]
Code that tests a specific part of a program
unit testing [Implement best practices]
Tests for individual units (parts) of source code
update method [The Observer pattern defined]
In the observer design pattern, this is a method that the subject object calls to update its dependent objects.
URI [REST overview]
Uniform Resource Identifier, accessed by web links
use case [Where to start?]
An informal description, written in a natural language, that describes a feature of a software product
user persona [Embrace security in testing]
A fictional character representing a user of a system
user story [Where to start?]
An informal description, written in a natural language, that describes a feature of a software product
V
virtual memory [What is memory?]
Secondary storage used to manage data that cannot fit into main memory
W
waterfall [Embrace security in design]
A top-down approach to software design
web service [Web services overview]
A service that allows different systems to talk to each other over the internet
when [Write acceptance criteria]
Part of an acceptance criteria that specifies the input or action of a scenario
white box testing [Box testing]
A form of box testing that focuses on the internals of the application and what is happening at the code or system level
whitelisting [Input validation issues]
Ensuring that input matches a specific pattern before being accepted
WSDL [SOAP overview]
Web Services Description Language—a language used to give the client information on what services a web service can offer
X
XSS [Input validation issues]
An attack in which a bad actor injects a script (in a programming language) that is executed in the browser
xUnit [xUnit and jUnit]
A framework for unit testing
Z
zero-day [Memory management issues]
A vulnerability that was previously unknown; the developers have had “zero days” to fix it before it is exploited.


Large language model:
-


Introduction to open source:
-"Open source" is a way of working on a project that relies on collaboration, decentralisation,
and access.
Open source software makes source code available to users and invites a community of technical
and non-technical contributors to build on and improve it.
-open source software projects are built and improved by a wide range of
contributors, including developers, designers, architects, editors, writers, and students.
-OSS -code published publicly
     -created & maintained by collaborative virtual community
     -anybody allowed to use, modify, contribute back
     -anyone run software for any purpose
     -anyone can see source & understand how software works
     -enhancement, bug fixes, solutions comes from anywhere, even outside organisation
     -collaboration b/w groups towards same goals
     -not always free of cost, creator still need to grant access to contribute
-community, contributors, committers (folks who review & approves changes to code base
-code of conduct & contributing guidelines
-upstreams (forms foundation of source)
-downstream (programmer working stream)
-principles provided by Red-hat provides transparency, collaboration, deliver early & often, 
 inclusion, community
-CSS (closed source software) -propriety, not distributed to public, encrypted & exclusive, 
 restricted, protected
-licenses -GPL, LGPL, BSD 
-learning in open, access mentors, building eminence, hybrid in new cloud, more job option
-speed, potential cost saving, avoid vendor lock-in, interact directly with user, become aware of  
 project roadmap, keep pace with competitor, increase software security & reliability, influence 
 direction of technological development
-github.com -code hosting platform for version control & collaboration
-github.com/topics/<topic>
-github.com/explore
-up-for-grabs.net
-goodfirstissue.com
-README -text file, first file, most visible in repository, introduces & explains project, setup 
         instructions, links of more in-depth
-contribution guideline -understand approach participation in project, provides templates for 
                         bugs & features, submitting pull request
-list work needed by maintain 
-code of conduct (COC) -rules & expected behaviour, enforcement, positive, healthy, respected
-licence -MIT, Apache 2.0, ISC, BSD
-talk to manager, take training, sign contributor license agreement (CLA)
-ways to contribute -code -report fix bug 
                          -add new feature
                          -updated code
                          -review code
                    -documentation -writing & updating
                                   -fixing typos, grammar mistakes, formatting errors
                                   -creating examples & tutorials
                                   -translating documentation 
                    -advocate -write blog posts
                              -sharing updates on social media 
                              -giving talks & workshops
                    -communities -answer question on forums & mailing lists 
                                 -helps moderate discussion boards & conversation channel
                                 -organise workshops or meet-ups about project
-start contributing -find good 1st issues, attentive regular meetings, join sprints
                    -github.com/<owner>/<repository>/contribute
                    -connect with others, contribution sprints, day coding nights, conferences 
-best practices -understand community,...
-To add an SSH key to GitHub, you need to copy the SSH key that you generated in the previous lab
-cat ~/.ssh/id_rsa.pub | clip


-
                    

Machine learning with python:
-


Prisma:
-open source tool that makes it fun to work with database
-provides too much low level control 
-has its own Chema declarative (writing schema to write your data & relationship in human readable way)
-schema can be automatically inferred from any existing database
-schema converting into type definition allowing 
-code is more concise than writing in SQL
-


Pointers:
-each byte of memory has address (layer that sit son top of every game)


[always remember you can't compete with AI you can only use AI & grow even further]
[never be afraid of AI & don't listen to other people Bullcrap advices just remember when new technology comes then new opportunity comes]
[train your brains to build new algorithm]


Devin:
-project manager can give some requirement to Devin & respond by creating plan of action --> goes to web to get some API documentation
-Devin is already smashing other tools on software engineering benchmark
-can also train its own AI model


CSS:
-Flex-box -flexible way of using items in rows & column
	  -flex container has control of how it flex children are placed (rows & column direction)
	  -main axis = horizontally & cross axis = vertically
-animation -change from 1 css file to another per dimension of time
	   -every animation has 2 states starting point & ending point 
	   -tween animation 
	   -linear timing function
	   -multi dimension arrays of list 
-display: flex; --> creates flex container
-33%, 33%, 33% ---> 1:1:1
-.purple-item {flex: 2;} ---> double size of other ---> 1:2:1 (25%,50%,25%)
-justify-content: flex-start;
-justify-content: flex-end;
-align-items: centre;
-justify-content: center;
-x-direction: column;
-justify-content: space-evenly;
-* { color: red; }  (universal selector)
-h1 { color: blue; }  (element selector)
-.class-name { color: green; }  (class selector)
-#id-name { color: orange; }  (ID selector)
-input[type="text"] { color: black; }  (select input of type text)
-a[href*="google"] { color: blue; }  (links containing "google")
-div p { color: red; }  (sescendant Selector)
-div > p { color: red; }  (direct child selector)
-div + p { color: red; }  (adjacent sibling)
-div ~ p { color: red; }  (general sibling)
-margin: 10px;  (all sides)
-margin: 10px 20px;  (top & bottom | left & right)
-margin: 10px 15px 5px 0;  (top | right | bottom | left)
-padding: 10px;
-padding: 5px 10px;
-border: 2px solid black;  (Thickness | style | colour)
-border-radius: 10px;  (rounded corners)
-box-sizing: border-box;  (includes padding & border in width/height)
-font-family: 'Arial', sans-serif;
-font-size: 16px;
-font-weight: bold;
-font-style: italic;
-text-align: center;
-text-transform: uppercase;
-letter-spacing: 2px;
-line-height: 1.5;
-word-spacing: 5px;
-color: #ff5733;  /* Text color */
-background-color: black;
-background-image: url('image.jpg');
-background-size: cover;  (cover | contain | auto)
-background-repeat: no-repeat;
-background-position: center center;
-position: static; (default)
-position: relative; (move relative to itself)
-position: absolute; (positioned inside nearest relative parent)
-position: fixed; (sticks to viewport)
-position: sticky; (sticks on scroll)
-top: 10px;
-left: 20px;
-display: flex;
-justify-content: center; (align items horizontally)
-align-items: center; (align items vertically)
-flex-direction: row; (row | column)
-flex-wrap: wrap;
-gap: 10px;
-display: grid;
-grid-template-columns: repeat(3, 1fr); (3 equal columns)
-grid-template-rows: auto;
-gap: 10px;
-transform: scale(1.2); (scale up)
-transform: rotate(45deg); (rotate)
-transform: translateX(10px); (move horizontally)
-transition: all 0.3s ease-in-out; (smooth animation)
-@keyframes bounce {
  0% { transform: translateY(0); }
  50% { transform: translateY(-10px); }
  100% { transform: translateY(0); }
}
.element {
  animation: bounce 1s infinite;
}
-box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.5);
-text-shadow: 2px 2px 5px red;
-filter: blur(5px); (blurs element)
-clip-path: circle(50%); (circular cropping)
-mix-blend-mode: multiply; (cool blending effect)
-opacity: 0.5; (transparency)


Programming tools:
-webkit inspector -developer tool build into old vanilla web browser
-Work-flowy
-koala 
-source-tree


Discord:
-chat service dedicated for gamers
-creating channels, groups in discord
-sharing knowledge, memes, discussion board
-chatroom culture
-IRC (internet relay chat) (separate chatting protocol)
-being an admin is full of responsibility


Spreadsheet Excel:
-


[whenever you see that other technology or branch has more opportunities feel free to shift your career at the end you are an engineer]


BootStrap:
-most popular front-end framework
-20% of all websites are madly bootstrap
-development speed
-responsiveness
-provides cross browser compatibility
-large community
-customisable
-emmet create boiler plate code
-Grid system 
-


Vs code
Renewable energy
Hiring managing interview
Behavioural job
Coding & system design interview


Animation:
-light novel(original source) --> manga --> anime/games/live action movies
-manga 
-script --> 2D animation (traditional animation) --> 24 minutes episode has 15000 frames --> key animators & young animators
-visual FX, sound FX, editing team, voice acting team
-3D & 2D merge


Clean code:
-gives you feeling of satisfaction
-
-overly descriptive comments even if it looks self explanatory
-some comments are used to automatically generate website (code of website picked by website)
-not dockerising your application
-good project -how quickly can new contributor setup project
              -how quickly can they make change & test them locally
-async APIs
-not having env files (single top-level env file)
-not getting rid of unused code
-long function
-new contributor comes (he/she should understand what is inside your code)
-eating up errors (instead use promises)
-language specific packages
-CI/CD for test & lints (add basic test throughout your code base)
-


Rust:
-memory saved complied programming language
-delivers high level simplicity with low level performance
-popular choice for building system
-used in game engines, operating systems, databases
-excellent choice for targeting web assembly
-most loved programming language
-traditionally high level languages provides garbage collector to nerf your control over memory management
-no garbage collector but secures by borrowing & ownership (by default every variable in rust is immutable which allow values to be used in stack memory which has minimal performance overhead)
-variables with unknown size at compile time stored in heap memory 


[Jobs will never end those who says there is no job in this field is because they themselves did not get job]
[In corporate world there is fresher's tag, get rid of that tag as soon as possible]


Assembly Language:
-low level programming language to simplify instruction fed into computer CPU
-human readable abstraction on top of machine code (don't have to count manually 1s & 0s)
-assembly still used to access bare metal hardware & to address low level performance issue, often on device drivers, & embedded system
-assembler


DevOps topics:
-devOps = can be termed as concept, collection of tools, philosophy, culture
-skills - operating system, linux (knowledge of commands)
	-good knowledge about user-management, chmod, user add
	-virtual machine knowledge & cloud offering by different companies
	-automations by bash scripting & shell scripting (bash, sh, zsh) (golang) (cloud native)
	-nginx, apache web server, tunneling concepts
	-reverse proxy, normal proxy, traffic
	-python is very useful
	-logic building is important
	-basic networking is important (debugging DNS, IP address, system communication, ISP)
	-git & GitHub (push, pull, clone, fork, pr, issue, beaching strategy, rebase, conflict resolving, GitHub actions, advance GitHub)
	-99% time you will work on cloud
	-network, compute, storage (AAS, PAS, SAS)
	-GCP, AZUR, AWS (big 3)
	-CI/CD, IAC
	-DO, tivo, scalway
	-docker (containerising tool), virtualisation, OCI, CRI, google registry
	-kubernetes
	-pipeline (CI/ CD)
	-Jenkins 
	-modern CI
	-flux, argo
	-terraform 
	-monitoring, security (devsecobv)
	-metric, logs, traces, profiling
	-chaos engineering & policy engine
	-CICD, IAC, troubleshooting, observatory


Turing complete:
-automatic machine
-infinitely long piece of tape divided into sub cells that can hold 1 & 0
-tape runs through machine that can read & write data in 1 cell at time
-support loops & conditional branching
-compute any program as long as you have memory


Database Paradigms:
-key-value = structured like javascript object or python dictionary (every key is unique & points to some value) (Set command & Read command) (data modelling options are limited) (millisecond fast)
-wide column = each column family holds set of ordered rows & possible to group data together (does not have schema & can handle unstructured data & CQL language) decentralised & scale horizontally
-document = document oriented database mangoDb, fire-store, dynamoDB, couchDB (each document is container for key value pair) (unstructured & don't required schema) (field within collection can be indexed & organised into logical hierarchy) (you are encourage to stress data in single document) (writing & updating data can be very complex) (best for most apps, games, IOT) (not ideal for graph)
-Relational database = each part has serial number for unique identification & organising data in smallest form
-graph = 


Git pull request:
-pull = way to submit contribution to another developer repository
-fork = maintains link to original upstream repo (you can pull changes when necessary)
-clone = download remote repo t your local system
-git branch Ankur (creating new branch that describe the changes that you are going to make)
-git checkout Ankur (to move into that branch)
-git push origin (origin which is remote repository on GitHub)
-alway follow contribution guidelines
-keeping sync with original by adding remote links to upstream repo
-git fetch 


Getting selected:
-resume is most important thing
-referral helps a lot
-experience a lot
-doing your best to impress 
-contributions in stack overflow
-rankings & number of problems in leet code
-CTOs don't read your resume just scan your resume
-concepts: closures, scope, call binder, set time, refactoring your code, security concerns on our own code, throttling & d-bounce, finding output of given code
-good companies have good & supportive interviews
-fundamentals should be strong
-css should be strong, box model
-problem solving is very important & how you find out solution
-road side coder, MDN docs, web performance document
-be energetic & be passionate
-approaching founders & CTOs of companies & startups
-skills are must
-portfolio is good
-be open to others to roast you & ask for feedback
-ask for help & don't be ashamed


Bash:
-command line interpreter for interacting with computers from command line
-also known as shell
-surrounds operating system kernel to hid its intricate details
-revolutionary concepts because that time they used punch cards
-bash also allows us to write script


C++:
-compiles down to machine machine code
-handle memory manually
-support multiple inheritance 
-includes very powerful & more complex & difficult to master template meta language
-high performance like C & object oriented With classes
-superset fo C language
-zero overhead abstraction, polymorphism, encapsulation
-used to implement much more low level infrastructure like language complier & virtual machine
-provides low level memory & hardware control like c but high level abstraction like classes & smart 
 pointers c++ makes it harder
-installing compiler like gcc & clang
-class is just blue print of an object
-inside class you can attribute & method
-constructor & destructor when class is created or destroyed


[Notes making will always help you]


C#:
-compiles down to CLR, which ASP.NET interprets (roughly), pointed out in comments
-JIT compiles not interprets
-runs in virtual machine, memory management handled automatically
-does'nt have multiple inheritance of interface
-has grábate collector
-designed as modern c like object oriented programming language
-used to build desktop apps with .NET core
-cross platform mobile apps with XAMARIN
-making web application with blazer 
-video game with unity
-open source 
-C# code --> compiled into intermediate language --> interpreted by common language runtime (can be 
 executed by machine code on any operating system without need to recompile)
-primary object oriented programming language but also supports functional lambda expressions


C vs C++:
-C -


Red vs blue vs purple team:
-red -offensive security
     -ethical hacking
     -exploiting vulnerabilities
     -penetration testing
     -black box testing
     -social engineering
     -web app scanning
-blue -defensive security
      -infrastructure protection
      -damage control
      -incident response
      -operational security
      -digital forensics



Unity:
-cross platform game engine to build 2d & 3d experiences (created in Denmark)
-interactive simulations & animation 
-game engine is written in C++
-allows developer to write their code in more approachable C sharp & provides powerful GUI 
-every game object has variety of components like mesh (actual shape), mesh render (applying 
 materials & lighting to an object), physics component (rigid body, colliders that stimulate things 
 like gravity & collision in real world) 


Python:
-high level interpreted programming language
-easy to learn & practical for many serious projects
-emphasis on readability of code
-commonly used for building server side applications
-explicit is better than implicit
-code is often organised into notebooks (where individuals cells can be executed than documented in 
 same place)
-.py or .ipynb
-dynamic language so type annotations are not required 
-indentation is very important in python
-many frameworks & wrappers for many high performance low level packages like OpenCV
-pip package manager


Spamming in open source:
-spam PR & never follow anyone blindly
-never play with other repository & do your playing with your own repository
-if you want to seriously contribute & meaningful contribution only then raise pull request
-sometimes readme.md file changing is useless 


Content creation:
-blogging (personal & professional)
-you can also refer to your own blogs to know any concept & review
-professional blog -neutral language
		  -diagrams added, codes in snippets, starting & ending
		  -adding detailing
-content writing can be good option to earn money
-


[Git access token]
[Bluehost]


SVG Animations with CSS:
-Scalable vector graphics = uses geometry & maths instead of jpg, png, pixels formate
-integrating css for styling
-animation & key frames & which element they affect
-Figma to seeding graphics (draw on smallest frame possible)
-Chrome Animation Inspector
-Drawing Groups
-Duotone CSS Variables
-Transition Animations
-JS events
-Keyframe Animations
-Animation Staggering


[be so skilled that other person will refer you without thinking twice]
[be so skilled that other you don't have to chase company but company will reach you instead]


Git Techniques and Shortcuts:
-avoiding embarrassing failed checks
-Combine add & commit
-Aliases
-Amend
-Force Push
-Revert
-Codespaces
-Stash
-PC Master Branch
-Pretty Logs
-Bisect
-Autosquash
-Hooks
-Destroy Things
-Checkout to Last


Math for programers:
-Boolean algebra = boolean is binary variable (0 & 1) (true & false) vein diagrams, truth tables
-numeral system = like base2 & base 10, base16, base64
-floating point = no fixed number of digits before & after decimal point allowing developers to make trade-off between range & precision
-logarithmic function & exponentiation 
-set theory = unordered collection of unique value like relational database & each table is set of unique row 
-combinatorics = art of counting (combination & permutation) (used in globally distributed databases) (rendering tile on google maps)
-Graph theory 
-Complexity theory = time & memory algorithm should use
-Statistics = crucial for doing anything with AI
-linear regression & logistic regression
-linear algebra 
-transformation = rotation, scaling, shear


Multiples of bytes:
-bit = 1 bit 
-nibble = 4 bits
-byte = 8 bits
-kilobyte = 1024 bytes
-megabyte = 1024 kilobytes
-gigabyte = 1024 megabytes
-terrabyte = 1024 gigabytes
-petabyte = 1024 terrabytes
-exabyte = 1024 petabytes
-zettabyte = 1024 exabytes
-yottabyte = 1024 zettabytes


Open source contributions:
-open source are those softwares whose code is publicity available
-many students, working professional contributes in this
-its about supporting & uplifting community 
-use your skills indirectly
-using freelancer for earning money
-networking (actively contributing to project 2-3 times in 1 week)
-cp & dosa has advantage to get jobs (as per current standards)
-takes fear out of you to read code
-git & GitHub is must learning
-select your domain (web Dev, android studio, etc)
-learn on go & use documentation
-understand flow in code is important & running software on your phone, laptop
-actively contributing
-don't be afraid to learn new things & be open minded
-Mistakes while contributing -making lot of typo changes documentations changes
			    -pulling up 40-50 pull request in 1 day
			    -tagging lot of maintainers
			    -creating lot of issues with their heads
			    -making their lives miserable
-don't make typo documentations fixes (no good engineer would make typo fixes)
-contributing without setting up project (don't make half hearted contributions)
-don't contribute if you can't set up your project locally
-don't create pull request & don't start fixing it up
-don't tag maintainers
-try to solve issues by yourself & don't create pull requests
-cloud native (CNCF)
-most of time it will be reading code than writing code


Things to keep in mind as software engineer:
-sometimes there is gap in skillset of industry & pass out students (technology gets outdated)
-communications skills are really important (team dynamics, presentation skills)
-fundamentals should very strong
-recession is global phenomenon (majority of recession don't last more than 1 years)
-do internship (helps in resume)
-reading JDs in linked-in
-LinkedIn profile is very important (shows your profile & shows your entire mindset) (use LinkedIn for connection)
-70-80% work jobs closes internally (networking is very important)
-never put anything hateful comments on anywhere in social media
-use good keywords in your profile
-hiring will never stop but sometimes criteria changes
-jobs that does not required man power can be layoff
-upgrading yourself is very important because of increasing competition
-data is like gold for company (for taking calculated risk)
-data science demand is increasing
-future is AI
-use recession time to up-skill yourself


Remote jobs:
-some jobs are location specific (they want person who lives in USA & matches time zone of USA)
-hybrid work is not good (they call you 2-3 days in week)
-set target of around 5-6 months to find remote jobs (target time should be more than 6 months)
-jobs are there but you need to be skill-full
-you can also apply to those jobs with 3-5 years of experience if you have made good projects
-have an action write blogs, projects about all required skillset
-be faaddu, be badass person
-go deep in your field
-keep working hard
-grinding is important in this field
-number game = apply more & more
-don't apply on those openings whose applications are more than 1000
-stay away from scammers
-use LinkedIn & naukri.com
-hiring keywords, cv keywords
-dollar --> rupee
-open source can help you get job
-Chrunchbase & Techcrunch
-Geekwire
-if you are getting an opportunity then just take it
-contract working & can be laid off


[never pay for any online course because everything is available for free]


GSOCs:
-google summer of code 
-age should be more than 19 years
-having knowledge on version control system (git & GitHub & gitlab) & programming language is must
-start with baby steps & then start with bigger projects
-contribute in at-least 2 project
-before submitting application have good knowledge about their code, issues, organisation
-regularly contribute into projects & don't stop
-write good proposal


How not to fail technical interview:
-taking advice from highly experienced developers
-high pressure problem solving
-scary tech corporations
-flow chart & pseudo code
-interviewer wants your to succeed
-think out loud
-ask clarifying questions
-keep your compose
-express your passion for code
-don't be too clever
-don't say blazing fast
-hiring freeze


[Instagram & Facebook is useless for job searching but LinkedIn & twitter is not]
[bad programmer worry about code good programmer worry about data structures & their relationship]


History of linux:
-made by linux torvald
-Basic --> learnt machine code of processor to access it directly
-Sinclair ql computer
-made packman clone
-bought intel 8386 clone of IBM PC
-started out by wiring task switcher & terminal driver for its intel processor
-used intel x86 assembly language for chip
-kernel is basically core of operating system that has control over system & runs most essential component like memory, IO, processor
-launched 1st version called linux 0.0.1 & uploaded this to server at this university but still not executable because depended on minix for compiling
-0.0.2 & shared his source code
-transition from unix to linux is quite simple
-simple task switcher & terminal driver --> production ready operating system
-176000 lines of code
-27 millions line of code in linux git repository
-linux is completely free
-good coder is not enough to create linux, be sneaky bastard too


Command line tools for linux:
-VIM (text editor for terminal) & used for productivity
-TMUX (organisational purposes) also you to run multiple terminals in 1 window)(save session also for later use)
-TIME-SHIFT (taking snapshot of your machine at certain intervals 
-HTOP (overview of processors that are currently running)
-NCDU (analysis of storage of what taking most)
-TIMETRA (tracking time of how much time you are spending on things)
-Tiling window manger (resizing of windows)


SEO:
-search engine optimisation
-creating good content is 1st rule & last rule 
-pagerank algorithm
-high ranking on google can worth millions of dollars
-becoming harder & harder to manipulate google technology
-200+ factors involves
-bounce rate & Dwell time & clicking other links absorbing all kinds of content
-rendering html that can be understood by bots
-metadata is not shown directly to end user
-main content goes into body tag
-bots can use this data to further understand page & format actual appearance of your search engine  listing
-getting your fully rendered html loaded fast if you have megabytes of blocking images, styles, javascript both users & bots will pass on your site
-Click through rate (CTR) = how likely user clicks on ranking page (SERP)
-bounce rate = clicking on link & clicking back button 
-dwell time = how long do they stay on page
-session duration & page per session
-client side rendering
-


Benefits of using linux for programmers:
-security & no need to worry about anti virus softwares
-open source & anyone can look at source code
-improving your programming workflow & great package manager
-accidentally downloading malware is common in windows
-linux is build for stability & reliability
-many linux servers are running on linux without failure or restarting
-preinstalled powerful tools
-hacking specific tools in kali linux
-task automation & linux is easy to write scripts
-performance is great
-not necessary faster but compatible with any machine
-provides useful error messages
-highly customisable  
-better memory management, process creation time, linux is simply faster
-better file system, NTFS is abomination, Ext4/xfs are better & faster
-better process management
-linux doing on asynchronous I/O front


Arduino:
-open source an open source circuit board & micro controller
-building digital hardware product, IOT devices, robots, wearable products, custom hardware product
-10 millions boards world wide
-UNO & has microcontroller (small & expensive computer that runs on low power)
-board is surrounded by pins that used to construct circuit by connecting various input & output 
 devices
-USB port used to upload your code
-sketch Programm
-setup runs once when hardware 1st powered on & loop runs continuously when react to signals from input 
 devices
-connect your board then create file .ino extension
-using breadboard to circuit without need to soldering


TempleOS:
-open source 64-bit operating system designed to be 3rd prophesied by bible 
-created in 2005 by jerry Davis
-including boot-loader, kernel window manager, graphics library, games powered by his own custom 
 programming language
-100000 lines of code in just 1.4MB
-rendering graphics 640x480 resolution limited to only 16 colours
-everything happens directly in kernel including user programs
-you have complete control over operating system source code & hardware
-using virtual box to boot ISO file
-Adam is father of any other task
-taking advantages of multiple CPU cores & each core has its own immortal set task
-3d 1st person shooter, 2d strategy games, simulations


Personal server into hosting server:
-need machine to host, static IP address, website address
-went & bought Raspberry Pi to run Raspbian on (Ubuntu works too)
-install Apache 2 (website hosting tool)
-got free domain name from NO-IP, .ddns link after it
-went to router & plugged in all information to keep my dynamic address updated to DDNS link, so its  
 effectively becomes static
-did some basic network configuring & static port mapping/forwarding


setting up a local server using software like Apache or Nginx. However, this requires technical knowledge and ongoing maintenance. For public access, you need a static IP address and proper security measures. For most users, using a professional hosting service is more practical

Cloud hosting is the best and most reliable. Why don't you check out Cloudways managed cloud hosting platform.
What Cloudways does is that it optimizes and sets up all the necessary software on the DigitalOcean, Vultr, Google and Amazon EC2 servers. You don't have to worry about installing Linux, MySQL, PHP, Varnish, Memcache, Apache, Nginx and other scripts on the servers.

server of X86 architecture is the same as our notebook, it is theoretically feasible, but it can be used for learning and testing by yourself. If you want to use it for commercial use, it will be wrong from time to time when you boot it up for 24H, and it will seriously affect the life of the notebook, especially in summer. High temperature is the case, notebook in a slightly higher temperature for a long time, the aging of accessories.


Host website in old home PC:
-download Xampp server in Linux OS & Apache server run (default Xampp server port is http:80
-install NGROK software ngrok - download
-connect your account
-create account in ngrok 
--ngrok config add-authtoken <your auth token> (auth token available in dashboard.ngrok.com)
-start HTTP tunnel forwarding to your local port 80, run this next
-ngrok http 80 


Hosting website from computer in home:
-powerful computer with speed in mind, static IP from internet service provider, gigabit router to
 handle incoming requests
-software to serve web pages to clients
-get static IP address
-computer connects to internet ISP (assign IP Address to computer (IP address changes over time ----> 
 identity on internet keeps on changing, need to keep same identity all time, take static IP address, 
 essential telling ISP to assign same IP address every time to connect to internet
-server is just normal computer, only difference b/w desktop computer & server is software that runs on 
 them
-web-servers are Apache httpd, Apache Tomcat, Nginx, Express, Flask
-different software to freely install on server/computer
-configuring router to handle web requests, accessible on our local network, its time to take it to 
 internet, 2 methods within which you can make local server accessible on internet
-port forwarding -tells router to forward all requests of certain port to server, every router & 
 configure is different
-SSH tunnelling -binding port of local server to server already in cloud, use service like localtunnel


Host website through my own laptop:
-use dynamic DNS service & get static IP address ---> point IP address in domain mapping (pointing 
 domain) to that IP address ----> manage your DNS to register domain
-setup web server configure your server to host documents there are many open source web servers 
 available (nginx(reverse proxy), litespeed, Apache, tornado web server, Iis(asp), tomcat(Java))


host website on personal computer:
-not good idea when want to be live on internet
-personal computer would need to be turned on & connected to internet 24/7/365
-need strong security set up on computer, strong firewall, SSL certificates, way to block DDoS attacks, 
 which break computer if hackers targeted your website
-its better to pay for professional web hosting services


Host website with own computer
-hardware is important, desktops are designed to be asleep most of time & server hardware is designed 
 for always-on workhorse tasks (include power, processor, memory drive redundancy in case of failure) 
-windows can host, too, add IIS feature in client versions of windows Vista & newer quite easily & can 
 also put Apache on it but can’t run both at same time on same port
-clean, consistent power, $50 UPS
-server has good, cool airflow, avoid heat, humidity should be b/w 20% & 70% non-condensing
-put new hard drive in it & make it low-capacity, high speed drive
-capacity can be low since sites are very small, but faster drive --> faster reading, drives are most 
 common parts to fail, most devastating (where main data lives)
-put in RAID card with 2 hard drives in RAID-1 (mirrored), if 1 drive fails, server doesn’t go down & 
 change it out for new identical 1 & rebuild
-drives should be the same size, brand & model, drives should be as identical as possible
-use SSD’s instead of spinning disks, use less power, much faster & much smaller
-don't open/forward 22 for linux or 3389 for windows
-web server, all should be open to outside world are 80 (http), 8080 (alt http), 443 (https) 8443 (alt 
 https), depends on configuration
-simple site, leave it at just 80 (ports don't allow write, change, delete, just read)
-after OS installed, remove floppy drive & CD drive, less components in server, less uses power, 
 costing (slightly) less on power bill, better to allocate that power to things light disks, ram & CPU
-worth checking Craigslist for tower-style 


Bitcoin:
-peer-to-peer electronic cash system
-verification by miners ---> process starts over ---> transaction ---> miners ---> block ---> block 
 puzzle ---> proof of work ---> miners/ proof of work/ broadcasting proof of work in network ---> 
 verification by miners
-


-code -static (content is hard coded on page), dynamic (reference to content that are controlled 
       externally with CMS/ database)
-delivery -static (deliver static code 


Saas:
-syntactically awesome stylesheets helps in extending css to super power
-modern UI are extremely complex
-saas provides compiler allows us to write stylesheet in completely different language
-variable, nesting is most killer feature in sass
-compiler --> convert into valid css that run in browser


Developer blog:
-learning in public, not about gaining followers but its about credibility
-great way t get involved in community
-technical writing
-medium is not optimised for tech
-hashnode.com
-mapping custom domains to it
-talking about what you learnt & showing your skills
-most successful developers do blogging


Object oriented programming:
-object --> class --> inheritance --> polymorphism --> abstraction --> encapsulation
-encapsulate data & logic inside of object
-class is like blue print & create multiple object instances these classes can inherit behaviour from 
 each other forming hierarchy of abstraction
-require lot more boiler plate
-having bunch of mutable state that's difficult to test & refactor
-preferred function over classes
-class is nice way to encapsulate something
-principles -encapsulate what varies
            -code to interface, not to implement
            -favour composition over inheritance
            -strive for loosely coupled designs b/w objects that interact
            -classes should be open for extension but closed for modifications
            -depends on abstraction, don't depend on concrete classes
            -class should have only 1 reason to change
-


Writing Good Readme file:
-most important in your project
-no readme means no 1 going to find your stuff
-essentially gateway drug to your project
-SEO projects, descriptive title & keywords, gaining contributors, newsletter


Time & space complexity:
-old computer vs M1 MacBook (same data, same algorithm, same task takes 10 seconds & 1 seconds)
-both machines have same time complexity (we don't care about time because that will vary from machine 
 to machine)
-time complexity =! Time taken
-time vs size graph (time complexity is mathematical function tells us how time is going to grows as 
 input grows) (does not tell us time but relationship)
-we don't care about small numbers (only about larger numbers or infinity & what will happen)
-only care about worst case time complexity (crashing of app has higher chances)
-always ignore less dominating terms
-linear & exponential complexity
-Big-O notation tells upper bound (graph can be anything but cannot not exceed N3) (finite value)
-when both upper bound & lower bound are present then we use theta
-little o = also gives upper bound but this is not strict upper bound 
-space complexity = input space + auxiliary space (extra space taking by an algorithm)
-recursive algorithm = space complexity is not constant (those function actually take some memory in 
 stack) (at any particular point of time no 2 function calls at same level of recession will be in 
 stack at same time) (only calls that are interlinked with each other will be at stack at same time) 
 (space complexity = longest chain (height of tree & O(N))
-2 types of recursions -linear 
		      -divide & conquer
-Mater's theorem, plug & chug (useless methods) 
-akra baize formula (good method)
-divide & conquer recurrence -best method ever
-order agnostic binary search
-finding time complexity -count loops -single loop -O(n)
                                      -nested loop -O(n²)
                                      -logarithmic loop -O(log n) (like binary search)
                         -sorting -most common sort algorithms -O(n log n)
                                  -special cases (counting sort, radix sort) -O(n)
                         -divide & conquer -if problem splits into halves (like merge sort or 
                                            quick-sort), its usually O(n log n)
                         -constant time -simple lookups or swaps -O(1)


[Study is important & most important thing in life]
[gate]


Events to participate:
-code-chef
-code forces
-GFGH
-hackathon
-open-source
-hashcode
-google summer of code
-hackerRank/ hacker earth competition
-de show


[coursera]
[cloudconverter]
[relevel]


Using Twitter for programming:
-follow event hashtags
-share other's content (YouTube videos, podcasts, blogposts)
-use #hashtags
-join the convo
-start following programmers
-be patient (building connections takes time)


XML:
-extensible markup language
-


VLC media player:
-turn the volume up to more than 100% by clipping
-amplifying wav output decoded from media file
-audio is output of DAC (digital-to-analog converter) 
-amplifying audio comprising lot of signals, some frequencies gets chopped (signal clipping) ------>
 distorted audio is obtained
-4K HDR video players
-mic booster increase mic volume after 100%


Creating cinematic scenes:
-lighting, composition, story telling
-shutter, speed,  aperture, ISO, white balance
-cinema FV-5 lite, FilmIC pro
-motion blur looks cinematic (24FPS)
-60FPS video can be easily convert to slow motion
-shutter screen should be 2x of FPS (24FPS --> 1/50th, 30FPS --> 1/60th, 50FPS --> 1/120th)
-ISO increases light but also digital noise, keep ISO minimum)
-temperature adjustment
-only 1 camera works among 3 cameras, best video quality comes from primary cameras
-diffusing light with translucent cloth
-main light ------ person ------ backlight (should be diagonal & opposite)
-frame -establishing shot, wide shot (information giving), full shot (body language of character, 
 position, situation, condition), medium shot (above lower back), cowboy shot (head to knees), medium- 
 closeup shot (head to chest), closeup shot, low angle shot 


[SDR (standard dynamic range) & HDR (high dynamic range)]


Camera:
-specs –larger sensors capture more light (full-frame > APS-C > micro 4 3rds)
-megapixels (MP) –higher MPs give more detail but sensor quality matters more
-pixel size (µm) –larger pixels perform better in low light
-dynamic range (stops) –more stops ---> better highlights & shadow details
-autofocus points –more points (cross-type, phase-detection) improve accuracy
-autofocus speed (ms) –faster focus better for action shots
-image stabilisation (OIS, IBIS) –reduce blur from hand movements
-ISO range (100-51200) –higher ISO allows low-light shooting but noise increases
-low-light noise performance –measured by signal-to-noise ratio
-shutter speed (30s - 1/8000s) –faster speeds freeze motion, slower allows long exposures
-burst rate (FPS -frames per second) –higher FPS better for action photography
-resolution (4K, 8K, etc.) – Higher is better but needs processing power
-frame rate (FPS - 24, 30, 60, 120, 240 FPS) – Higher for slow motion
-bitrate (Mbps) – Higher means better quality but larger file sizes
-codec (H.264, H.265, ProRes, RAW) – Determines compression and quality
-log profiles (S-Log, V-Log, etc.) – Essential for professional colour grading
-resolution -measures amount of detail camera capture, megapixels (MP)
            -higher megapixels offer finer details
-sensor size -impacts light sensitivity & depth of field, larger sensors (full-frame 35mm), APS-C, 
              capture more light & detail, producing better low-light performance & dynamic range
              smaller sensors (micro 1-inch sensors are compact & struggle in low light
-ISO sensitivity -ISO controls sensor’s sensitivity to light
                 -high ISO ---> better performance in low light, introduces more noise
                 -cameras with larger sensors often handle high ISO values better, resulting in clearer 
                  images in dim settings
-aperture (f-stop) -size of lens opening that controls light intake, f-numbers like f/2.8, f/4
                   -wider aperture (lower f-number) captures more light, allows for shallow depth of  
                    field (blurred background), & ideal for portraits, low-light shooting
-shutter speed -controls exposure duration, measured in fractions of second (1/100s, 1/1000s)
               -fast shutter speeds freeze motion, slow speeds create motion blur & used for night 
                photography, artistic effects
-focus types -manual focus -used in precise shooting
             -autofocus (AF) -advanced cameras offer various AF modes like single AF, continuous AF, 
                              face detection AF
-white balance -adjusts colour balance to make whites look natural in different lighting conditions  
               -daylight, tungsten, fluorescent
               -common settings -auto, daylight, cloudy, tungsten, custom, crucial for accurate colour 
                representation
-dynamic range -range b/w darkest & lightest parts of image
               -higher dynamic range --> more detail in shadows & highlights, reducing risk of washed-
                out bright areas or lost details in dark areas
-frames per second (FPS) -number of frames camera capture in second, action, sports, photography
                         -higher FPS (10 FPS) captures multiple moments in quick succession
-lens types & focal length -prime lens -fixed focal length (35mm), sharper & better in low light
-zoom lens -variable focal length (24-70mm), offering more flexibility
-focal length -tells field of view, with wide-angle (<35mm), standard (50mm) & telephoto (>70mm) 
               providing different perspectives
-image stabilisation (IS) -reduces motion blur by compensating for hand movement, available as optical 
                           IS (in-lens), sensor-based IS
                          -handheld shots in low light with longer focal lengths
-metering modes -evaluative/matrix -measures light across entire frame
                -canter-weighted -priorities centre for balanced exposure
                -spot metering -measures light at specific focus point, good for backlit or high-
                                contrast scenes
-depth of field (DoF) -area of image in focus, controlled by aperture, focal length & distance to 
                       subject, shallow DoF (f/1.8) isolates subject, deep DoF (f/11) keeps more of 
                       scene in focus
-exposure triangle -balances ISO, shutter speed & aperture to achieve correct exposure
-colour profiles -profiles like sRGB, AdobeRGB define colour space, impacting colour accuracy
-log profiles -(S-Log, C-Log) record flat colours for more control in post-production, used in video
-video recording capabilities -4K or 1080p, options like 24 FPS (cinematic) & 60 FPS (smooth)
        -bitrate, colour depth & compression formats (H.264) for video quality
-autofocus Points -number & distribution of focus points affect accuracy & flexibility, especially in 
                   dynamic scenes
-viewfinder types -optical viewfinder (OVF) -found in DSLRs, displays natural view
                  -electronic viewfinder (EVF) -shows digital preview, accurate exposure & colour


Super computers:
-more than 14,000 Xeon general-purpose processors & more than 7,000 Nvidia tesla general-purpose 
 graphics processing units (GPGPUs) on about 3,500 blades, 112 computer cabinets & 262 terabytes of 
 distributed memory, 2 petabytes of disk storage is implemented with Lustre clustered files
-pleiades supercomputer -921 TB of total memory & 228,572 CPU cores 
-titan -693.6 TiB of CPU & GPU RAM & 299,008 processor cores 
-Cheyenne supercomputer -300 TB of RAM & 8,064 Intel “Broadwell” Xeon processors 
-supercomputers used by scientists & engineers to simulate reality & make projections 
-NASA advanced supercomputing division
-titan -18,688 nodes (4 nodes per blade, 24 blades per cabinet), each containing 16-core AMD opteron 
       6274 CPU with 32 GB of DD
-max RPS = [CPU throughput (req/s) + RAM throughput (req/s) + disk I/O throughput (req/s)]/ average 
           request processing time
-CPU throughput = CPU cores * 1/ average CPU time per request​
-RAM throughput = memory per request/ available RAM
-disk throughput= disk I/O per request/ disk I/O capacity


Basics:
-PPC (pay per click) -max amount advertiser pay each time user clicks on ad
-CPC (cost per click) -cost of each click advertiser pays once user clicks ad
-CPA (cost per action) -advertisers pay when ad click lead to action like sale
-CPM (cost per 1000) 
-CTR (cost through rate) -comparison of number who view your ad compared to number of people who click 
                          your ad
-conversion rate -compare total number of website visitors to overall goal of ad


Video:
-resolution -defines pixel dimensions of video, (1920x1080 (full HD), 3840x2160 (4K))
            -higher resolutions --> more detail, require more storage & processing power
-frame rate (FPS) -number of frames displayed per second (24, 30, 60 FPS)
                  -higher FPS creates smoother motion --> requires more processing
-aspect ratio -width-to-height ratio of video (16:9 (widescreen), 4:3 (standard))
-bitrate -amount of data processed per second, affecting quality & file size
         -Mbps (megabits per second), higher bitrates --> increase quality, require more bandwidth/ 
          storage
-compression -reduces file size by removing redundant, less visible information
-common codecs -H.264, H.265 (HEVC) & VP9, each balancing quality & compression differently
-colour depth (bit depth) -number of bits represent colour for each pixel (8-bit, 10-bit.)
                          -higher bit depth --> more colours, smoother gradients, requires more storage
-dynamic range -range b/w darkest & brightest parts of video
-HDR (high dynamic range) -expands dynamic range, enhancing brightness, contrast & colour accuracy
-chroma subsampling -reduces colour resolution to save data (4:2:0, 4:2:2)
                    -common in video compression, human eyes are less sensitive to colour than to 
                     brightness
-interlaced (i) -alternates scan lines for each frame (1080i)
-progressive (p) -draws all lines for each frame (1080p), smoother, higher-quality playback
-keyframes (I-frames) -frames store full image, other frames reference keyframes to reduce data
                      -keyframe interval affects compression & playback, frequent keyframes improve 
                       scrubbing/editing
-containers (.mp4, .mov, .mkv) -tells compatibility with devices & software
-bit rate control modes -CBR (constant bit rate) -maintains consistent bit rate
                        -VBR (variable bit rate) -adjusts bit rate based on video complexity, balancing 
                                                  quality & size
-frame blending & interpolation -adjust frame rates, create slow motion, creates new frames for  
                                 smoother transitions
-video editing tools -timeline -displays video sequence, audio & effects
                     -layers -each video, audio element sits on separate layer for easy manipulation
                     -transitions -effects like fades, wipes used b/w clips
                     -colour grading -adjusting colour balance, contrast & other elements to enhance 
                                      visuals


Linux apps:
-brave
-emacs
-Alacritty & Fish
-OBS
-Kdenlive
-Gimp
-VLC
-Virt-Manager
-TastyTrade 


[everybody should know how to code because its teaches you how to think]


Orange screen of death:
-OSOD -rare error screen occur on windows, indicating critical system issue
      -less common than blue screen of death (BSOD)
      -caused by faulty, outdated, incompatible graphics drivers
      -overclocking GPUs also trigger this error
      -defective GPU or other hardware malfunction (overheating) cause orange screen
      -BIOS/UEFI settings
      -certain peripherals or incompatible hardware like VR headsets cause OSOD in windows environments
      -use monitoring tools (HWMonitor) to check GPU overheating


-latency -delay b/w request & its response, time taken for data to travel from source to destination
         -measured in -milliseconds (ms) or microseconds (µs)
         -low latency is crucial in applications like online gaming, video conferencing, high-frequency  
          trading, where real-time responses are required
         -if user click button & there’s 100 ms delay before webpage updates, that 100 ms is latency
-throughput -amount of data successfully transferred over network, processed within system in given 
             time frame
            -measured in Bits per second (bps), megabits per second (Mbps), gigabits per second (Gbps)
            -high throughput is vital in data-heavy applications like video streaming, file downloads, 
             & data backup systems
            -network with throughput of 1 Gbps transfer up to 1 gigabit of data every second
-Bandwidth -maximum capacity of network or data channel to carry data, regardless of how much data is 
            actually being sent
           -Bits per second (bps), Mbps, or Gbps
           -high bandwidth is essential for applications that need to transfer large volumes of data, 
            Like video conferencing & cloud storage
           -100 Mbps network theoretically transfer up to 100 megabits of data per second, regardless 
            of current utilisation
-Jitter -variation in packet arrival time & cause uneven quality, particularly in real-time apps like 
         VoIP & gaming (Milliseconds (ms))
        -low jitter is necessary for consistent experience in video calls, online gaming, live 
         streaming
        -network with consistent latency of 50 ms has no jitter, while network with fluctuating latency 
         b/w 30 & 70 ms has 20 ms jitter
-Packet Loss -packets of data are lost in transit & don't reach their destination
             -percentage of packets lost
             -applications needing reliable data transfer like file transfers, email, require low 
              packet loss
             -video call, high packet loss cause video freeze & audio dropouts


Types of interfaces:
-PATA -parallel advanced technology attachment 
      -upto 80GB capacity & transfer data as fast as 133MB/sec
      -integrated drive electronic (IDE) & enhanced integrated drive electronics (EIDE)
      -mechanical moving parts & based on parallel signalling multiple bits of data simultaneously
-SATA -serial advanced technology attachment
      -superseded PATA interfaces in size, power consumption, better pricing
      -uses serial signalling technology & transfer 1 bit at time
      -transmission of data at rate of 150-300MB/sec & thinner cable of cable limit of 1 meter
-SCSI -small computer system interface
      -round-the-clock operations, speed, storage
      -standard for connecting peripheral device (printers, scanners, other)
      -320MB/sec connect them internally & externally
      -no longer used in consumer hardware
-NVMe -non-volatile memory express
      -high demanding & computing-intensive tasks
      -upgrade over interface
      -high performance & scalability, mostly in data centre & newer computers (SSDs using NVMe 
       interface)
      -lower power consumption, multiple commands queues, reduced latency & input/output overhead 
       leading to better performance
      -utilisation of CPU to full


Linux faster than windows:
-lightweight kernel, resource efficiency, fewer background processes compared to windows
-consumes fewer system resources (CPU, RAM), especially on older or lower-spec systems
-optimised for multitasking (simultaneously)
-multitasking capabilities are optimised, making it responsive even under heavy load
-minimal bloatware -linux distributions come with essential software & don’t include pre-installed 
 bloatware common in windows & keeps system uncluttered & improves boot time & responsiveness
-file systems (Ext4, XFS, Btrfs) -faster & more reliable than NTFS, default file system in windows
-better at handling fragmentation, faster access times & reduced I/O load
-choose from various desktop environments (GNOME, KDE, XFCE), different resource demands
-open-source, allows users to fine-tune their systems for maximum performance, disabling unnecessary 
 services & customising kernels, limited on windows
-many distros highly optimised for specific tasks or performance
-linux uses package managers (APT, DNF, Pacman) streamline software installation & updates, requiring 
 fewer resources & fewer restarts
-generally less vulnerable to malware, reducing need for background antivirus software consumes  
 resources


Linux networking configuration & interfaces:
-ifconfig (Display network interfaces (legacy))
-ip addr show (show all IP addresses)
-ip link set eth0 up (enable interface eth0)
-ip link set eth0 down (disable interface eth0)
-nmcli device status (list network devices)
-nmcli connection up <connection_name> (activate specific network connection)
-nmcli connection down <connection_name> (deactivate)
-route -n                    # Show the routing table (legacy)
-ip route show               # Display routing table (modern)
-ip route add default via <gateway_IP> # Set default gateway
-cat /etc/resolv.conf        # View DNS servers
-nmcli device show           # Show DNS information for NetworkManager-managed devices
-ping <hostname_or_IP>       # Check connectivity to a host
-traceroute <hostname_or_IP> # Trace the route packets take to a network host
-mtr <hostname_or_IP>        # Real-time network diagnostics tool, combines ping and traceroute
-dig <hostname>              # DNS lookup for IP addresses
-nslookup <hostname>         # Another tool for DNS lookups
-host <hostname>             # Look up IPs for a hostname and vice versa
-netstat -tuln               # Show all listening ports and services (legacy)
-ss -tuln                    # Show all listening ports and connections (modern replacement for -netstat)
-lsof -i -P -n               # List open files and ports
-nmap <hostname_or_IP>       # Network scanner to find open ports/services
-scp <source> <user@destination>:<path>   # Securely copy files over SSH
-sftp <user@hostname>                     # Secure FTP, interactively transfer files over SSH
-rsync -av <source> <user@destination>:<path> # Synchronize files/directories over the network
-ufw status                   # Check firewall status (for systems using UFW)
-ufw allow <port>             # Allow traffic on a specific port
-iptables -L                  # List iptables rules
-iptables -A INPUT -p tcp --dport <port> -j ACCEPT # Allow incoming traffic on a specific port
-iwconfig                     # Show wireless interfaces and settings
-iwlist <interface> scan      # Scan for Wi-Fi networks on an interface
-nmcli device wifi list       # Show available Wi-Fi networks
-nmcli device wifi connect <SSID> password <password> # Connect to a Wi-Fi network
-openvpn --config <config_file.ovpn>     # Start an OpenVPN connection using a configuration file
-nmcli connection import type openvpn file <config_file.ovpn> # Import VPN configuration with
NetworkManager
-nmcli connection up <vpn_connection_name> # Start VPN connection using NetworkManager


Linux:
-mkdir $HOME/.themes
-cd $HOME/.themes

wget https://github.com/B00merang-Project/macOS-Sierra/archive/master.zip
-unzip master.zip
-sudo add-apt-repository ppa:numix/ppa && sudo apt-get update

sudo apt install numix-icon-theme-circle
-sudo sh -c "curl https://raw.githubusercontent.com/Foggalong/hardcode-fixer/master/fix.sh | bash"

curl https://raw.githubusercontent.com/ActusOS/GnomeYosemiteIcons/master/download_from_github.sh | sh
-sudo apt install curl
-sudo apt install plank
-plank --preferences
-gsettings set net.launchpad.plank.dock.settings:/net/launchpad/plank/docks/dock1/ show-dock-item false
-sudo apt install gnome-tweak-tool
-cd $HOME/.icons
-cp -r GnomeYosemiteIcons-master/ ../.local/share/icons
-sudo apt install unity-tweak-tool
-/home/USER/.themes/macOS-Sierra-master/


Movie:
-preproduction -script written ---> financing secured ---> cast & crew hired ---> location scouted & 
                selected ---> sets & props built ---> wardrobe design & made ---> production schedule 
                created 
-production -set prepared ---> electrical, lighting, sound setup ---> makeup & hairstyle ---> camera 
             angle selected ---> scene rehearsed ---> video & audio record
-postproduction -footage edited ---> visual effect added ---> sound effect added ---> musical score 
                 created ---> audio track mixed ---> audio track combined with footage ---> approved


DSLR:
-


DSLR:
-full auto (A+) -less creativity, flash fire without control
-semi automatic mode, full manual
-aperture priority (Av/A) -semi-automatic shooting mode
                          -photographer set aperture & camera automatically selects shutter speed
                          -aperture -size of opening in lens through which light is allowed to pass 
                           whenever shutter is opened (larger aperture, more light passes through)
 -f-stops’ and is usually displayed using ‘f-number’, (f/2.0, f/2.8, f/4.0, f/5.6, f/8.0)
 -ratio of focal length over diameter of the opening
 -larger aperture (wider opening) has smaller f-number (f/2.0) & smaller aperture (narrower opening) 
  has larger f-number
-automatic mode, the camera will select all the settings, 
camera choose which focus point to use, your subjects may be unintentionally out of focus, the background in focus, and your image ruined. While in auto mode, it’s left up to your camera to decide what lighting to expose for, which can lead to overly bright or dark images
-Taking creative control of your camera’s settings in manual mode is the only way to achieve consistent results in your images.
-exposure triangle -aperture, ISO, shutter speed
-aperture -refers to size of opening in lens allows light into camera’s sensor
          -size of this hole will determine depth of field, meaning how blurry foreground & background 
           around subject in image
-shutter speed -length of time shutter stays open to let in light through hole in lens
               -need pretty fast shutter speed to ensure I freeze action & rule out possibility of blur 
                from not holding camera still enough in my hands
               -slower shutter speeds to show movement in creative images, but standard portraits ---->
                keep it fast
-ISO -level of sensitivity of camera’s image sensor, image quality high by using low ISO setting
     -darker situations, may need higher ISO to balance out triangle ---> introduce some grain into   
      image
     -grain better than underexposed or out of focus, use higher ISO when needed image either going to 
      be underexposed (too dark) or overexposed (too light)


DSLR:
-dials & buttons -for adjusting settings like ISO, shutter speed & aperture
-understand exposure triangle -3 key settings that control exposure are ISO, aperture, shutter speed
-ISO -controls camera sensitivity to light, lower ISO (100-200) ideal for bright conditions
     -higher ISO (800+) is better for low-light, higher ISO introduce grain/noise
     -low ISO (100-400) –best quality, no noise (use in bright conditions)
     -high ISO (800-6400+) –more light sensitivity but adds noise (use in dark conditions)
-aperture (f-stop) -refers to lens opening, controlling how much light enters
                   -lower f-stop numbers (f/2.8) create shallow depth of field with blurry background
                   -higher f-stop numbers (f/11) keep more of scene in focus
-shutter speed -controls how long sensor exposed to light, fast shutter speeds (1/1000) freeze motion, 
                while slower speeds (1/30 or slower) create motion blur
-select shooting modes -manual mode (M) -gives full control over ISO, aperture, shutter speed,
                                        -mode is great for learning but requires more practice
-aperture priority (A or Av) -set aperture & camera adjusts shutter speed
                             -ideal for controlling depth of field
                             -wide aperture (low f-number, f/1.8) –more background blur (shallow DOF, 
                                                                   great for portraits)
                             -narrow aperture (high f-number, f/16) –more elements in focus (deep DOF, 
                                                                     great for landscapes)
-shutter priority (S or Tv) -set shutter speed & camera selects aperture
                            -use this for action shots or avoid blur
                            -controls how long camera's sensor exposed to light
                            -fast shutter speed (1/1000s) –freezes motion (sports, wildlife)
                            -slow shutter speed (1/30s) –more motion blur (light trails, waterfalls)
-program mode (p) -camera adjusts both shutter & aperture but lets control other settings
-scene modes (auto presets) -portrait mode –uses wide aperture for blurred background
                            -landscape mode –uses narrow aperture for everything in focus
                            -close-up (macro) –optimised for small subjects
                            -sports mode –uses fast shutter speed to freeze action
                            -night portrait –uses slow shutter speed & flash to capture night scenes 
                                             with detail
-auto mode -camera makes all decisions, good for beginners, but limits creative control
-focus modes -autofocus (AF) -camera automatically focuses on subject
             -single-point AF -focuses on single point, useful for portraits
             -dynamic/continuous AF -adjusts focus continuously as subject moves, useful for moving 
                                     subjects
             -manual focus (MF) -adjust focus by hand, ideal for stationary subjects or low-light 
                                 situations where autofocus struggles
             -AF-S (single shot focus) –best for still subjects
             -AF-C (continuous focus) –tracks moving subjects (useful for sports & wildlife)
             -AF-A (auto mode) –camera decides b/w single & continuous focus
-metering -how camera calculates brightness levels
          -evaluative/matrix metering -measures entire scene (best for most situations)
          -centre weighted metering –focuses on middle area (good for portraits)
          -spot metering –measures light from small point (useful for high contrast scenes)
-white balance settings -adjusts colour temperature for different lighting
                        -auto –camera chooses best setting
                        -daylight –warms up image slightly for sunlight
                        -tungsten –cools down image to compensate for yellow indoor lighting
                        -fluorescent –adjusts greenish tint from fluorescent bulbs
                        -cloudy –warms up image for cloudy conditions
-auto white balance (AWB) -automatically adjusts based on lighting
-presets -options like daylight, cloudy, shade, tungsten, fluorescent
-custom white balance -use white or grey card to set custom balance for the exact lighting conditions
                      avoid mixing different light sources cause colour inconsistency
-histogram -graph shows exposure levels (left side (shadows), right side (highlights), middle (mid-
            tones
           -ideal histogram usually has balanced curve, but vary based on scene, checking histogram 
            helps avoid underexposure (too dark) or overexposure (too bright)
-choose right lens -prime lens (fixed focal length) -sharp & offers large apertures for low-light & 
                                                     portraits
                   -zoom lens -versatile for different distances, ideal for travel & events
                   -wide-angle lens -great for landscapes & architecture
                   -telephoto lens -distant subjects, ideal for wildlife or sports
-compose your shots -rule of 3rd -divide frame into 3x3 grid & place your subject on or near 
                     intersecting lines
-leading lines -use lines in scene to lead viewer’s eye to subject
-framing -use objects within scene to frame subject for added depth
-symmetry & patterns -symmetry add balance, patterns create visual interest
-shallow depth of field (low f-stop) -isolates subject by blurring background, ideal for portraits
-deep depth of field (high f-stop) -keeps everything in focus, good for landscapes & architecture
-master shutter speed techniques -freezing motion -use fast shutter speed (1/1000) to capture moving 
                                                   subjects sharply
                                 -motion blur -use slower shutter speed (1/30) to show movement, such 
                                               as flowing water or moving cars
                                 -long exposure -keep shutter open for seconds or even minutes for 
                                                 night photography, light trails, astrophotography
-practice low light photography -use lower shutter speed -lets more light (with tripod to avoid blur)
-increase ISO sensitivity -although may introduce noise, higher ISO help in low light
-wider aperture (low f-stop) -lets in more light, giving better exposure in darker environments
-external flash or reflector -consider these to add light without overexposing
-RAW -uncompressed format captures all image data, allowing for extensive editing, RAW files are large 
      & need post-processing
-JPEG -compressed format with less detail, but files are smaller & ready to use
-use RAW if plan to edit your photos heavily
-post-processing basics -exposure adjustments -fix over or underexposed areas
-white balance correction -adjust colour temperature for accuracy
-sharpening & noise reduction -RAW files often need sharpening & noise reduction
-cropping & composition adjustments -enhance composition by cropping & rotating if necessary


Make linux look like MacOS:
-sudo apt install gnome-tweaks
-sudo apt install gtk2-engines-murrine gtk2-engines-pixbuf
-sudo apt install sassc optipng inkscape libglib2.0-dev-bin
-git clone https://github.com/vinceliuice/WhiteSur-gtk-theme
 cd WhiteSur-icon-theme/
 ./install.sh
-git clone https://github.com/vinceliuice/WhiteSur-icon-theme.git
 cd WhiteSur-icon-theme/
./install.sh
-https://extensions.gnome.org/extension/307/dash-to-dock/
-https://extensions.gnome.org/extension/3740/compiz-alike-magic-lamp-effect/


HTML5:
-almost every single website on internet is written on html (hyper text markup language)
-language for creating web pages & web applications
-your website needs to be hosted by server to make it accessible to World Wide Web 
-we use domain name instead of IP address (so its easy to remember)
-when you type domain name on browser --> calls server --> server send hosted file back to browser
-HTML is like skeleton of website
-nesting
-tags -<ruby> & <rt> -tag represents small annotation that used rendered above, below or next to base 
                      text
      -<abbr> -tag displaces full meaning of abbreviated word when user hover on abbreviated word
      -<details> -used to specify any additional details that user can view or hide on click
-<!DOCTYPE html>  (defines document type)
-<html>  (root element)
-<head>  (contains meta information)
-<body>  (main content of webpage)
-<meta charset="UTF-8">  (character encoding)
-<meta name="viewport" content="width=device-width, initial-scale=1.0">  (mobile responsiveness)
-<meta name="description" content="Your badass website description">  (SEO)
-<meta name="keywords" content="HTML, CSS, JavaScript, badass website">
-<meta name="author" content="Your Name">
-<meta property="og:title" content="Title for social media">
-<meta property="og:description" content="Description for social media">
-<meta property="og:image" content="image-url.jpg">
-<meta property="og:url" content="https://yourwebsite.com">
-<link rel="canonical" href="https://yourwebsite.com">  (prevents duplicate content issue)
-<link rel="icon" type="image/png" href="favicon.png">  (website icon)
-<header>  (defines page header)
-<nav>  (navigation links)
-<main>  (main content)
-<section>  (section in page)
-<article>  (self-contained article content)
-<aside>  (sidebar or additional content)
-<footer>  (footer section)
-<div>  (generic container)
-<span>  (inline container for styling)
-<h1>biggest heading</h1>  
-<h2>subheading</h2>  
-<h3>smaller heading</h3>  
-<h4>even smaller heading</h4>  
-<h5>smallest heading</h5>  
-<h6>tiny heading</h6>  
-<p>paragraph of text</p>  
-<br>  (line break)
-<hr>  (horizontal line)
-<b>bold text</b>  
-<strong>important bold text</strong>  
-<i>italic text</i>  
-<em>emphasised italic text</em>  
-<u>underlined text</u>  
-<s>strikethrough</s>  
-<mark>highlighted text</mark>  
-<small>smaller text</small>  
-<sub>subscript</sub>  
-<sup>superscript</sup>  
-<pre>pre-formatted text (keeps spaces & line breaks)</pre>  
-<code>inline code</code>  
-<a href="https://example.com">clickable link</a>  
-<a href="mailto:email@example.com">email link</a>  
-<a href="tel:+1234567890">phone link</a>  
-<button>click me</button>  
-<ul>
  <li>Item 1</li>
  <li>Item 2</li>
 </ul>
-<ol>
  <li>first item</li>
  <li>second item</li>
 </ol>
-<table>
  <tr>
    <th>header 1</th>
    <th>header 2</th>
  </tr>
  <tr>
    <td>data 1</td>
    <td>data 2</td>
  </tr>
 </table>
-<img src="image.jpg" alt="image description">  
-<video controls>
  <source src="video.mp4" type="video/mp4">
 </video>  
-<audio controls>
  <source src="audio.mp3" type="audio/mpeg">
 </audio>  
-<iframe src="https://example.com"></iframe>  (embed external content)
-<svg width="100" height="100">  (scalable vector graphics)
  <circle cx="50" cy="50" r="40" stroke="black" stroke-width="3" fill="red"/>
 </svg>
-<canvas></canvas>  (drawing graphics using javaScript)
-<form action="submit.php" method="post">
  <label for="name">Name:</label>
  <input type="text" id="name" name="name">
  <label for="email">Email:</label>
  <input type="email" id="email" name="email">
  <label for="password">Password:</label>
  <input type="password" id="password" name="password">
  <input type="submit" value="Submit">
 </form>
-<script>console.log('JavaScript Loaded!');</script>  (javascript)
-<link rel="stylesheet" href="styles.css">  (external CSS)
-<style>body { background-color: black; }</style>  (internal CSS)
-<noscript>Your browser does not support JavaScript.</noscript>
-<abbr title="HyperText Markup Language">HTML</abbr>  (abbreviation)
-<address>contact info here</address>  
-<progress value="50" max="100"></progress>  (progress bar)
-<meter value="7" min="0" max="10"></meter>  (measurement)
-<details>
  <summary>Click to expand</summary>
  <p>Hidden details here.</p>
 </details>


[code courses]
[codechef]


Solving pattern question with this trick:
-patterns are important because it enhances our thought process & building foundation
-usually interviewers don't ask this
-approaching problem -run outer for loop number of times you are having lines
		    -inner for loop is for column & outer for loop is for rows
		    -identify for every row number, how many column are there or types of element in 
                      column
		    -what you need to print
		    -try to find formula relating to row & column
		    -


UI/UX design with Figma:
-wire framing is very important as visual blueprint
-works as schema for functionality of system
-home page(header & footer), about us page, features page, contact page
-UI components are often dynamic & may need to change state of their data
-section breaks, testimonials & sponsors section, footer section, logo, contact form & site map
-parallax scrolling, labelling is important
-different layouts for different pages
-UI layout by Figma -selecting frame tool
-grid, gutter, shapes
-Understanding UI and UX
-UI (user interface) -focuses on look & feel of product —visual design, typography, colour schemes, 
                      interactive elements
-UX (user experience) -involves how users interact with product —research, usability, functionality, &  
                       user flow
-design thinking process 
-empathise -understand user needs through research
-define -identify core problems
-ideate -brainstorm solutions
-prototype -create mockups or wireframes
-test -validate with real users
-quantitative research -surveys, analytics, A/B testing
-qualitative research -interviews, observations, usability tests
-personas -create fictional characters representing user groups
-journey maps -visualise user steps to achieve goal
-hierarchy -prioritise content by importance
-navigation -design menus, tabs, and breadcrumbs
-sitemaps -visualise structure and pages
-labelling -ensure intuitive labels for buttons & links
-wireframe: Low-fidelity outline using simple shapes for layout
-prototype: Interactive model for testing flows
-tools: Figma, Sketch, Adobe XD, InVision
-low-fidelity -basic sketches & layout
-high-fidelity -detailed design with colours, fonts, images
-typography -choose fonts for readability (sans-serif for digital interfaces)
-primary colours -main brand colours
-secondary colours -accents
-contrast: Ensure readability (WCAG standards)
-spacing: Use grids and paddings consistently
-icons: Ensure clarity — use recognisable symbols
-micro-interactions -small animations for feedback (button clicks, loading spinners)
-affordances: Design elements showing function (buttons look clickable)
-feedback: Visual/sound responses to actions (errors, success)
-animations -enhance, don’t distract —smooth transitions
-WCAG (web content accessibility guidelines) -ensure designs work for all abilities
-contrast ratios -minimum 4.5:1 for text
-keyboard navigation -ensure full site navigation without mouse
-ARIA (accessible rich internet applications) -add attributes for screen readers
-clarity -write clear, actionable microcopy for buttons & forms
-tone -match brand personality —formal, playful, neutral
-error messages -be specific (invalid email format)
-placeholders -guide, don’t replace labels
-components -reusable UI elements —buttons, forms, modals
-patterns -consistent design decisions —card layouts, nav bars
-tokens -variables for colours, spacing, typography
-A/B Testing -compare design versions with user data
-usability testing -observe real users interacting with prototypes
-heatmaps -tools like Hotjar to visualize user clicks
-feedback loops -rapid testing cycles —build, test, iterate
-design specs -provide spacing, fonts, colours for devs
-redlining -highlight margins, paddings, and alignments
-version control -ensure clear design iterations
-dark mode -adjust contrast, colours, readability
-neumorphism -soft UI —subtle shadows, glowing elements
-glassmorphism -frosted glass effects —transparency & blur
-responsive design -fluid layouts for all screen sizes


Troubleshooting problems in network:
-identify layer where problem is
-divide network in layers -physical layer -all cable good, all correctly plugged 
                                          -unstuck electron in cables
                          -physical wifi -checking signal, distance, what walls made of
                                         -powered aluminium blocks radar signals
                          -devices -all working, connecting to them directly 
                          -SO -OS can recognise each other, protocol they use
                          -software -disable firewall & test it
                          -internet -fault in internet provider
-top, free, lscpu (checking processor, memory stat & virtual memory stat)
-df -u, du, instat, lsof (checking disk)
-tcpdum, iftop, netstat, traceroute (checking network)
-iscpu, isblk, ispci, uptime (checking hardware & other things, physical damage, system uptime)
-troubleshoot wifi connectivity is slow -check internet speed
                                        -reboot your modem & router
                                        -improve wifi position
                                        -using QoS to fix slow internet (dividing available bandwidth 
                                         on wifi network b/w application)
                                        -try changing DNS (google public DNS & open DNS)
-troubleshoot device is overheating -check & clean fans, elevate dives for proper ventilation, keep 
                                     device away from heat
                                    -avoid using intense process
                                    -nice, iscpu, isblk, ispci, uptime
-troubleshooting running -identify process causing memory usage
                         -top, kill, systemctl, nice, renice
                         -add swap space & external swap space
                         -add memory physically & virtually
                         -troubleshoot usable to connect to internet
                         -look for any physical connection cable-related issues
                         -check for router light/ restart your router
                         -check whether you are using correct SSID (router name)
                         -run windows network troubleshooting if using windows
                         -reset TCP/IP -netsh init ip reset
                         -flush dns -ipconfig/flushdns
                         -release/ reset IP -ipconfig/release ipconfig/renew


Using Github for collaboration & projects:
-collaborations, access system, organisations
-creating folder on desktop 
-git clone http....
-git status
-git add .
-git commit -m 'Modified readme'
-git push origin main
-git branches 
-main or master branch -


Setup of Pc:
-package manager
-remote connection
-WSL
-snippet
-ide inside terminal
-naming framework
-cacheing
-tailwind


[Start coding as soon as possible]
[Be so much skilful and do your preparation that even if you get 1 interview you will grab that offer]
 DRM & error handling
-


Semiconductor:
-


Cache memory:
-cache memory is faster than main memory
-consumes less access time as compared to main memory
-stores programs to execute within short period of time
-stores data for temporary
-limited capacity, expensive


Linux torvald:
-avoiding any stimulations but light green colour is good for calmness
-enjoying programming
-Be engineer & solve problems on ground
-giving feedback on code & open source contributions


JSON:
-javascript object notation
-simple text, compact, easy to learn, easy to read & understand
-storing temporary data, user generated data, submitting form on website, data formating
-lightweight data-interchange format
-based on subset of javascript
-easy to read & write
-often used with AJAX
-number -no difference between integer & floats
-string -string of unicode characters, use double quotes
-boolean -true & false
-array -ordered list of 0 or more values
-objects -unordered collection of key/value pairs
-null -empty value
-uses key/value pairs {"name":"brad"}
-use double quotes around key & value
-must use specified data types
-file type is ".json"
-MIME type is "Application/json"
-[{"id": 100, "name": "ankur"}, {"id": 110, "name": "rohit"},]


Fiber optic cable:
-speed of light & can go so far
-low attenuation, 60 miles man cave
-core) cladding) coating) strength member) outer jacket)
-concept of total internal reflection 
-core -what light travels through
-coating -125 microns
-multimode -10x larger than single mode, 50-62.5 microns (50Um) plastic
           -less expensive, used to connect network equipment
-single mode -more expensive, connecting buildings, glass, 12 microns (12Um)
-connector -SC (suscriptor connector), ST (straight tip), LC (Lucent connector), FC (ferrule 
            connector), MT-RJ (miniature RJ-45)
-polishing types -PC (physical contact)
                 -UPC (physical contact)
                 -APC (handled physical contact)


Docker:
-running we browser inside docker container, great for security research
-inherits all amazing isolation features of docker containers
-docker run -d ........
-docker ps
-localhost:3000 on web browser
-make sure to change port while running different things
-ps folding 
-docker container ls
-docker container ls --all
-portainer inside docker desktop
-dangerzone (detect dangerous pdfs --> safer pdfs)
-mkdir fabrictool
-cd fabrictool
-nano Dockerfile
-docker build -the-fabric .
-docker image ls
-running kali linux on browser
-docker networks (running little isolated networks)
-docker network create mynetwork
-docker network create --internal hackinglab
-docker network connect hackinglab kali-linux
-docker inspect kali-linux
-vulnerable containers 
-docker run --rm -it network hackinglab vulnerables/web-dvwa
-docker inspect
-mkdir mylab
-cd mylab
-docker-compose up -d
-docker inspect w
-docker run -itd rockylinux
-dockerpi
-docker run -itd 'lukechilds/dockerpi:latest' locally
-IT tools
-docker run -d -p 8080:80 it-tools -it corentinth/it-tools


Decimal number conversion:
-decimal number system (uses 10 digits 0,1,2,3,4,5,6,7,8,9)
-binary number system (uses 2 digits 1 & 0)
-octal number system (uses 8 digits 0,1,2,3,4,5,6,7)
-hexadecimal number system (uses


[OverAPI.com]
[peakpx]


React.JS:
-Javascript library for building user interface
-simplicity of building component
-react itself does not care about routing, state management, animation
-you have endless supply of choices to get things done way you like it
-special hook functions 


File formates:
-MP3, MP4, MP5 -used to store 7 play digital audio & video
-MP3 (mpeg-1 audio layer 3) -uses lossy data compression to reduce file size of audio files
-MP4 (mpeg-4 part 14) -digital multimedia container formate that store audio, video other kinds of data 
                       (subtitles & images)


Kubernetes:
-open source orchestration system for automating deployment scaling & management of containerised 
 application (cncf graduated project)
-K8s is massive piece of software
-distributed system called Borg, Omega
-K8s is designed for massive scale (100s & 1000s of containers & pods) 
-it can on anything like raspberry pie, perimeter system, virtual machine, clouds
-running 2,3,4 containers are fine but scaling is important (micro services)
-if we don't have K8s: -have to write many custom scripts to monitor different environments
		      -we cannot run multiple pods on multiple nodes
		      -no auto scaling & no flexibility
		      -no self healing capabilities (20 copies of application running)
		      -scheduling & monitoring
		      -expanding from small scale --> large scale easily
		      -managing how hey run & where they run
-kubectl -command line tool to interact with cluster
	 -request goes to API server
	 -
-


Terraform:
-terraform = tool for building, changing, versioning infrastructure, safely & solely & efficiently
-infrastructure as code tool allows you to define your entire cloud infrastructure as set of config  
 files & interact with cloud provider API & manage on behalf of us
-terraform can interact with pretty much anything in cloud with API
-earlier we had to come up idea --> write code --> buy bunch of expensive servers in data centres 
 (handle all power management, networking & operational overhead (very challenging)
-now you just need to deploy on cloud (paying cloud providers to spin up & spin down servers)
-issue call like 5 more servers (triple, double size of infrastructure in few minutes & scale up 
 quickly) (Black Friday example) (using servers dependencies already installed & tear down old 1s & 
 destroying 1s we don't need)
-IaC (infrastructure as code) -you know exactly what is provisioned at any given time 
			     -if you are provisioning multiple environment stating env & production env then you can specify in your code
			     -using power of P.languages to have copies
			     -confident that they are deployed identically
			     -


Never write bug:
-Read more & more documentation carefully
-read all cryptic error messages carefully
-google it 
-debugging with logging
-learning full API of logger in language to maximise efficiency
-debugger is more sophisticated way to run & inspect your code
-reproduce bug


Amazing Developer Tools:
-BundlePhobia = web application tells how much NPM package add to your total bundle size (working with modern modern front-end framework (keeps as small as possible to optimise initial page load for new users 
-Cloud-craft = design & budget cloud infrastructure (only available for AWS, GCP, drag&drop interface (estimated breakdown of total cost) (Azure)
-Figma = 10x valuable than adobe illustrator, creating mockups for your apps
-font-flipper = choosing fonts for your design
-Viz-bug extension 
-Insomnia = debugging APIs (REST API/ graphQL API) (keeping entire workflow organised)
-flare = design tool, specially 2d vector images, high performance animations


Cryptography concepts:
-cryptography = science of creating secrets
-quantum computers can crack those algorithm with brute force
-Hash = Chop & mix (fast & unique) (very difficult for computers to reverse engineer) cracking hash to access password in database of password
-Salt = some stupid humans make password123 (adds salt in-between password)
-HMAC = token (when user login on trusted server it generates token with its key & client & server can pass that back & forth)
-symmetric encryption 
-key-pairs = private key & public key
-asymmetric encryption 
-signing = digital signature


Building home server:
-centralised storage solution can b access from anywhere (save so much time) (trying to transfer file from 1 computer to another)
-setting up virtualisation background & dabble with other OS 
-NAS (network attached storage) (sharing hard drive to multiple drive in your computer
-Media server
-home theatre gaming PC
-virtualisation playground
-


Game development:
-idea --> designing game --> making --> testing --> finalising --> publishing
-98% websites use javascript
-kaboom
-creating hazards
-python is high level language pretty slow
-Py-game 
-framework is library of code & do all hard stuff 
-collision system
-c++ is powerful & complicated
-ray-lib
-SDL
-sound library


Unity:
-unity's core -Editor Layout -scene view: For designing your game
                             -game View: How the game looks during play
                             -Hierarchy: Contains all objects in your scene
                             -Inspector: Shows properties of selected objects
                             -Project Window: Stores your assets (scripts, models, textures).
                             -Console: Logs errors, warnings, and debugging messages.
-Scripting Essentials Learn Unity's key functions:
Awake(): Called when the script instance is loaded.
Start(): Called before the first frame update.
Update(): Called once per frame.
FixedUpdate(): For physics updates.
OnCollisionEnter(), OnTriggerEnter(): For collision detection.
Understand Coroutines (for timed actions).
5. Create Your First Scene
Add a 3D object (e.g., Cube, Sphere) from the GameObject menu.
Add a camera and ensure it points toward your object.
Add a light source (Directional Light for overall illumination).
-physics -attach rigid body to objects for physics (gravity, collision)
         -use scripts to move objects -void Update() {transform.Translate(Vector3.forward * 
                                       Time.deltaTime * speed);}
-UI Design -use unity's canvas system -add text, buttons & images from UI menu
                                      -adjust RectTransform for positioning UI elements
                                      -use event system for interactivity
-camera & cinematic -adjust field of view (FoV) for zoom effects
                    -use Cinemachine for smooth camera movements & following targets
                    -add post-processing effects for visual enhancement
-audio -add AudioSource to objects
       -play sounds using -GetComponent<AudioSource>().Play();
       -use audio mixer to manage sound levels
-Animation -use animator -create animation clips in animation window
                         -attach them to objects
                         -control animations with parameters in animator controller
                         -trigger animations through scripts
-material & shaders -create materials for objects -use textures for detail (diffuse, normal maps)
                                               -experiment with unity's shader graph (advanced effects)
                                               -apply materials to objects by dragging them onto mesh
-environment design -import terrain tools for creating landscapes
                    -add trees, grass, water for realism
                    -use unity asset store for free or paid assets
-AI behaviours -NavMesh for pathfinding
               -use scripts for decision-making (FSMs, behaviour trees)
-save & load system -save player progress using -PlayerPrefs (small data)
                                                -File I/O or JSON (larger, custom data)
                                                -use serialisation for saving objects
-optimisation -physics -use fewer colliders, adjust time settings
              -graphics -LOD (level of details) for distant objects, bake lighting when possible
              -script -use fixedUpdate only for physics, avoid unnecessary calculations
-build & deployment -settings -select platform (PC, Android), configure player settings (resolution, 
                  icons), test builds regularly on target devices, use Unity cloud build for automation


GameMaker:
-game engine designed for both beginners & advanced users
-languages supported -drag-&-drop (DnD) -visual scripting for beginners
                     -GameMaker language (GML) -scripting language for advanced game logic
-workspace -create & manage all game assets & objects
-resource tree -lists all game elements like sprites, objects, rooms
-room editor -design your game levels or environments
-object editor -define behaviours & properties for game objects
-code editor -write GML scripts or use DnD for programming logic
-core concepts -sprites -images or animations represent game characters, items, UI elements
                        -import or draw sprites using GameMaker's built-in editor
                        -use consistent resolutions for your sprites (32x32 or 64x64)
               -objects -represent entities in game (player, enemies, walls)
                        -attach sprites & code to objects to define their behaviour
               -rooms -scenes where gameplay happens (levels, menus)
                      -place objects, tiles & backgrounds in rooms
               -events & actions -triggers like collisions, key presses, timers
                                 -responses to events (moving, jumping, shooting)
               -scripts -write reusable code snippets in GML, script for checking collision with walls
-intermediate topics -physics -built-in physics engine for realistic movement, gravity to player object
                     -camera & viewports -create scrolling camera to follow player
                                  -camera_set_view_pos(view_camera[0], player.x - 400, player.y - 300);
                     -particles -create effects like explosions or rain using particle system
                     -audio -import sound files (MP3, WAV)
                            -audio_play_sound(sound_jump, 1, false);
                            -saving & loading -Save player progress using files or JSON
-advanced features -shaders -add visual effects like lighting, shadows, post-processing
                   -multiplayer -networking functions for multiplayer games
                   -publishing -export your game to various platforms after testing & debugging


Open source projects:
-slow website -> after creating small bundle of javascript product manager tells to add mix-panel, google analytics, intercom (3rd part scripts slows down main thread) (party thread = 3rd party script run from web worker) (JS is single thread but modern website allows you to run background jobs (worker thread) manuscript offload any script that don't deal directly with UI into web worker)
(Only thing on main thread is UI)
-Super-token = open source authentication solution  provide SDKs for runtime like node & python
(Allows you to host fully featured authentication system with support for auth provider, password-less logins, sessional management & security)
-Hi-mom = JS library says hi to your mom in record time
-Meilisearch or Zinc = building full tech search engine for internal data & customer
-tRPC = (RPC remote procedure call just URL on server corresponds to function you want to run on server & no schemas & code generation needed like graphQL) generally rest & graphQL used to build API
-NocoDB = open source air table build on top of mysql or postures database (smart spreadsheet)
-Hoppscotch = build with vue.js & typescript entire as progressive web app (allows to interact with file system)
-danfo.js = inspired by pandas & can read csv file & process data within it
-Manline = has nice-looking timelines & helps to make good looking UI & handle annoying things like debouncing input & paginating collection of items
-amplification = automatically generate backend code based on relationship to data model in databases


Web 1,2,3:
-chrome --> brave, YouTube --> rally, WhatsApp --> status, PayPal --> trust wallet, LinkedIn --> trust 
 in dorse
-web 1.0 -basic web pages, html, e-commerce, java & javascript
-web 2.0 -social media, user generated content, mobile access, high quality camera & video, apps, high 
          speed, communication, global internet access
-web 3.0 -semantic web, dynamic apps, users monetise their data, NFTs, VR & AR (meta verse), permission 
          less blockchains, artificial intelligence, interoperability


Build WEB3 app to mint unlimited NFTs:
-uploading to interplanetary file system
-smart contract with solidity & open zeppelin (vending machine in cloud when nft collection is 1st 
 offered & you can send crypto to wallet address 
-transferring ether to smart contract
-using enter with react 
-NFT = non fungible token (unique digital asset) represent piece of artwork, domains & physical items
-bored ape & cyber punks are created using base layers (hairs, beard, clothing) -----> combined 
 randomly to create bunch of unique graphics
-secondary market to buy & sell
-royalty payment whenever NFT changes hands in future
-taking few images & creating 1000s of unique combinations
-creating images ---> layers directory ---> index.js (SVG template) ---> use nodejs to read 1 of layer 
 ---> grab content in SVG tags ---> function to generate random numbers & combine them in array
-creating json file with metadata about it
-metadata contains link to file & actual image on interplanetary file system ---> unique file upload 
 can't be modified
-each trait has different level rarity 
-more trait NFT has --> more value (artificial scarcity)
-node package called sharp
-IPFS similar to bit-torrent
-every-time you upload file --> creates unique identifier for that upload
-cannot modify without changing content identifier
-pinata similar to dropbox
-


Creating NFT:
-plan NFT layers -base animal (e.g., Dog, Cat, Wolf, Tiger, etc.)
                 -hairstyle (long, short, bald, spiked)
                 -beard (full, stubble, no beard)
                 -clothing (shirt, jacket, hoodie)
                 -pants (jeans, shorts, trousers)
                 -accessories (sunglasses, hats, chains)
-each layer is separate PNG image with a transparent background.
-write code in python
-rarity system -assign rarity probabilities to layers (golden shirt -5% probability)
-metadata creation -store JSON metadata for each NFT
-NFT minting -upload images to IPFS (inter-planetary file system) for blockchain storage
-smart contracts -use solidity & Ethereum (ERC-721) to mint NFTs
-upload to IPFS (store NFTs & metadata on decentralised storage)
-mint as NFT on blockchain (Ethereum, polygon, solana)
-sell on OpenSea/ rarible


Maths in game development:
-irony is that we need to know lot of math to avoid doing math
-


Maths:
-permutation -arrangement of items where order matters
             -arranging ABC gives ABC, ACB, BAC, BCA, CAB, CBA (6 different ways)
             -P(n,r)= n!/ (n-r)! (n items, arrange r of them)
             -password security -arranging different characters (123ABC different from 321ACB)
             -racing rankings -different orders of winners (gold, silver, bronze)
             -seating arrangements -assigning different seats to people at table
-combination -selection of items where order doesn’t matter 
             -choosing 2 letters from ABC -AB, AC, BC (only 3 ways)
             -C(n,r) = n!/ r! (n-r)! (n items, select r without caring about order)
             -lottery tickets -choosing 6 numbers from 49, order doesn’t matter
             -selecting team members -choosing 3 players from 10 to form team
             -food menus -selecting 2 toppings for pizza (cheese & pepperoni is same as pepperoni & 
                          cheese)


Building 3d website:
-cameras, lighting, geometry
-three.js
-you can use 3d models directly into three.js
-npm init @vitejs/app
-npm install three
-npm run dev (serving app on localhost 3000)
-


Cloud cost optimisation strategy:
-managing & maintaining cloud expenses
-extensive customer base
-cloud cost increases as more customer join (may destroy your financial stability)
-cloud monitoring is important = only gives you visibility (does not help in optimisation & management)
-[better be safe than sorry]
-Cost AI 
-


Teleport:
-most easiest  most secure way to access infrastructure
-open source tool
-designed to provide access for your infrastructure without slowing down work process
-unified access to linux & window servers
-monitoring dashboards & version control system 
-gives engineers to explore & work on their stuff & increase productivity
-not slowing down networking access management for complex system
-easy software = less human errors
-ssh server in multiple environments
-working -auth service = certificate authority of cluster (issues certificate to client) (maintain audit)
	-proxy = allow cluster resources from outside (only service the is visible)
	-routs request of user to target resource through proxy
	-client authenticate with teleport
	-for product the recommend integrating with enterprise SSOS
	-can also add third-party storage


Docker:
-application used to run-on servers (only 1) (load increase than more servers needed)
-virtual machines require their own operating system 
-virtual machines needs CPU power, GPU power, dedicated amount of hard disk storage
-various dependencies, packages, modules (running on 1 machine not on other machine)
-solution = by containers (running 100s & 1000s of application on 1 OS)
-putting your software in box & give your box to other developer
-hypervisor = create multiple machines on host operating system
-container engine
-containers on top of virtual machine
-windows container require windows host & linux require its host
-WSL (windows)
-docker = containers platform that helps us in making those containers, replying them & scaling them
-docker hub, docker engine
-running in isolated environment
-runtime = allows to start & stop container
-run c, container d
-engine, daemon
-orchestration = if app running on 10000 containers --> 20000 containers & 500 get ruined (automatically starts it) (manages containers) (saves our time)
-soup & recipe & instructions example (dish is actual application)
-creating an image of my application & share that image 
-docker image (file that contains all instruction) (can be created by using docker files) (its like  template) 
-container is running instinct of an image
-docker files can run docker images
-docker file running --> you run image --> you will get your container
-docker desktop 


Git hooks:
-when you are committing something (make commit & want script to run)
-empty git repository
-many version control system & way to fire off some custom script when certain important action occur
-git init --> hook (directory)
-hooks -client side hooks
       -server side hooks
-.git
-cd hooks
-pre-commit.sample pre-commit
-ls -a
-vi pre-commit
-echo "I am running"
-touch name.txt
-git add .
-git commit -m "test"
-cp yaml_file
-cat yaml_file
-datree test yaml_file -p ankur
-


-stock options
-fizz-buzz
-tactile switches
-linear switches
-computer architecture 
-Natural Language Processing (NLP)
-Data Mining
-Corporate Espionage
-Privacy Laws and Regulations (GDPR, HIPAA, etc.)
-Signal Jamming
-Telecommunications Tapping
-RFID (Radio Frequency Identification)
-Digital Forensics


Shell Scripting
IP Addresses
DNS (Domain Name System)
TCP/IP (Transmission Control Protocol/Internet Protocol)
HTTP/HTTPS (Hypertext Transfer Protocol/Secure)
FTP (File Transfer Protocol)
SSH (Secure Shell)
VPN (Virtual Private Network)
Proxy Servers
Network Sniffing
Packet Analysis
Wi-Fi Security
Firewalls
Network Intrusion Detection Systems (NIDS)
NAT (Network Address Translation)
Encryption
Decryption
Public Key Infrastructure (PKI)
RSA Encryption
AES (Advanced Encryption Standard)
PGP (Pretty Good Privacy)
SSL/TLS (Secure Sockets Layer/Transport Layer Security)
Hash Functions
SHA-256
MD5
Digital Signatures
Cryptographic Keys
Steganography
Hacking
Penetration Testing
Phishing
Keylogging
DDoS (Distributed Denial of Service)
Zero-Day Exploit
Man-in-the-Middle Attack
Backdoor
Exploit Kit
Malware
Trojan Horse
Virus
Worm
SQL Injection
Cross-Site Scripting (XSS)
Buffer Overflow
Code Injection
Credential Stuffing
Privilege Escalation
Password Cracking
Robots
Drones
Autonomous Vehicles
Unmanned Aerial Vehicles (UAVs)
Automation Systems
Robot Manipulators
Actuators
Control Systems
GPS Tracking
Surveillance Devices
Microphones
Cameras
Wearable Technology
Smartphones
Signal Jammers
Bug Detectors
Biometric Scanners
Electronic Keypads
Secure Communication Channels
Satellite Communication
Radio Frequencies
Encrypted Messaging
Walkie-Talkies
Signal Boosters
Neuro-implants
Genetic Engineering
DNA Sequencing
Biohacking
Chemical Agents
Toxins
Vaccines
Antidotes
Medical Imaging
Brain-Computer Interface (BCI)
Fluid Dynamics
Thermodynamics
Materials Science
Climate Models
Seismology
Wifi jammer
Hydrology
Meteorology
Geospatial Analysis
Environmental Monitoring
Pollution Control
Renewable Energy
Virtual Reality (VR)
Augmented Reality (AR)
Holograms
Internet of Things (IoT)
Smart Home Systems
Nanotechnology
Renewable Energy Sources
Advanced Prosthetics
Crisis Management Software
Neuroscience
Psychological Profiling
Behavioural Analysis
Cognitive Science
Memory Enhancement
Ethernet
Wi-Fi
IP Address
DNS (Domain Name System)
Firewall
Proxy Server
VPN (Virtual Private Network)
Packet Switching
-Encryption
Password Security
Two-Factor Authentication
Phishing
Malware
Virus
Firewall
Data Breach
Hackers
Network Security
-Help Desk
Ticketing System
Technical Support
Troubleshooting
Rebooting
Software Installation
Hardware Replacement
System Diagnostics
User Error
IT Policies
-Cloud Computing
Data Center
Backup Systems
Disaster Recovery
VoIP (Voice over Internet Protocol)
Remote Desktop
Virtual Private Server (VPS)
IoT (Internet of Things)
Smart Devices
Scanners
Fax Machines
Photocopiers
Conference Calls
Projectors
-Version Control Systems (VCS)
SVN (Subversion)
Continuous Integration (CI)
Bug Tracking
Code Repository
IDE (Integrated Development Environment)
Agile Development
Scrum
-Phishing
Data Breach
Cyber Forensics
Quantum Computing
Artificial Intelligence (AI)
Machine Learning
Algorithm
Big Data
Data Mining
Network Security
-Virtual Reality (VR)
Augmented Reality (AR)
Mixed Reality (MR)
Simulations
Haptic Feedback
Immersive Environments
Brain-Computer Interface (BCI)
Neural Implants
Full-Dive VR
-Mass Surveillance
Facial Recognition
Behavioral Tracking
Biometric Data
Data Mining
Cybersecurity
Privacy Invasion
Surveillance Drones
Electronic Monitoring
-Social Credit System
Reputation Management
Digital Footprint
Online Persona
Virtual Identity
Influencer Culture
Cyberbullying
Social Media Algorithms
Echo Chambers
-Genetic Editing
CRISPR
Cloning
Biometrics
DNA Sequencing
Gene Therapy
Synthetic Biology
Biohacking
Transhumanism
-Cyborgs
Bionic Limbs
Neural Augmentation
Enhanced Senses
Brain Implants
Exoskeletons
Human Enhancement
Sensory Augmentation
Cognitive Enhancement
-
Cryptocurrencies
Blockchain
Virtual Currencies
Digital Transactions
Smart Contracts
Decentralized Finance (DeFi)
Tokenization
Cryptographic Security
Digital Wallets
-Force Fields
-Exoskeletons
-Androids - Human-like robots with advanced AI
Autonomous Vehicles - Self-driving cars and other automated transport systems
Industrial Robots - Robots used in manufacturing and other industrial applications
Service Robots
-Biohacking - DIY biology and personal enhancement using technology
Cryonics - Preservation of humans at low temperatures for potential future revival
Regenerative Medicine - Techniques to regenerate damaged tissues and organs
Neural Interfaces
-Space Travel - Technology enabling travel beyond Earth
Orbital Satellites - Satellites used for communication, navigation, and surveillance
Asteroid Mining - Extraction of minerals and other resources from asteroids
Space Colonization 
-Biometrics - Identification using unique biological characteristics
Electromagnetic Spectrum - Range of all types of electromagnetic radiation
Genomics - Study of genomes and genetic information
Nanomaterials
-Cybernetic Eye - Advanced artificial eye with enhanced vision and capabilities
Implants
-


NOS vs DOS:
-NOS (network operating system) -remotely service multiple clients
                                -communication is file based/ shared folder based
                                -scalability NOS is more scalable
                                -fault tolerance in network OS is low
                                -ease of implementation
                                -open
                                -rate of autonomy high
                                -resources are handled at each node
                                -loosely coupled & used in homogenous computers
                                -2-tier client-server architecture
-DOS (distributed operating system) -better management of hardware resource
                                    -communication is mostly message-based/ shared memory based
                                    -scalability DOS is less than NOS
                                    -high fault tolerance
                                    -ease of implementation is low
                                    -closed
                                    -resources are managed through global central/ distributed 
                                     management
                                    -low rate of autonomy
                                    -tightly coupled & used in multiprocessor homogenous computers
                                    -N-tier client-server architecture


DOS vs windows:
-DOS -DOS is difficult to learn
     -required less memory space to be installed
     -supports single-processing
     -size of DOS is smaller than windows
     -supports use of only keyboard
     -require less powerful hardware
     -supports only 16-bit file system
     -doesn't provide plug & play facility
     -DOS required less powerful hardware to run
-Windows -windows is easy to learn
         -windows required more memory space to be installed
         -windows supports multi processing
         -size of windows is bigger than DOS
         -support use of keyboard & mouse
         -provides plug & play facility
         -supports 16-32 bit file system
         -requires more powerful hardware to run


Trees:
-hierarchical structure used to represent & organise data in form of parent child relationship
-topmost node = root, nodes below that are child nodes
-each node have multiple child nodes 
-
-child nodes have their own child nodes (forming recursive structure)
-tree are not stored in a sequential manner i.e., they are not stored linearly
-types -binary tree -each node can have max of 2 children linked
                    -binary trees, complete binary trees, balanced binary trees, degenerate or pathological binary trees. Examples of Binary Tree are Binary Search Tree and Binary Heap.
                    -ternary tree -tree data structure, each node has at-most 3 child nodes,
                                   left, mid, right
                    -N-ary tree/ generic tree -collection of nodes, each node is data structure that consists of records & list of references to its children(duplicate references are not allowed). Unlike the linked list, each node stores the address of multiple nodes.
-basic operations -Create –create tree in data structure
                  -insert −inserts data in tree
                  -search −searches specific data in tree to check whether if present/ not
                  -traversal -depth-first-search traversal, breadth-first-search traversal
-properties -Number of edges: An edge can be defined as the connection between two nodes. If a tree has N nodes then it will have (N-1) edges. There is only one path from each node to any other node of the tree.
Depth of a node: The depth of a node is defined as the length of the path from the root to that node. Each edge adds 1 unit of length to the path. So, it can also be defined as the number of edges in the path from the root of the tree to the node.
Height of a node: The height of a node can be defined as the length of the longest path from the node to a leaf node of the tree.
Height of the Tree: The height of a tree is the length of the longest path from the root of the tree to a leaf node of the tree.
Degree of a Node: The total count of subtrees attached to that node is called the degree of the node. The degree of a leaf node must be 0. The degree of a tree is the maximum degree of a node among all the nodes in the tree.
-

-Advantages -efficient searching & retrieving data & cost efficient
            -time complexity of searching in tree is O(log n) in AVL & red black trees
            -better than arrays & linked list but not hashing
            -trees provide sorted data, search for floor & ceiling of data
            -fast insertion & deletion nodes in self balancing binary search trees (AVL & Red Black can   
             done in O(log n) time, better than arrays & linked list
            -makes easy to organise & navigate large amounts of information
            -recursive nature makes easy to traverse & manipulate using recursive algorithms
            -natural organisation -used to represent many types of relationships
            -useful for representing things like file systems, organisational structures, taxonomies
            -flexible size -unlike arrays, trees can easily grow/ shrink dynamically depending on   
             number of nodes that are added or removed 
            -useful for applications where data size may change over time
-disadvantages -memory overhead -require significant amount of memory to store
               -not good for applications having limited memory resources
               -imbalanced trees -result in uneven search times (speed is critical)
               -complex 
-applications -folder structure in OS, databases, algorithm/ networking, complex mathematics, DTS -> 
               ML, compression of files
              -tag structure in HTML (root tag = html tag), XML document


Binary trees:
-Node: 
      Int value;
      Node left;
      Node left;
-every circle is pointing to another 2 circles
-


AVL tree:
-self-balancing binary search tree (BST), difference b/w heights of left & right subtrees for any node 
 can't be more than 1
-difference b/w heights of left subtree & right subtree for any node (balance factor of node)
-left rotation -node is added into right subtree of right subtree, if tree gets out of balance, do 
                single left rotation
-Right Rotation -node is added to left subtree of left subtree, AVL tree may get out of balance, do  
                 single right rotation
-left-right rotation -combination in which 1st left rotation takes place after that right rotation 
                      executes
-right-left rotation -right-left rotation is combination in which 1st right rotation takes place 
                      after that left rotation executes
-advantages -self-balance themselves & provides time complexity as O(Log n) for search, insert, delete
            -BST only (with balancing), items can be traversed in sorted order
            -balancing rules are strict compared to Red Black Tree, AVL trees have less height & search 
             is faster
            -AVL tree less complex to understand & implement compared to Red Black Trees
-disadvantages  -difficult to implement compared to normal BST & easier compared to Red Black
                -less used compared to Red-Black trees, its strict balance, AVL trees provide 
                 complicated insertion & removal operations (more rotations are performed)
-applications -used when insertions & deletions are less common but frequent data lookups with other 
               operations of BST (sorted traversal, floor, ceil, min, max)
              -Red Black tree is more commonly implemented in language libraries like map (C++), set
               (C++), TreeMap (Java), TreeSet (Java)
              -used in real time environment where predictable & consistent performance is required


API gateways:
-API = application programming interface (menu of different software application to communicate with  
 each other)
-central counter is API gateway (special server or service that sits between parts of your system
 Just like central counter is sitting between all different stalls)
-gateway manage & streamline communication between all parts in software system
-makes things more organised (routing request to correct place, managing security(just like ticket  
 checking), transforming data(different parts of system can understand each other)
-traffic cop/police that direction car
-gathering data from multiple sources creating complete response for client
-security = username, password, API key
-rate limited feature & throttling = preventing client from overwhelming backend services (stable 
 experience for everyone)
-caching = common requests & save response & make it much faster when made again & again (tracking  
 all interaction that passes through it) (logging & monitoring)(like security camera in mall)
-error handling = error messaging for client 
-distributing traffic to multiple instance to prevent overload (multiple cashiers in big  
 supermarket) (load balancing)
-speed efficient
-no need for vendor lock-in
-api 6 (apaches software foundation top level project)(global contributors, 100+ open source   
 plugins, 0.2 seconds of latency, fully dynamic, supports custom plugins in java, apache license,   
 400+ bare metal servers, 1.2 million plus QPS (queries/sec), CNCF cloud native computing  
 foundation, no commercial company has controlled over it
-containerised hcd (database & API 6 using docker)
-curl (command for sending request to API6)
-rout (routing path)(matching clients request to condition that we provide) (loading & executing  
 specific plugins & forwarding request to specified upstream services)


Wifi jamming:
-type of DOs attack, attacker intentionally interfere with wireless network by transmitting  
 electromagnetic interference on active frequencies
-wifi jammer


DDoS:
-types -application layer attack -layer 7 DDoS attack, exhaust resource of your website
                                 -use zombie networks to overwhelm layer of network generate web pages 
                                  & response to application requests
       -protocol attack -little more sophisticated as specifically targets weaknesses in servers by 
                         sending connection request from different IP addresses
                        -disable resource that website use to protect themselves firewalls, load 
                         balancers to more easily disable targeted websites, server
       -volumetric attack -different version of overwhelming traffic sort of attack
                          -flood site with high volume of traffic & connections, effecting bandwidth, 
                           network equipment, server until it crashes


Linker vs loader:
-linker -generate executable files
        -linker takes input of object code generated by compiler/ assembler
        -process of combining various piece of codes & sources code to contains executable code
        -linkage editor & dynamic linker
        -another use of linker is to combine all object modules
        -responsible for arranging objects in program address space
-loader -load executable files to main memory
        -loader takes input of executable files generated by linker
        -defined as process of loading executables code to main memory for further execution
        -absolute, relocating, direct linking, bootstrap
        -allocating address to executable codes/files
        -responsible for adjusting references used within program


Network topologies:
-point-point
-bus
-hybrid
-star
-mesh
-tree
-ring


Website ideas:
-e-commerce -online store, shopping, purchase products
-business website -online presence, building brand & advancing entrepreneurship goals (B2B, B2C)
                  -puffin packaging business, animal music studios
-blog website
-portfolio website -Ryan Haskins
-event website -2023 creative retail awards
-personal website -Laura baross
-membership website -HERoines
-non-profit -LiteracyNYC, MammothMarch
-informational website -Wix encyclopaedia
-online forum -BE RADICAL
-community -out agency, generation she
-startup website -ception, mananalu
-consulting -mikaela reuben
-booking -nutri me
-petition -explain the asterisk
-school website
-hobby
-interactive, entertainment, wedding, travel, directory, landing, news & magazine, memorial, 
 subscription, kid-friendly


Dark web:
-million of people depends on to be safe & anonymous online
-assassination website
-dark web is all about privacy & kept safe by onion or onion relays
-tor network & onion circuits (consisting of 3 onion relays) (servers)
-every time data passed through onions it gets encrypted every time
-every time onion relay is added to dark web it gets better & stronger & faster)
-entry node, middle, exit node
-exit node = most exposed onion, risky & run by institutions & university
-website can see you by IP address & exit node but tor cannot 
-you have to earn your way of becoming guard
-right now all of us middle children
-2 ways = host it in house with spare piece of hardware (Raspy/ old laptop) (any extra bandwidth)
	-running tor really on cloud (very low cost)
-home network should able to handle 7000 concurrent connection
-TP link router is not build to handle ton of data
-need public IPD for address
-going to be behind nat (most common) & need to do some port forwarding
-you might get ADMCA notice/ copyright notice/ letter/ email to ISP
-TOR browser has email template 
-some clouds don't like you running tor browser on network
-digital ocean can be used
-run on dedicated server & not main machine
-launching thermal SSH route at IP address of my server
-set up unattended upgrades
-apt unattended -upgrade
-apt -list changes
-removing all configuration from file
-


Windows commands:
-running command prompt as administration
-ipconfig
-ipconfig /all
-ipconfig /all | finest DNS
-ipconfig /release
-ipconfig /renew
-ipconfig /displaydns
-ipconfig /displaydns | clip
-ipconfig /renew
-ipconfig /flushdns (never ever forget to flush)
-nslookup 
-nslookup networkchuck.com
-cls (clean)
-getmac /v (getting Mac address)
-powercfg /energy
-powercfg /batteryreport
-assoc (tells which files types are associated with which program)
-Is your computer slow
-chkdsk /f (see if disk & look for errors & fix them)
-chkdsk /r (by just rebooting & restarting computer)
-sfc /scannnow (system file checker)
-DISM /Online /Cleanup /CheckHealth (deployment image servicing & management)
-DISM /Online /Cleanup /ScanHealth
-DISM /Online /Cleanup /RestoreHealth
-tasklist
-tasklist | findstr script
-taskkill /f /pid 20184
-netsh wlan show wlanreport (gives wireless report about your wireless)
-netsh interface show interface
-netsh interface ip show address | findstr “IP Address”
-netsh interface ip show dnsservers
-netsh advfirewall set allprofiles state off
-netsh advfirewall set allprofiles state on
-SPONSOR - BitDefender
-ping networkchuck.coffee
-ping -t
-tracert networkchuck.com (trace route)
-tracert -d 
-netstat (ports that you opened)
-netstat -af
-netstat -o
-netstat -e -t 5 (giving sent request every 5 seconds)
-route print
-route add 
-route delete
-shutdown /r /fw /f /t 0
-run as administration
-copy /b kitten.jpg+name_of_folder name_of_photo
-cipher /E
-attrib +h +s +r name_of_folder
-attrib -h -s -r name_of_folder (bringing that back)
-netsh plan show profile
-wlan show profile "Seabufferfly" key=clear
-creating a batch file --> open note pad --> paste command --> save file
-systeminfo
-scp file.txt root@143.42.145.140:~/wifi.bat
-typing cmd in explorer
-explorer.
-subst s: "location"
-color 24
-prompt {hey beautiful}$G
-prompt
-title homesweethome
-curl wttr.in/Dallas
-curl --head --location "" | findstr location
-curl -Is https://......
-checkip.amazonaws.com
-curl qrenco.de/https://......
-curl dict.org/d:contretemps
-start https://......
-telenet telehack.com (type c & q)
-ipconfig/ifconfig
-F7 (open list of previous commands)


2 vs 3-tier architecture:
-2-tier -user --- application ----network------> database system
-3-tier -user --- application ----network------> application server ----> database system


AWS:
-worlds largest collections of awful web services 
-startups addicted to cheap computing resources
-price increases as you become more dependent
-so many services to choose from
-whenever you make something open source they immediately launch service for it (no free & profit)
-clicking on each server 1 by 1 (in case of hack)


Dockerising your app:
-docker = way to package software & run on any hardware
-docker-file = blueprint for building docker image
-docker image = template for running docker containers
-container = running process
-defining environment with docker file --> any developer can use that docker file to rebuild that 
 environment (saved as immutable snapshot)
-images can be uploaded to cloud in both public & private registries
-docker ps (list of all running container on your system)
-docker will cache layer if nothing actually changed
-install your source code --> install dependencies (but in docker dependencies are installed 1st)
-docker build -t fireship
-docker run -p 5000:8080 
-volume = dedicated folder on host machine
-docker volume create shared-stuff
-docker compose = tool for running multiple docker containers at same time
-docker-compose up


Linkedin profile:
-professional networking platform (find people from ay domain)
-you can learn & can teach 
-overview should be strong & web developer
-put everything you have done & know (projects, knowledge, skills)
-collaboration with other people for making any projects
-you can also ask work life balance, work culture
-building strong network (sending many people connection request)
-learning from best
-don't be shy & never be afraid of anything (send 100-500 daily) (keep posting)
-make complete profile (nice pic, open source contribution, GitHub profile link, skills)
-using keywords from job description of company
-follow hashtags
-recruiter mostly gives 10-15 minutes to your profile
-be narrator (be little bit informal) (hustler)
-About should be little long & not short at all
-value addition achievements
-keep updating your profile
-referral is very fast way to get job by off-campus
-codehelp & codechef & leetcode rankings


C programming:
-very popular language
-chances of getting hired is 10x more if you know C language
-popular for less latency, fast speed, game development (expecting action by pressing button)
-MySQL database also written in C language (many production servers & production databases use them)
-linux, Mac, windows (most part is written n C)
-lowest level portable language
-you can get closer to CPU instructions
-apache & NGNX most written in C


Power-shell vs bash:
-Power-shell -default shell on windows
             -syntax of powershelgl is based on .NET framework
             -provides more advanced command line interface with access to .NET framework
             -primarily used for scripting in windows environment
-bash -default shell on linux & macOS
      -syntax of bash is based on UNIX shell
      -provides basic command-line interface
      -primarily used for scripting in linux & unix environments


Bash Scripting:
-Bourne again shell
-shell kind of wraps around linux kernel (shielding us from all inner working of linux)
-making new files, adding new users, hacking
-you need linode lab
-which $SHELL 
-echo "hi mom"
-nano himom.sh
-#!/bin/bash
-echo "hi mom"
-sleep3, echo "uh oh", sleep3 echo "oh yeah"
-ctrl + x
-Y (yes to save)
-bash himon.sh
-ls -l
-rw- (read, write, but not execute)
-rwx (read, write, execute)
-chmod +x himom.sh
-./himom.sh
-bash butter 
-nano bestdayever.sh
-echo ""
-sleep
-chmod +x bestdayever.sh
-./bestdayever.sh
-name="Ankur"
-put $name!! everywhere to change all name at once
-read name
-name=$1
-complicated=$2
-using positional parameter
-./bestdayever.sh abbey eyes
-user=$(whoami)
-date=$(date)
-whereami=$(pwd)
-nano getrich.sh
-chmode +x getrich.sh
-ls -l
-echo $RANDOM (generates number 0-32767)
-echo $SHELL
-echo $USER
-echo $PWD
-echo $USERNAME
-nano getrich.sh
-twitter="elon musk"
-echo $twitter
-export twitter
-ls -al
-export twitter="Elon musk"
-exit
-echo $(( 2 + 3 ))
-nano battle.sh
-echo "do you want fries ? (y/n)"
-read coffee
-if [[$coffee == "y" ]]; then
	echo "you are awesome"
-else 
	echo "get out"
-beast=$(($RANDOM % 2 ))
-echo "1st beast approaching pick number between 0-1 (0/1)"
-read tarnished
-if [[$beast == $tarnished  ]]; then 
	echo "Beast vanquished!! Congrats fellow tarnished"
-else 
	echo "you died"
	exit 1
-fi
-sleep2
-echo "Boss battle get ready pick from (0-9)"
-read tarnished 
-beast $(($RANDOM % 10))
-if [[$beast == $tarnished || $tarnished == "coffee" ]]; then 
	echo "Beast vanquished!! Congrats fellow tarnished"
-else 
	echo "you died"
-fi
-if [[ 2 >= 1 ]]; then
	echo "this is true"
-fi
-elif
-nano pushups.sh
-x = 1
-while [[ $x -le 100 ]]
-do 
	echo "Hey it just did $x pushups"
	(( x ++ ))
-done
-chmod +x pushups.sh
-./pushups.sh

-#! /bin/bash -shebang at beginning of script specifies interpreter
-#! /usr/bin/env -alternative shebang -using environment variable
-$# -store number of argument passes to bash script
-$1, $2, $3 -variable store values passed as argument to bash script
-ctrl + C -keyboard shortcut to stp bash
-$ (command) -execute command inside sub shell
-sleep (pauses specified number of seconds, minutes, hours, day)
-var_name=val -assign value to specified variable
-$var_name -access value of specified variable
-$var_name -variables with special bash script character at beginning must be quoted with double 
            quotes, single quotes
-var_name=$(command) -assign output of commands to specified variable
-readonly var_name=val -prevent value of specified variable to be modified
-$HOME, $PATH, $USER -few predefined environment variables
-$0 -predefined variables stores name of script
-$# -predefined variables stores number of commands line arguments


Raspberry pie:
-python programming language
-
-need tiny micro SD cards (16GB- 32 GB)
-USB adapter
-SD card formatter (make sure to select right 1) (you don't want to destroy your valuable information)
-


Weather = curl http://wttr.in/stockport


SQL (Structured query language):
-language of databases (talk to databases), access & manipulate data
-CREATE (execute insert statement to insert new tuple into relation)
-READ (read data in relation)
-UPDATE (modify insert data in relation)
-DELETE (delete specific data points/ tuple/ row/ multiple rows)
-RDBMS (relational database management system) -software enables to implement relational model
       -MySQL, MS SQL, Oracle, IBM
       -table/relation is simplest form of data storage object in R-DB
-size (TINY < SMALL < MEDIUM < INT < BIGINT)
-commands -DDL -CREATE (create table, DB, view)
               -ALTER TABLE (modify in table structure, change column datatype, add, remove column)
               -DROP (delete table, DB, view)
               -TRUNCATE (remove all tuples from tables)
               -RENAME (rename DB name, table name, column name)
          -DRL/DQL -SELECT
          -DCL -GRANT (access privileges to DB)
               -REVOKE (revoke user access privileges)
          -TCL -START TRANSACTION 
               -COMMIT (apply all changes & end transaction)
               -ROLLBACK (discard changes & end transaction)
               -SAVEPOINT (checkout within group of transaction in which rollback)
-managing DB (DDL) -CREATE DATABASE IF NOT EXISTS db_name
                   -USE db_name
                   -DROP DATABASE IF EXISTS db_name (dropping database)
                   -SHOW DATABASES (lists all database in servers)
                   -SHOW TABLES (list tables in selected database)
-data retrieval language (DRL) -SELECT <set of volume names> FROM <table_name>;
                               -order of execution from left to right
                               -WHERE -reduces rows based on given conditions
                                      -SELECT * FROM customer WHERE age > 18;
                               -BETWEEN -SELECT * FROM customer WHERE age between 0 AND 100;
                               -IN -reduces OR conditions;
                                   -SELECT * FROM officers WHERE officer_name IN ('Ankur', 'Robin');
                               -AND -WHERE condition1 AND condition2 
                               -OR -WHERE condition1 AND condition2
                               -NOT -WHERE col_name NOT IN (1,2,3,4);
                               -IS NULL -SELECT * FROM customer WHERE prime_status is NULL;
                               -ORDER BY -sorting data retrieved using WHERE clause
                               -ORDER BY <column_name> DESC;
                               -DESC = Descending & ASC = Ascending
                                     -SELECT * FORM customer ORDER BY name DESC;
                               -GROUP BY -collect data from multiple records & group result by 1 or    
                                          more column
                                         -groups into category based on column given
                                         -SELECT c1, c2, c3 FROM sample_table WHERE condition GROUP BY 
                                          c1, c2, c3
                                         -COUNT(), SUM(), AVG(), MIN(), MAX()
                                         -DISTINCT -find distinct value in table
                                                   -SELECT DISTINCT(col_name) FROM table_name;
                                                   -SELECT col_name from table GROUP BY col_name;
                                         -GROUP BY HAVING -similar to WHERE
                                         -SELECT COUNT(cust_id) country FROM customer GROUP BY country 
                                          HAVING COUNT(cust_id) > 50;
                                         -WHERE vs HAVING -both have same function of filtering row 
                                                           base on certain conditions
                                                          -WHERE -filter rows from table based on 
                                                                  specified condition
                                                          -HAVING -filter rows from groups based on 
                                                                   specified condition
                                                          -HAVING -used after GROUP BY while WHERE used 
                                                                   before GROUP BY
                                                          -If using HAVING, GROUP BY is necessary
                                                          -WHERE used with SELECT, UPDATE & DELETE 
                                                           keywords while GROUP BY used with SELECT
-constraints (DDL) -primary key -PK not null, unique & only 1 per table
                   -foreign key -FK refers to PK of other table
                                -each relation can having any number of FK
                                -CREATE TABLE ORDER (id INT PRIMARY KEY, delivery_date DATE, 
                                 order_placed_date DATE, cust_id INT, FOREIGN KEY (cust_id) REFERENCES 
                                 customer(id));
                   -UNIQUE -can be null, table can have multiple unique attributes
                           -CREATE TABLE customer (...email VARCHAR(1024) UNIQUE,...);
                   -CHECK -CREATE TABLE customer (...CONSTRAINT age_check CHECK (age > 12),...);
                          -“age_check”, can also avoid this, MySQL generates name of constraint 
                            automatically
                   -DEFAULT -set default value of column
                            -CREATE TABLE account (...saving-rate DOUBLE NOT NULL DEFAULT 4.25,...);
                   -attribute can be PK & FK both in table
                   -ALTER OPERATIONS -changes schema
                                     -ADD -add new column
                                          -ALTER TABLE table_name ADD new_col_name datatype ADD 
                                           new_col_name_2 datatype;
                                     -MODIFY -change datatype of attribute
                                             -ALTER TABLE table-name MODIFY col-name col-datatype;
                                             -VARCHAR TO CHAR
                                             -ALTER TABLE customer MODIFY name CHAR(1024);
                                     -CHANGE COLUMN -rename column name
                                                    -ALTER TABLE table-name CHANGE COLUMN old-col-name 
                                                     new-col-name new-col-datatype;
                                                    -ALTER TABLE customer CHANGE COLUMN name customer-
                                                     name VARCHAR(1024);
                                     -DROP COLUMN -drop column completely
                                                  -ALTER TABLE table-name DROP COLUMN col-name;
                                                  -ALTER TABLE customer DROP COLUMN middle-name;
                                     -RENAME -rename table name itself
                                             -ALTER TABLE table-name RENAME TO new-table-name;
                                             -ALTER TABLE customer RENAME TO customer-details;
-data manipulation language (DML) -INSERT -INSERT INTO table-name(col1, col2, col3) VALUES (v1, v2, 
                                           v3), (val1, val2, val3);
                                  -UPDATE -UPDATE table-name SET col1 = 1, col2 = ‘abc’ WHERE id = 1;
                                          -update multiple rows
                                          -UPDATE student SET standard = standard + 1;
                                          -ON UPDATE CASCADE -can be added to table while creating 
                                                              constraints, suppose there's situation we  
                                                              have 2 tables such that primary key of 1 
                                                              table is foreign key for another table,  
                                                              if we update primary key of 1st table  
                                                              then using ON UPDATE CASCADE foreign key 
                                                              of 2nd table automatically get updated
                                  -DELETE -DELETE FROM table-name WHERE id = 1;
                                          -DELETE FROM table-name; (all rows deleted)
                                          -DELETE CASCADE -overcome DELETE constraint of referential 
                                                           constraints
                                                          -CREATE TABLE ORDER (order_id int PRIMARY 
                                                          KEY, delivery_date DATE, cust_id INT, FOREIGN 
                                                          KEY(cust_id) REFERENCES customer(id) ON 
                                                          DELETE CASCADE);
                                                          -ON DELETE NULL -CREATE TABLE ORDER (order_id  
                                                           int PRIMARY KEY, delivery_date DATE, cust_id  
                                                           INT, FOREIGN KEY(cust_id) REFERENCES 
                                                           customer(id) ON DELETE SET NULL);
                                  -REPLACE -primarily used for already present tuple in table
                                           -as UPDATE, using REPLACE with help of WHERE clause in PK, 
                                            then that row will be replaced
                                           -as INSERT, if theres no duplicate data new tuple inserted
                                           -REPLACE INTO student (id, class) VALUES(4, 3);
                                           -REPLACE INTO table SET col1 = val1, col2 = val2;
-joining tables -all RDBMS are relational in nature, refer to other tables to get meaningful outcomes
                -FK are used to do reference to other table
                -INNER JOIN -returns resultant table has matching values from both tables or all tables
                -SELECT column -list FROM table1 INNER JOIN table2 ON condition1 INNER JOIN table3 ON 
                                condition2...;
                               -alias in MySQL (AS) -give temporary name to table or column in table 
                                                     for purpose of particular query
                                                    -works as nickname for expressing tables or column 
                                                     names, makes query short & neat
                               -SELECT col_name AS alias_name FROM table_name;
                               -SELECT col_name1, col_name2,... FROM table_name AS alias_name;
                -OUTER JOIN -LEFT JOIN -returns resulting table that all data from left table & matched 
                                        data from & right table
                                       -SELECT columns FROM table LEFT JOIN table2 ON Join_Condition;
                            -RIGHT JOIN -returns resulting table that all data from right table & 
                                         matched data from left table
                                        -SELECT columns FROM table RIGHT JOIN table2 ON join_cond;
                            -FULL JOIN -returns resulting table that contains all data when theres 
                                        match on left or right table data
                                       -emulated in MySQL using LEFT & RIGHT JOIN
                                       -LEFT JOIN UNION RIGHT JOIN
                                       -SELECT columns FROM table1 as t1 LEFT JOIN table2 as t2 ON 
                                        t1.id = t2.id UNION SELECT columns FROM table1 as t1 RIGHT JOIN 
                                        table2 as t2 ON t1.id = t2.id;
                                       -UNION ALL used & duplicate values as well while UNION gives 
                                        unique values
                            -CROSS JOIN -returns all cartesian products of data present in both tables 
                                        -all possible variations are reflected in output
                                        -used rarely in practical purpose
                                        -Table-1 has 10 rows & table-2 has 5 --> resultant have 50 rows
                                        -SELECT column-lists FROM table1 CROSS JOIN table2;
                            -SELF JOIN -used to get output from particular table when same table is 
                                        joined to itself, used very less
                                       -emulated using INNER JOIN
                                       -SELECT columns FROM table as t1 INNER JOIN table as t2 ON t1.id 
                                        = t2.id;
                            -join without using join keywords
                                       -SELECT * FROM table1, table2 WHERE condition;
                                       -SELECT artist_name, album_name, year_recordedFROM artist, 
                                        albumWHERE artist.id = album.artist_id;
-set operations -used to combine multiple select statements
                -always gives distinct rows
                -UNION -combines 2 or more SELECT statements
                       -SELECT * FROM table1 UNION SELECT * FROM table2;
                       -number of column, order of column must be same for table1 & table2
                -INTERSECT -returns common values of tables
                           -emulated
                         -SELECT DISTINCT column-list FROM table-1 INNER JOIN table-2 USING(join_cond);
                         -SELECT DISTINCT * FROM table1 INNER JOIN table2 ON USING(id);
                -MINUS -operator returns distinct row from 1st table that doesn't occur in second table
                       -emulated
                       -SELECT column_list FROM table1 LEFT JOIN table2 ON condition WHERE 
                        table2.column_name IS NULL;
                       -SELECT id FROM table-1 LEFT JOIN table-2 USING(id) WHERE table-2.id IS NULL;
-sub queries -outer query depends on inner query
            -alternative to joins, nested queries
            -SELECT column_list (s) FROM table_name WHERE column_name OPERATOR (SELECT column_list (s) 
             FROM table_name [WHERE]);
            -SELECT * FROM table1 WHERE col1 IN (SELECT col1 FROM table1);
            -sub queries exist mainly in 3 clauses -inside WHERE clause
                                                   -inside FROM clause
                                                   -inside SELECT clause
            -subquery using FROM clause  -SELECT MAX(rating) FROM (SELECT * FROM movie WHERE country = 
                                          ‘India’) as temp;
            -subquery using SELECT -SELECT (SELECT column_list(s) FROM T_name WHERE condition), 
                                    columnList(s) FROM T2_name WHERE condition;
            -derived subquery -SELECT columnLists(s) FROM (SELECT columnLists(s) FROM table_name WHERE 
                               [condition]) as new_table_name;
            -co-related sub-queries -with normal nested subquery, inner SELECT query runs 1st & 
                                     executes once, returning values to be used by main query, 
                                     correlated subquery, executes once for each candidate row 
                                     considered by outer query (inner query is driven by outer query)
-MySQL views -view is database object has no values, contents are based on base table, contains rows 
              & columns similar to real table
             -view is virtual table created by query by joining 1 or more tables, operated similarly to 
              base table but doesn't contain any data of its own
             -view & table have 1 main difference that views are definitions built on top of other 
              tables (or views), if any changes occur in underlying table, same changes reflected in 
              view also
             -CREATE VIEW view_name AS SELECT columns FROM tables [WHERE conditions];
             -ALTER VIEW view_name AS SELECT columns FROM table WHERE conditions;
             -DROP VIEW IF EXISTS view_name;
             -CREATE VIEW Trainer AS SELECT c.course_name, c.trainer, t.email FROM courses c, contact t    
              WHERE c.id = t.id; (View using Join clause)
-SQL is not DB
-database = one big giant excel spreadsheet (massive amount of data)
-DBMS (database management system) (manager of data)
-all DMBS going to use sequel (standard ratified by ISO)
-sudo apt update
-sudo apt install mysql-server -y
-sudo mysql
-show databases;
-create database name_of_database;
-use name_of_database;
-show tables;
-create table name_of_table(id int, name archer, age int)
-describe name_of_table;
-insert into name_of_table values (1, "Ankur", 19);
-select * from name_of_table;
-select name from name_of_table;
-select * from name_of_table where name = "" or name = "";
-delete from name_of_table where name = "";
-update name_of_table set name = NULL where name = "Tony";
-select * from name_of_table order by age asc;
-alter table name_of_table add beard boolean;
-update avenger set beard = True where name = "Thor";


Self hosting services:
-cloud-fare (great domain registry), DNS configuration
-digital-ocean -deploy virtual machine & setting up server --> copy IPv4 address, 
-docker -run application with minimum configuration
-curl -fsSL https://get.docker.com | bash -
-docker ps
-docker create network proxy-net
-docker run --name memos --hostname memos --network proxy-net \
 --volume ./memos/var/opt/memos --detach \
 ghcr.io/username/memos
-docker run --name caddy --network proxy-net \
 --publish 80:80 --publish 443:443 --detach \
 caddy caddy reverse-proxy --from memos.goselfhost.com --to memos:5230
-docker ps
-docker start caddy memos


Stor


Budget home server:
-quad core low-power desktop
-AMD a6 5200, 4 cores, 4 threads, 2.0GHz
-8GB DDR3 memory, onboard wifi
-only uses external 65 watt power supply
-installing linux (Ubuntu server)
-making sure PC has static local IP address
-sudo apt install openssh-server
-sudo systemctl status ssh
-windows machine
-ssh haven@192.168.1.51
-sudo apt install samba
-samba --version
-mkdir haven-share
-sudo nano /etc/samba/smb.conf
-sudo service smbd restart
-sudo ufw allow samba
-sudo smbpasswd -a haven
-open file explorer in windows --> mapping network drive --> \\192.168.1.51\haven-share
-sudo apt install plexmediaserver
-sudo systemctl status plexmediaserver
-192.168.1.51:32400/manage on web browser
-cd haven-share/
-mkdir Plex
-ls
-cd Plex/
-mkdir Movies Shows


Hosting website without spending single $$$:
-laptop 1 -use this laptop to host website & run server
-laptop 2 -use this laptop for development, testing, backup
-linux installed on both laptops 
-need internet connection (no need for cloud service)
-static IP (optional) -if ISP allows to configure static IP address (ideal), but not necessary
-dynamic DNS service can handle IP changes if don’t have static IP
-sudo apt update
-sudo apt upgrade
-sudo apt install apache2
-sudo systemctl status apache2
-sudo systemctl start apache2
-http://localhost/
-setting up DNS & port forwarding
-configure DNS & expose your server to internet
-dynamic DNS (for dynamic IPs)
-if ISP doesn't provide static IP address, use free dynamic DNS (DDNS) service, like No-IP or Dynu
-sudo apt install noip2
-port forwarding on router
-access website from outside your home network, forward port 80 (HTTP) or port 443 (HTTPS) on router to 
 laptop 1’s local IP address
-access your router's admin panel (usually 192.168.1.1)
-look for port forwarding settings
-forward ports 80 & 443 to local IP of laptop 1 (one running Apache)
-save & reboot your router
-configure apache to allow external access
-sudo nano /etc/apache2/ports.conf
-Listen 80
-sudo systemctl restart apache2
-http://your_public_ip No-IP domain), you should see your website.
-laptop2
-scp -r /path/to/website/ user@server_ip:/var/www/html/ (Sync Development Files)
-rsync -avz /var/www/html/ user@laptop2_ip:/path/to/backup/ (Backup Files)
-sudo ufw allow 'Apache' (Enable Firewall)
-sudo ufw enable 
-sudo apt install certbot python3-certbot-apache
-sudo certbot --apache
-Test HTTPS by visiting your site at https://your_domain_or_ip.
-sudo apt install htop
-htop
-sudo apt install unattended-upgrades
-sudo dpkg-reconfigure unattended-upgrades


How CGI works:
-computer generated images
-ray tracing
-rendering -computation process that simulates how rays of light bounce off of illuminate each of  
 model ---> transforming scene of simple 3D model into realistic environment
-path tracing -algorithm require unimaginable number of calculations
              -Zootopio, Moana, finding dory, coco rendered using path tracing
              -rendering these movies requires server farms with 1000s of computers
-GPUs work with 3D scenes made of triangles built from 3.2 million triangles
-3D artist assigns texture to it (defines colours, material attributes (rough, smooth, glass), completed modules are places around scenes, light, sky, sun & adjust intensity in direction, virtual camera is added & scenes is rendered & brought to life
-infinite amount of light rays produced by sun, only fractions of them reach camera
-sending light rays from camera into scene
-ray tracing is massively parallel operation & each pixel independent
-direct illumination -
-


How DDR RAM works:
-


How PCB works:
-360 feels wires inside smart phone
-printed circuit board is multilayer labyrinth of 100s of copper wires
-provides structure & organisation for all components to be mounted on surface 
-components (microchip, resistors, capacitors, connectors) soldered, mounted, attached on PCB
-dark areas -conductive wire & lot of them & rest is non-conductive insulator made of woollen fibre 
 glass with epoxy resin binder (FR4)
-multiple layer of wire (not touching)
-main microchip (SOC) mounted on PCB on grid of connection points/ pads (ball grid array)
-more number of traces allows more data to be sent 
-


SQL injections:
-hacking website & gaining admin privileges
-getting access to underlie database
-brute forcing password
-String & query in sql
-checking if application is vulnerable to squeal injection
-creating an entry that's always true
-avoid those attacks if you have small business


Making projects on time:
-setting up deadline
-every project should not be revolutionary
-process is important for learning even if outcome is not interesting
-even simple chess board can teach you Dom manipulation & styling
-writing README.md & writing sort of MVP
-writing user story


Tmux:
-tmux is your best friend even when internet is not that fast or gone
-you can launch new panes & new windows
-fully customisable status bar
-splitting window in several panes
-automatic layouts
-detach an end to my SSH session
-terminal multiplexer
-detach & reattach to someone else terminals
-need linode cloud machine or linux machine
-pasting access command in terminal window & get logged in
-apt install tmux
-touch ~/.tmux.conf
-tmux
-ping sit_name
-ctrl + b + d (detach)
-tmux a (attach)
-tmux = 3 layers (session, window, 
-tmux new -s name_of_session
-tmux ls
-tmux a -t O
-tmux kill session -t bob
-tmux new -t Stacy
-ctrl + b + % (shift + 5) (new window)
-ctrl + b + ->, <-, ↑, ↓ (switching between different screens)
-ctrl + b + " (shift + ') (creating pain at bottom)
-exit (for exiting any pain)
-tmux list-sessions (shows all sessions that tmux is running)
-handling in form of sessions & preserves your process
-tmux a -t name_of_session
-tmux rename-session -t name_of_session new name
-tmux kill -session -t docker
-ctrl + b + q (displayed indexes of paints) (each paint has an index)
-ctrl + b + 2
-ctrl + b + 0
-size can also be change
-ctrl + b + alt + 2/3/4/5
-ctrl + b + c
-ctrl + b + w
-ctrl + b + prefix key + x
./target/release/yazi


Mac commands:
-say whatever you want to say
-security find-generic-password -wa "name of Wifi network"
-pbcopy
-command + option + shift + v (plane text)
-caffeinate (as long as terminal is up your Mac will stay awake)
-command + shift + 3 (taking screenshots)
-command + shift + 4 (taking just small part of screenshots)
-defaults write com.apple.screencapture "name"
-defaults write com.apple.screencapture type jpg
-default write com.apple.screencapture location ~/Desktop/screenshots
-passwd
-cd (change directory)
-afplay /path/music.mp3 (playing music)
-df
-ls (list)
-pwd (shows current directory)
-whoami
-mv
-cp
-ditto
-df -h (displays all how much space we have on hard drive)
-nano 9editing your file)
-man 
-man nano
-man man
-open 
-ping networkchuck.com
-ifconfig (finding IP address)
-ifconfig en0
-ifconfig en0 | grep init
-ifconfig en0 | grep init | awk
-traceroute (ever router you see) (great for troubleshooting)
-dig networkchuck.com (shows all DNS goodness)
-ps
-ps -ax
-top
-top -o resize
-kill (killing any process)
-which $SHELL
-bash
-zsh
-uptime
-killall mDNSResponder….and more
-qlmanage 
-qlmanage -p filenames
-diff nick1 nick2 (comparing 2 files)
-curl
-leave 1244 (alarm)
-history (all commands that you just typed)
-sudo spelt --master-disable
-disable gatekeeper
-brew install ccmatrix (don't do that btw)
-toilet Ankur 
-python3
-python3 -m http.server
-shutdown -r now
-sudo touch id
-echo $0
-cd .config/wezterm


Virtual machine:
-virtual machine is like computer inside of computer (matrix)
-CPU, RAM, storage, GPU, network interface card (borrowing from actual computer
-operating system allows us to use all hardware resources like playing games, video editing
-hypervisor is fancy word for application you install in your operating system (job is to create bunch of computers inside your computer)
-host operating system allowing guest OS to use their resources
-type 1 hypervisor - see in companies, enterprises 
		  -will not be installed on top of already existing operating system like windows
		  -can be installed anywhere (if you erase all windows, linux from your system & install exsi it will work just fine)
		  -more often or typically you will see in big servers (dell server & hp server)
-vmware exsi
-you can delete & build new 1 & won't affect your operating system & your main host OS (isolated)
-most operating system come in 2 different variants (32-bit & 64-bit) 
-64-bit -you need to enable hardware virtualisation support for your CPU in your bios
-make sure to download correct image file (according to 32 & 64 bit in computer)
-virtual box need an extension pack


[hackthebox]
[django][K][pandas][tensorflow][numpy]


Remote jobs:
-work life balance & exposure
-money is important
-applying with referral can help
-when preparing for job interviews competitive programming is waste of time
-explore other fields
-every little experiences count
-leetcode is more than enough 
-you need to keep applying
-google summer of code
-interns with 20 organisation
-college tag did not actually matter for them
-branch also does not matter
-development is more important than competitive programming
-internshala (initially salary is very less)
-using leetcode to prepare
-learning in public
-blogging is great way
-no Indian company can come close to remote jobs
-understanding low level systems & high level system
-start creating something on your own
-contributing to open source
-GitHub profile


nano ~/.zshrc
source ~/.zshrc
rm -rf mydirectory


Security+:
-Social engineering = hacking servers & networks, human OS (can be hacked 1000s of vulnerability)
		   -recon = gathering information as much as possible (social media, OSINT community (open source intelligent) (your information can be used against you)
		   -sudo twint -u networkchuck --since "2020-10-10"
		   -sudo twins -u networkchuck --near Dallas
		   -sudo twins -u networkchuck --following
		   -google hacking or dorking 
		   -dumpster dragging (looking into their trash) (very effective)
		   -shoulder surfing (looking on someone's shoulder & look what they are doing) (don't talk about work stuff outside of work)
		   -Dos (denial of service) & DDos (distributed denial of service)
		   -disconnecting service in some way
		   -biggest challenge is that it looks legitimate traffic 
		   -flood of traffic that are all valid request (server can not keep up)
		   -network dos = trying to fill up network connection with enough bandwidth that devices can not keep up) (your server must have an IPS = detects all invalid request & making sure you have enough bandwidth) (you might not need 100GB/seconds)
		   -Application dos = attacking actual application in some way where it can no longer service client like invalid request like finding bug (Example apache web server running on linux) (single request could be denial of service attack) (not network but app that can not keep up with that)
		   -operational technology dos = aims at business system or process, software, hardware, check map at Fortinet (threat maps) (visual representation of DOS attack)
-phishing attack = setting fake web page but looks legitimate, credential harvesting
		-git clone http.....
		-cd blackeye
		-sudo ./blackeye.sh
		-spear phishing attack (at particular target)
		-host file will override DNS on your system --> ask DNS server where web page is ?
		-spam or legitimate email
		-changing host file by malware
		-always check from where email is coming from
		-invoice scams 
		-clicking on suspicious links
-pretexting attack = installing phone system on this raspberry pie
		  -using voice modifier
		  -using urgency to do something
-identify theft = 14 million people in US in 2019 IDs stolen (1 in 18 people every 2 seconds)
		-data breach & collecting important & sensitive information & credentials
		-any information can be leaked
		-tailgating
-watering hole attack = you would not know about it that you have been hacked
		     -typically more targeted & even more dangerous
		     -takes advantages of people that we feel safe
		     -there always be some vulnerability that you don't know about
		     -typo-squatting attack
		     -snatching all domain names
		     -using solid spam folder normally appliance or even cloud service but cannot
		      catch everything	
		     -pre-pending method 
		     -flag emails
-hoax = threats that are not real
      -they pretend to help you & solve your problem & remove virus form computer that never existed
      -influence campaign = spreading fake news by making bunch of fake accounts
			 -sometimes used to change campaign
			 -people have become weapon
-hybrid warfare = 2 countries attacking each using no military
-reasons to get get hacked  & security breached = trust & familiarity
			  -creating urgency to do something & intimidating something, making false
			   authority
			  -pretexting & false stories


High Level Skills & Traits For Programmers:
-Patience
-Motivation
-Problem solving
-Communication
-Willingness to learn
-never look down to anybody


Identifying scam:
-check for spelling & grammar errors
-research person or organisation
-look for user review & reports of scams
-check if company is registered with better business bureau
-check if company offers money-back guarantee
-check sender profile
-check sit seals
-close suspicious message from your inbox
-know how bank operates
-scammers -ask you to wire money or purchase pre-paid debit cards
          -tell you keep it secrete
          -make somethings sound too good to be true
          -may contact you out of blue
          -may claim there is emergency
          -ask for personal information


Social engineering:
-attacker performs phishing attack --> user receives email (pdf attached) --> user opens attached file 
 which executes malware --> malware steals user credentials & sensitive data --> malware sends stolen 
 data remote user
-manipulation people into enclosing sensitive information
-phishing, pretexting, baiting, tailgating
-targets are employees, customers, vendors


YAML:
-markup language is relationship of all components of bullet points, paragraph, tables
-yaml an't markup language (not programming language but data format used to exchange data similar to xml & json datatypes
-simple human rebate language to represent data
-store only data not commands
-data serialisation
-storing data in 1 single formate that can be shared everywhere
-serialisation = process of converting data objects present in complex data structures into stream of bytes or storage (can be sued to transfer this data into physical devices)
-deserialisation = converting byte stream back to object (file --> object) (object --> file)
-Kubernetes also create objects
-used in configuration file 9like docker & Kubernetes, logs, caches)
-easy & simple to read, indentation is important, easily convertible, stride syntax, most programming use it, more powerful representing complex data, use various tools like parsers, parsing is easy, case sensitive
-yaml lint, lens
-key-value pairs, block style


[Arms control association]


Kotlin:
-statically typed multi-paradigm language designed simply as better alternative to java 
-also compile to native code & javascript opening door to multi platform apps
-most influential in android development community


Building Mobile Apps:
-


Cloud native tools:
-


[Skill India]


CCNA:
-PC -> switch -> router -> firewall -> modem -> ATT fibre
-big companies have big network, big firewall, big switches, big routers, more access points
-Switch  -cisco package tracer to analyse frames & packets going across network & entering 1st cisco 
 cli command
	-connecting through ethernet cables & plugging into ports
	-switches comes in many different sizes 16 ports, 48 ports
	-hub is dumb (sends message to all computers)(sends electrical signals) but switch is not 
	-switch is smart & learn all Mac addresses they are burned
	-sending message to layer-3 address (make sure stimulation button is checked)
	-ping 10.1.2
	-packet tracer
	-CAM table (content accessible memory)
	-layer2 is MAC address (datalink)
	-physical cable is layer 1
	-show Mac-address -table
	-switch frame layer 2
	-message is packets
	-access point (more like hub) connected to switch
	-source & destination
	-wireless connection is more like hub
	-switch does not know anything about IP addresses
-Router -routers job is to connect networks
	-all ports are in back not front
	-cannot connect 1 switch to another (because of IP address)
	-ARP (address resolution protocol)
	-broadcast address
	-gateway is used for router
	-router has map to get to destination
	-router loves layer 3
	-show ip route
	-show bgp ipv4 unicast
-TCP/IP model -every computer supports & implemented int their system
	      -OSI model is always best
	      -we should alway prefer application layer as layer 7
	      -have traffic filter
	      -networking world also uses 7 layers
	      -we can use TCP (reliable) or UDP (faster) to transporting data
 	      -443 is reserved for https traffic
	      -80 is reserved for http traffic
	      -browser encapsulated whatever you want to send server
	      -packet has all layer above it (all layers encapsulated with layer 3 header 
-OSI model -how application, presentation, session, transport layer are involved
	   -application layer = kind of portal interface for programmer (gateway to next 2 layers)
	   -presentation layer = responsible for making it presentable (data formatting (file type) &  
            encryption)


Modular programming:
-advantages -code is easier to read & test
            -reusability, faster fixes
            -low-risk updates & easy collaboration
-disadvantages -no need for extra time & budget for product in modular programming
               -challenging task to combine all modules
               -careful documentation is required so other program modules are not affected
               -some modules may partly repeat task performed by other modules
               -modular programs need more memory space & extra time for execution
               -integration various modules into single program may not be task because different 
                people working on designing of different modules may not have same style
               -reduces program efficiency bemusing testing & debugging are time consuming, each 
                function contains thousand line of code


OSI model:
-advantages -helps to standardise router, switch, motherboard & other hardware
            -reduces complexity & standardise interface
            -facilitates modular engineering
            -helps to ensure interoperable technology
            -helps to accelerate evolution
            -protocols can be replaced by new protocols when technology changes
            -provide support for connection-oriented service as well as connectionless service
            -standard model in computer networking
            -supports connectionless & connection-oriented service
            -offer flexibility to adapt to various types of protocols
-disadvantages -fitting of protocols is tedious task
               -only use it as reference model
               -doesn't fine any specific protocol
               -OSI network layer model, some services are duplicated in many layers (transport & data 
                link layers)	
               -layers can't work in parallel as each layer need to wait to obtain data from previous 
                layer	


Software:
-corner frame, frame, scroll bar
-menu button, sticky button, title bar, min-max exit buttons, menu bar
-application icon, client area, horizontal scroll bar, vertical scroll bar, sizing border
-minimise button, maximise button, close button
-forward button, zoom, view button, arrange menu, window title, action menu, share menu, tags menu
-search filed, toolbar, window resize, sidebar, window resize
-detail pane, navigation pane, previous pane, toggle preview pane, help, search box


Node.js:
-actually runs on your machine as service or runtime
-using V8 javascript engine also used by chrome browser
-using javascript as server side language 
-learning ES6+
-highly scalable (event-driven & works on single loop & non-blocking)
-very popular in startups
-cannot be used in CPU intensive apps
-IO operations are generally asynchronous (sending data to server & getting response)
-npm init
-npm install express
-npm install -nodemon
-can also use rpm to run some task like web servers
-can even create your own module (files that have an export)
-can include function, classes from 1 file to another
-node --version 
-repple (read eval print loop)
-npm --version
-node
-using integrated terminal n vs code
-npm init (by default ask some questions) (packages stores all dependencies)
-npm install uuid
-npm install --save-dev nodemon
-npm install -D nodemon
-npm install
-node index.js (to run file)
-


[I Love coding Whenever I feel Happy or Sad I just code]
[I love my MacBook][My MacBook is just like my girlfriend]
[MVC, MVVM, MVP, state]


-extortion portal


Spreadsheet or Excel:
-home tab & ribbon, group
-cell = intersection of row & column
-rows & column
-shift + down key or right key to select
-formula =sum(a, b, c), =concatenate(a, b, c), =average(a,b,c)
-Basic Formatting
-Using Formulas
-Save File
-Filter & Sorting
-Conditional Formatting
-Insert & Delete Columns or Rows
-Find & Remove Duplicates
-Merge & Centre
-Rounding of Numbers
-Autofill in Excel
-Add or edit comment
-Filters
-Sorting on multiple columns
-Insert Table
-Slicers 
-Insert picture or shapes
-Add link or Hyperlink (command + K)
-Add drop down list
-Split Text
Charts in excel
58:16 VLOOKUP formula
01:03:32 Pivot Table
-Payroll Project -


Internet Millionaire:
-stealing market from others by making kickass product
-making your product addictive
-collaborating & sharing computer files
-starting as early as possible to start learning
-getting good help
-being willing to do some sacrificing like your social life & sleep & exploiting your youth
-no one has to know how old you are & developing credibility on product alone


Secure your laptop/ desktop:
-cover your webcam with tape
-excrypt your hard drive
-add privacy screen
-set passwords
-backup data
-update your software on regular basis
-use VPN
-setup location finding
-add antivirus software
-add password protected screensaver


Best Javascript Framework:
-every developer should have solid understand of vanilla Javascript
-non-trivial app making on javascript can be recipe for disaster
-doing everything manually can be annoying 
-React = main driver of your project, framework or library, minimal by design, relies on open source community, routing, animation, state management, official CLI called create react app, next.js or gatsby, 
Dividing you app organised on tree of component & these components encapsulates part of UI, organising your app in declarative way given set of application data end result of UI will always be same
-Angular = developed & maintained by google, opinionated about how to organise & structure project,  comes with officially supported libraries for routing, animation & server side rendering, required to use typescript, 


-Quant
-verbal
-English
-maths 


Linux for hacking:
-file syatem
-whoami
-ls/ cd/ cd../ pwd/ clear
-linux is file (everything means everything is file)
-cd bin (binaries) (command binaries)
-clear/ clean
-cat (concatenate)
-cp ls networkchuck
-sudo cp ls network chuck
-rm (remove)
-sudo rm ls
-sudo cp networkchuck ls
-cat cat
-sbin (superbin) (special commands only administrators will use)
-sudo adduser ben
-cd..
-cd usr
-which ls
-which cat
-which networkchuck
-sudo ls root
-SDA1 & SDA
-sudo cat vda
-etc 
-cd etc
-lsd etc
-terminal emulator (not terminal just pretending) (interacting with shell)
-shell (program provides traditional, text only user interface that user interact with OS) 
-ps (process status)
-su root (switch user)
-id
-hostname
-uname
-uname -r
-uname -a
-ifconfig
-ip
-ss
-netstat
-who
-env
-lsblk
-lsusb
-lsof
-man uname
-man ls
-man ip
-uname --help
-apropos usb
-apropos compress
-adduser thor
-sudo adduser thor
-cat /etc/passwd
-cat /etc/shadow
-sudo useradd ironman
-sudo passed ironman
-usermod .h
-sudo usermod ironman ..shell/bin/bash
-sudo usermod -l tonystark ironman
-useradd hulk -m (creates home directory)
-sudo useradd hulk -m
-sudo useradd thanos -m
-sudo passed thanos
-sudo (super user does)
-su -
-sudo su -
-logout
-sudo useradd peperpots
-sudo visudo
-sudo su - thanos
-sudo useradd nebula -m
-sudo userdel thor
-sudo groupadd infinitygauntlet
-sudo usermod -aG infinitygauntlet ironman
-sudo gpasswd -d thanos infinitygauntlet
-linux package manager
-cd Downloads/
-ls
-deb is extension for packages & linux (Debian based) (.exe, .dmg)
-dpkg -i ....deb
-sudo dpkg -i ....deb
-most package in linux depend on other packages to work
-apt (advanced package tool)
-sudo apt update
-sudo apt install pidgin
-sudo apt --fix broken install
-repository = storage location (collection of software)
-sudo nano
-sudo apt -h
-sudo apt list
-apt list --install | grep ^nmap
-sudo apt show nmap 
-sudo apt search nmap
-sudo apt remove pidgin
-sudo apt pudge pidgin
-sudo apt --installed | grep ^pidgin
-sudo apt update && sudo apt full -upgrade
-dpkg -l
-sudo aptitude
-snap
-sudo snap install --classic code
-code
-pip (package manager for python)
-git clone https..........
-pip3 install -r requirements.txt
-python3 tubolist3r.py -d hackthebox.eu
-process in linux --> instance of running process
-ps -aux
-ps -aux | grep sublime
-ps -aux | grep nano
-ps -aux | grep ssh
-ps -aux | grep ntp
-pstree
-systemctl stop sshd
-sudo systemctl stop sshd
-sudo systemctl status sshd
-sudo systemctl start sshd
-sudo systemctl restart sshd
-sudo systemctl reload
-sudo systemctl reload.or.restart sshd
-sudo systemctl disable ntp
-sudo systemctl status ntp
-sudo systemctl enable ntp
-sudo systemctl is-active ntp
-sudo systemctl list-units -t service
-sudo systemctl list-units | grep nginx
-sudo systemctl list-units --all | grep nginx
-sudo systemctl list-units-files | grep nginx
-sudo systemctl is-enabled nginx
-sudo systemctl start nginx
-sudo journalctl -xe
-sudo systemctl list-units | grep journal
-killing process means killing process
-kill firefox
-pgrep firefox (shows process ID)
-kill processID
-ps --help simple
-ps -aux
-top (shows all running process of linux)
-htop
-ping -c 100 networkchuck.com
-jobs
-bg 1 (background process & we can not interact with it)
-ps -ax
-kill -l
-python -m http.server
-most website are on port 443 
-ctrl + c (to stop website)
-python -m http.server 7600
-mkdir website
-cd website/
-nano index.html
-npx http.server -p 8080
-systemctl start apche2
-sudo nano /etc/apache2/ports.conf
-curl (client URL)
-curl localhost:7600
-curl -o coolwebsite localhost:8080
-cat coolwebsite
-curl -I localhost:8080 (analysing how website is talking or interacting with client)
-curl -v localhost:8080 (shows request header & respond header)
-wget localhost:7600
-nmap (network mapper, used for network discovery & security auditing)
-netcat (nc) (read & write data across network connections)
-ping (check network connectivity)
-traceroute (trace route packets take to network host)
-whois (domain name lookup)
-dig (DNS lookup)
-dnsenum (DNS enumeration tool)
-arp-scan (ARP scanning tool)
-snmpwalk (SNMP enumeration tool)
-enum4linux (windows/samba enumeration tool)
-tcpdump (network packet analyser)
-wireshark (network protocol analyser)
-john (john the Ripper, password cracking tool)
-hashcat (advanced password recovery tool)
-hydra (password brute-forcing tool)
-medusa (parallel network login brute-forcer)
-cewl (custom word list generator)
-crunch (wordlist generator)
-nikto: Web server scanner.
-openvas: Open-source vulnerability scanner.
-lynis: Security auditing tool for Unix-based systems.
-wpscan: WordPress vulnerability scanner.
-metasploit: Penetration testing framework.
-msfconsole: Command-line interface to Metasploit.
-msfvenom: Payload generation tool in Metasploit.
-searchsploit: Command-line interface for Exploit-DB.
-exploitdb: Searchable database of exploits.
-sqlmap: Automated SQL injection tool.
-burpsuite: Integrated platform for performing security testing of web applications.
-owasp-zap: Web application security scanner.
-whatweb: Website fingerprinting tool.
-nikto: Web server scanner.
-dirb/dirbuster/gobuster: Directory brute-forcing tools.
-xsser: Cross-Site Scripting (XSS) vulnerability scanner.
-aircrack-ng: Suite of tools for 802.11 (Wi-Fi) security auditing.
-reaver: Brute force attack against Wi-Fi Protected Setup (WPS).
-wash: Scan for WPS-enabled networks.
-wifite: Automated wireless attack tool.
-kismet: Wireless network detector, sniffer, and IDS.
-cowpatty: WPA-PSK brute-force tool.
-linpeas: Privilege escalation tool for Linux.
-pspy: Monitor processes without root permissions.
-sudo -l: List sudo privileges for the current user.
-gtfoBins: Search for binaries that can be exploited for privilege escalation.
-setoolkit: Social-Engineer Toolkit, used for social engineering attacks.
-beef: Browser Exploitation Framework.
-veil: Evasion framework used to generate payloads that bypass antivirus.
-meterpreter: Post-exploitation tool integrated into Metasploit.
-empire: Post-exploitation framework.
-mimikatz: Credential dumping tool.
-bloodhound: Active Directory (AD) attack path management tool.
-psexec: Tool for executing processes on remote systems.
-chisel: Fast TCP/UDP tunnel.
-steghide: Hide data within image and audio files.
-zsteg: Detect steganography in PNG and BMP files.
-exiftool: Read, write, and edit metadata in files.
-radare2: Open-source reverse engineering framework.
-gdb: GNU Debugger, used for analyzing binaries.
-strace: Trace system calls and signals.
-ltrace: Trace library calls.
-objdump: Display information from object files.
-strings: Display printable strings in a file.
-proxychains: Redirect connections through a proxy.
-tor: Anonymity network.
-ncat: Netcat with advanced features.
-socat: Multipurpose relay (for UNIX sockets, TCP, UDP, etc.)
-tshark: Command-line version of Wireshark
-openssl (toolkit for SSL/TLS & cryptography)
-gpg: (encryption & signing tool)


x86 vs x64 vs ARM:
-examples of CPU instruction sets, not just CPU
-pretty much every CPU in a smart device or PC you’ve used is built on top of one of them
-micro-architecture can change constantly within the walls of a CPU manufacturer, instruction set architecture doesn’t change nearly as frequently
-x86 is a Complex Instruction Set Architecture (CISC) and was the dominant mainstream micro-architecture of Windows PCs
-x86 is also colloquially known as “32-bit”, since it also has to operate within 32-bit RAM limitations, meaning no more than 4 Gigabytes of system memory is visible to an x86 CPU.
-x64 is a Complex Instruction Set Architecture (CISC) and is the current dominant architecture of Windows and Linux PCs
-built on top of the original x86 Instruction Set, rather than replacing it entirely.
-x86-64 is used with the same operating systems that originally ran on x86, this evolution makes sense as a measure to preserve software compatibility between architectures.
-x64 now boasts 64-bit RAM limitations. 64-bit math means that it’s theoretically possible to reach 16.8 million TB of RAM, but in reality, the maximum RAM reachable by a modern OS is about 6 TB
-ARM is a Reduced Instruction Set Architecture (CISC). This is the dominant standard used by smart devices, as well as an increasing number of low-power PCs and smart devices over the years.
-Even Apple has made the switch to ARM
-memory capacity, x86, unfortunately, lost the war as soon as desktop PCs with more than 4 GB of RAM became commonplace
-x64 and ARM have yet to reach their theoretical maximum limit, but both top out within the terabytes as of the present day.
- lower power consumption of ARM also means less heat is generated by its operation
-ARM generates so little heat that most ARM devices don’t even require an actively-spinning cooling fan like an x64 PC does
-point is actually a little more nuanced than you might expect. While ARM does function on reduced complexity compared to x64, it’s still remarkably useful for a wide variety of software and applications
-memory capacity, x86, unfortunately, lost the war as soon as desktop PCs with more than 4 GB of RAM became commonplace
-x64 and ARM have yet to reach their theoretical maximum limit, but both top out within the terabytes as of the present day
-CPU is a complex piece of precision machinery, with a unique “micro-architecture” to itself and a related family of CPUs.


-emulation can come at a performance cost
-


Tails OS:
-Snowden exposing government mass surveillance program
-Debian based linux distro that boots from USB stick to any computer into temporary secure machine
-traces can be left behind on disk that can be recovered with forensic analysis
-everything disappears automatically when os is shut down because tails never writes anything to hard disk & only runs from memory from you computer
-it is possible to store some information on USB like browser bookmarks or documents that you want to persist between sessions & they are encrypted automatically 
-any application that tries to access internet without tor network is automatically blocked on tails 
-everything is stored on RAM & not on disk
-it will overwrite RAM to prevent cold boot attack


Solo software developer:
-learning code gives you ability to build money printing machine that regular people can't
-business running on autopilot
-its good idea to validate idea
-ideas are cheap, execution is everything
-good marketing plan is must (organic marketing by YouTube, Instagram, Facebook)
-application should work does not matter which tech stack it is made off
-design is important & nice looking landing page


Make money:
-apps -monetisation strategies for apps
      -freemium model (most profitable)
      -Basic app is free; premium features require a paid upgrade
      -In-App Purchases (IAP)
      -Users buy virtual goods, premium features, or unlock content.
      -Subscription Model (High Recurring Income)
      -Monthly/yearly fee for premium content or exclusive features.
      -Advertisements (Easy to Start)
      -Earn money via ad networks like Google AdMob, Unity Ads, or Facebook Audience Network.
      -Types of ads: -Banner Ads (Static display), Interstitial Ads (Full-screen pop-ups)
                      Rewarded Ads (Users watch to earn rewards), Native Ads (Blended into UI)
                      Affiliate Marketing (Passive Income)

Promote third-party products & earn commission per sale.
Example: Amazon Affiliate, Rakuten Marketing.
Selling Data (Controversial but Lucrative)

Collect user analytics & sell insights (ethical usage required).
Example: Facebook, Google.
Paid Apps (One-Time Payment)

Charge upfront for app download.
Works for niche/professional apps (e.g., ProCamera, LumaFusion).
Sponsorships & Partnerships

Brands pay for exposure inside your app.
Example: A fitness app collaborating with a nutrition company.
White Label & Licensing

Develop an app once and sell it to different businesses.
Example: SaaS solutions like white-label food delivery apps.
🎮 2. Making Money Through Games 🕹️
🔹 Monetization Strategies for Games
In-App Purchases (Best for Mobile)

Sell skins, power-ups, characters, weapons, currency.
Example: Fortnite, PUBG.
Season Passes & Battle Passes

Time-limited premium content upgrades.
Example: Call of Duty Mobile, Free Fire.
Game Sponsorships

Brands pay for in-game advertising & product placement.
Example: FIFA featuring Coca-Cola.
Crowdfunding (Before Release)

Get funds via Kickstarter, Patreon, GoFundMe.
Example: Star Citizen raised $400M+.
Paid DLC & Expansion Packs

Sell extra game content after the main release.
Example: The Sims, GTA V.
Premium Game Model (One-Time Purchase)

Sell the game upfront.
Example: Minecraft, Stardew Valley.
Ad Revenue (Casual & Hypercasual Games)

Use rewarded ads, interstitial ads, banner ads.
Example: Hypercasual games like Helix Jump.
Blockchain Gaming & NFTs (High Risk, High Reward)

Sell NFT items, skins, characters.
Example: Axie Infinity.
Sell Game Assets & Source Code

Developers buy game templates, characters, animations.
Platforms: Unity Asset Store, Itch.io, Unreal Marketplace.
Tournaments & eSports

Host gaming tournaments with entry fees & sponsorships.
Example: Valorant, CS:GO, Dota 2.
-websites -monetisation strategies for websites
          -Affiliate Marketing (Most Passive)
          -promote products & earn commission
          -advertising (easiest to start)
          -Direct Sponsorships: Brands pay for banner ads
Selling Digital Products

E-books, courses, software, templates.
Example: Udemy, Coursera.
Subscription-Based Content

Members pay monthly for exclusive articles, newsletters.
Example: Substack, Patreon.
Dropshipping (No Inventory)

Sell physical products without handling stock.
Example: Shopify + AliExpress.
E-Commerce (Sell Own Products)

Create a niche store for handmade, branded, or print-on-demand items.
Example: Etsy, Amazon FBA.
Freelance Services

Sell skills like writing, coding, design.
Example: Fiverr, Upwork.
Flipping Websites (Website Investment)

Buy underperforming websites, improve & sell for profit.
Platforms: Flippa, Empire Flippers.
Online Tools & SaaS Products

Develop a small web app & charge users.
Example: Grammarly, Canva.
Donations & Crowdfunding

Ask users to donate.
Example: Wikipedia, BuyMeACoffee.


Best OS for programmers:
-FreeBSD is superior
-there is no perfect operation system
-we cannot upgrade machine (upgrade options are very limited in macintosh)
-home-brew can be installed to manage different developers tools (package manager)
-linux does not support many commercial softwares
-VS code --> writing typescript code --> push to Microsoft GitHub --> install microsoft npm packages --
 > deploy to Microsoft azure 


Sensors:
-humidity, fire, touch, solar cell light, metal detector, real time clock, vibration, accelerometer, 
 gyroscope, ultrasonic, IR, thermistor, colour, PIR, gas, smoke, LM35 temperature, IR, LDR, rain, soil 
 moisture, phototransistor, water flow, heartbeat, alcohol, engine speed, knock, air flow, MAP, Nox, 
 parking, oxygen, throttle sensor, rain sensor, voltage, crank


Neura link:
-no eye tracking or sensors other than chip in brain
-each thread contains high density electrodes which are capable of detecting electrical activity (brainwaves)
-data only flow 1 way


History of video games:
-1st commercial video games are released
-space invader ---> video game addiction --> Nintendo --> gaming consoles 
-USA & Britain thought to use computers for war
-Tic-tac-toe game invented by some students
-world 1st video game tennis for two
-relaxation, public interest, friendship
-space-wars game
-new version of game
-merging video game technology with television technology
-POM game 1st coin operated arcade game
-easy availability of PC --> decline in game arcades
-packman & asteroids all time high
-nintendo 
-Arati ST & Macintosh computer introduced
-BASIC code 
-1st person shooter game
-Sony playstation
-need for speed, super Mario
-RPG games, counter speed
-GTA
-virtual reality games


ARM devices:
-music player, smartphones, wearables, tablets, sensors, IOT, arm based servers AWS with graviton 
 processor, analog devices, atmel, cypress, dialog semiconductor, cirrus logic, austrialmircosystems


Projects:
-learn to call API, dynamically change frontend, error handling


Networking:
-Common Operating Machine Purposely Used for Technological and Educational Research
-internet is collection of different computers network (across different cities, countries)(entire 
 collection of computers at global scale is internet)
-ARPA wanted to have way to communicate with each other
-MIT, standford, VCLA, Utah 
-more & more computers & locations were added
-www is project that stores & access documents
-fair documents & other web resources are identified by URL which maybe interlinked by hyper links
-there was no search engine that time there was just hyperlinks to hyperlinks
-Protocol -set of rules (made by internet society) (internet society.org)
          -how particular data being send (protocol) (TCP, IP, UDP)
          -overcome different way to communicate with different applications
-world wide web -WWW, information system where documents & other web resources are identified by URL, 
                 may be interlinked by hyperlinks & accessible over internet
-internet society -responsible for creating protocol
-client-server architecture (request & response from client & server)
-internet is under sea not in sea
-status 200 (everything is fine)
-TCP -transmission control protocol
     -ensure data to reach its destination without getting corrupted on way
-UDP -when you don't care if 100% of data is reaching destination
     -User datagram protocol, video conferencing
-HTTP -hyper text transfer protocol
      -being used by web browser
      -data is being transferred b/w servers
-ever single device on internet that talk have IP address
-formate of IP address (X.X.X.X) (X can have value b/w 0-25)
-IP address of own computer -curl ifconfig.me -s
-yahoo was 1st search engine
-ISP (internet service provider) -router or modem has global IP address
                                 -ISP --- modem/router (global IP address)  ----IP1--- D1
                                                                            ----IP2--- D2
                                                                            ----IP3--- D3
				-device 1,2,3 maybe connected (local IP addresses)
                                 -Ip1, Ip2, Ip3 local IP address
				-DHCP (dynamic host configuration protocol)
				-modem assigns these IP addresses through DHCP
-modem/router -decide who requested it, using NAT (network access translator)
-IP address -decides which device to send data 
-port number -used to identify which application made that request, basically 16 bit number
-all HTTP stuffs happen at port 80
-mongoDB port -27017
-0-1023 (reserved ports)
-1024-49152 (registered for applications)
-remaining for our use
-speed (1mbps = 1000000 bits/sec), (1gbps = 10^9 bits/sec), (1kbps = 1000 bits/sec)
-LAN -local area network, interconnects computer with limited area, residence, school. university 
      campus, (ethernet, wifi)
     -bigger than PAN, PCs, file servers, printers connected together
-MAN -metropolitan area network, interconnects users with computer resources in geographic region 
      of size of metropolitan area, cities
     -much larger than PAN & LAN
     -covers entire towns & cities
     -connects several LANs
-WAN -wide are network, extends over large geographical area, countries
     -connect different MANs & LANs & create huge network
     -WWW is WAN
-lot of LAN connected to each other using MAN connected to each other using WAN is internet
-modem -modulation demodulation
       -converts digital to analog & vice versa
-router -device that forwards data packets b/w computer networks
-ISP -internet service provides are companies that provide us access to internet
     -tier-1 TATA, tier-2 Airtel, idea
-topologies -bus topology -connected to single backbone
                          -if 1 part gets broken entire system will fail
                          -only 1 person at time can send information
            -ring topology -every system communicate with 1 another
                           -if 1 of cable break ---> won't be able send data
                           -all of unnecessary calls are made
            -star topology -there will be 1 central device will connected to all computer
                           -if central device fails, system goes down
                           -Facebook (192.168.2.1) ------> A (192.168.1.1)
                                                  |------> B (192.168.3.1)
                           -192.168.1.1, 192.168.3.1 (subnet mask) packets
            -tree topology (bus-star)
            -mesh topology -every single computer will be connected to every single computer
                           -expensive, scalability issues
-structure of network model -open system interconnection model
                            -(you)->A->P->S->T->N->DL->physical -----> physical->DL->N->T->S->P->A->
                             (friend)
                            -TCP/IP model -application layer, transport layer, network layer, datalink 
                             layer, physical layer
-application layer -implemented in software, application like browser, chat apps
-presentation layer -converts those messages, data into machine representable binary format encoding, 
                     encryption happens, provides abstraction compression translation
-session layer -helps in setting up & managing connections & enables sending & receiving of data 
                followed by termination of connected session
               -authentication & authorisation takes place
-transport layer -data received from session layer is divided into small data units called segment 
                  every segment has source & destination's port as well as sequence number flow 
                  control, error control
-network layer -transmission of received data segment from 1 computer to another located in different 
                network IP addressing done (logical addressing), routing is performed load balancing
-datalink layer -physical addressing is done here Mac addresses are physical addresses, these addresses 
                 of senders & recover are assigned to packets (frames)
-physical layer -hardwares (cables, wires)
-Mac addresses -12 digit alphanumeric number of network interface of computer network layer
-ping google.com -ping measures round trip time for message send from originating host to destination 
                  Computer & are echoed back
                 -peer to peer architecture -no 1 dedicated server, just connected with each other
                                            -scale it rapidly
                                            -every single computer can be termed as client or server
-TCP/IP -HTTP, DHCP, FTP, SMTP, POP3, SSH, VNC (virtual network computing)
-telnet -terminal immolation that enables user to connect to remote host/ device using telnet client 
         (port 23)
        -
-UDP -stateless connection 
-program (WhatsApp) ---------> send message (process) ----> set up page (thread)
                    ---------> receive video (process) ----> open camera (thread)
-process -like 1 of feature of program/ running instance, 1 program can have many processes running at 
          once
-thread -lighter version of process 1 process can have multiple running threads
-sockets -interface b/w process & internet
-ports -IP address tells which device we are working with while ports tell which application we are 
        working with
-3rd party cookies -many cookies set for one's you don't visit
                   -application layer -SMTP -senders ----> sender's SMPT server ----> receiver's SMTP 
                                       server ----> receiver
                                      -nslookup -type=mx gmail.com
                                      -POP -post office protocol
                                           -client <---authorise/transact----> pop server
                                      -IMAP -internet message access protocol 
                                            -allows to view email on multiple devices
-DNS -domain name system
     -mapped to IP address use services to look up into this most popular service in DNS
     -by typing google.com http protocol take that domain name & use DNS to find IP address & 
      afterwards it connects to that server
     -directory/database
     -mail.google.com (subdomain.second level domain.top level domain)
     -root DNS server (root (.io), DNS (.com), server (.org)
     -top level domain -organisational specific for (.com for commercial, .edu for 
      educational, .uk, .in country specific)
     -managed by ICANN internet corporation for assigned names & numbers
-transport layer -data transferred b/w 1 computer to another is done by using network layer
-network layer -transport layer is layer than lies over devices
               -transport layer take data from network to application
               -network <----------> network layer (network layer)
               -network <----------> application layer (application layer)
               -provides abstraction
               -located on device
               -data travels in packets
               -attach theses sockets port numbers to that packets
               -takes care of congestion control
               -congestion control algorithm built in TCP
-transport layer protocol -UDP -user datagram protocol 
                               -data may/ may not delivered, may change, may not be in order
                               -connection protocol 
                               -UDP uses checksum & if there is any error it won't care UDP packet
                               -use case of UDP -very fast, video conferencing apps, DNS use, gaming
                                                -sudo tcpdump -c 5 (see only 5 packets)
                          -TCP -transmission control protocol
                               -transport layer protocol
                               -application layer sends lot of raw dat, TCP segments this data, divide 
                                in chunks, add headers                                                    
                               -collect data from network layer & small chunks are put in to 1 in 
                                receiving end
                               -congestion control
                               -takes care of when data does not arrive, maintain order of data (using  
                                sequence number)
                               -connection oriented
                               -error control
                               -congestion control
                               -full duplex
                               -(A) <-----> (B) transfer simultaneously
-network layer -work with routers, ever router has network address
               -every router check whether packet if for that router, if not --> forward that using 
                forward table in routing table
               -IP address (192.168.2.30) (network address (subnet ID 192.168.2 & device address (host 
                ID) .30)
-control plane -used to build these routing tables
               -router --> nodes, links --> edges
               -2 types of routing used to create tables -static routing -adding address manually
                                                                         -not adaptive
                                                         -dynamic routing -when there is change in     
                                                                network it will evolve accordingly
-network layer protocol -IP internet protocol -IPv4 (Ip version 4) --> 32 bit, 4-words
                                              -IPv6 --> 128 bits
                        -blocks of IP addresses assigned to ISP (subnetting)
-classes of IP addresses -
-subnet masking -mask network part of IP address & leaves us to use host part
-variable length subnets -set your own subnet length
                         -15.0.0.0/30 ---> basically means 1st 30 bits are my subnet mask
-reversed addresses -127.0.0.0/8 
                    -local host 127.0.0.1 (client also server also) (loopback address)
-packets -header is of 20 bytes, contains IPV, length, identification, number, flags, protocols, 
          checksum, addresses, TTL (time to live)
-time to live -number after that number of hops, packet doesn't reach, it leave
-IPv6 -IPv4 -2^32 = 4.3 billion
      -4 times larger than IPv4
      -IPv6 -23^32*4 = 2^128
      -not backward compatible
      -ISP's would have to shift, lot of hardware works
      -format -a.a.a.a.a.a.a.a (hexadecimal 16 bits)
      -middle boxes -they are extra decide that also interact with IP packets
                    -mostly it will be in network layer, also be in transport layer as well
                    -firewall ---> connected to global internet
                              ---> your local network
                              -filters out IP packets based on various rules (address, modify packets, 
                               port number, flags, protocols
                    -stateless firewall -doesn't maintain state
                    -stateful firewall -see packet & maintain its state, more efficient
-network address translator (NAT) -method of mapping IP address space into another by modifying network  
                                   address information in IP header of packets while they are in   
                                   transit across traffic routing device
-data link layer -data packets receive from network layer data link layer is responsible to send these 
                  packets over physical link
                 -router -----> IP1
                         -----> IP2 (assigned using DHCP)
                         -----> IP3
-DHCP -new device -----------> DHCP server
           ^----------------------pool of IP address (a,b,c,d,e)
-data link layer -devices communicate with each other using data link layer address (MAC address)
                 -when device 1 needs to send something to device 4 ---> look up in cache ---> if does   
                  not have ----> ask all other device (ARP cache) (address resolution protocol)
                 -frame consists -DLLA of sender
                                 -IP address of destination
                                 -Mac address -media access control



[IMCDb]
[ISFDB]
[IMPDb]
[TV Tropes]
[IMFDB]
[world of tanks][Tankopedia]
[ALLCARINDEX]
[MotorTrend]
[Consumer Reports]
[Edmunds]
[encyclopedia]
[World Book]
[computer language]
[howstuffworks]
[wiktionary]


-option + command + escape (force quit any app)


Psychological tactics used by game developers:
-Variable Rewards -Players receive random rewards from loot boxes (unpredictability & excitement)
-Progression Systems -Players earn experience points by completing quests & defeating enemies to level up (sense of progression)
-Social Interaction - join clans, collaborate with clan members & participate in clan wars (sense of community)
-Limited time Events & Rewards (create urgency)
-Frequent Updates
-In-Game Economy & Micro-transactions -players invest financially
-Immersive Environments and Storytelling -rich narrative & expansive open world filled with quests, characters & lore
-Difficulty Balancing (tough enemies & bosses)
-Positive Reinforcement
-Habit Formation
-Loss Aversion
-Personalisation


[ourworldindata.org]
[think ---> code ---> commit ---> repeat]


PNP:
-portfolio
-open source contributions
-networking (connecting with recruiters)
-prepare 


Frontend development:
-Alligator.io
-


-Segway
-Makerbot Replicator
-Google Glass
-Nest Thermostat
-Osborne 1
-Fitbit
-Roku Netflix Player
-Sony Discman D-50
-DJI Phantom
-Raspberry Pi
-Oculus Rift
-Apple iBook
-Motorola Dynatac 8000x
-Palm Pilot
-HP DeskJet
-Nokia 3210
-errold Cable Box
-Wii
-Sony PlayStation
-Toshiba DVD Player
-TiVo
-Amazon Kindle
-Polaroid Camera
-Commodore 64
-BlackBerry 6210
-Phone-mate 400 Answering Machine
-TomTom GPS
-IBM Thinkpad 700C
-Motorola Droid
-JVC VideoMovie Camcorder
-Motorola Bravo Pager
-IBM Selectric Typewriter
-Nintendo Game Boy
- Nintendo Entertainment System
-US Robotics Sportster 56K Modem
-Atari 2600
-Philips N1500 VCR
-Canon Pocketronic Calculator
-Magic Wand
-Apple iPod
-Kodak Brownie Camera
-Regency TR-1 Transistor Radio
-Victrola Record Player
-IBM Model 5150
-Sony Walkman
-Apple Macintosh
-Sony Trinitron


Regrets of every programmer:
-code is not an asset but liability (try to write less code)
-start to learn when you are young
-practising & grinding Leetcode


Projects Guide:
-best projects are not madly high end language, they are made when you solve a big problem
-automation projects
-using all frontend, backend & database that solves problem
-always have problem statement 1st & then solve problem
-projects can be simple & can solve big problem


Youtube:
-find specialised unmet market
-create useful & educational content that audience is looking for
-make next video better than last one
-takes lot of time & experimentation to optimise content that audience is looking for
-don't copy someone else
-keep uploading & keep getting better
-make some jokes & create stories


Binary:
-numbering system where all possible values are represented by 2 symbols
-on, off, true, false, 1, 0
-computer can handle all stream of binary numbers as stream of data
-easy to represent 2 value with transistor rather than representing 10 values 
-manually clicking switches or punch cards to represent binary values
-used in pixel colour of any image
-ASCII table & HEX DUMP


Redis:
-in-memory multi-model database famous for its sub millisecond latency
-remote dictionary server
-speed & versatility, supports strings, lists, sets, hashes, bitmaps & more
-system where data is always modified or read from main computer as opposed to much slower disk
-snapshots & backups
-no need to squeeze it into bunch of tables & json documents
-interacting with database handled with simple set of commands
-key value store
-use caches to make relational databases fast & scale
-perfectly suitable for primary database & can dramatically reduce complexity 
-multi model database supporting variety of different database paradigm with add-on modules that you 
 can opt into
-EMP button
-installation -sudo apt update && sudo apt install redis -y   
              -brew install redis                             
-redis-server (start redis)
-redis-cli ping  (check if running)
-string	-store simple key-value data
-list -ordered collection of elements (like arrays)
-set -unordered collection with unique elements
-hash -Key-value pairs inside key (like objects)
-sorted set (ZSet) -like sets but with scores for ranking
-string operations -SET key value (store key-value pair)
                   -GET key (retrieve value)
                   -DEL key (delete key)
                   -EXISTS key (check if key exists)
                   -EXPIRE key 10 (set expiry time (seconds))
-list operations -LPUSH listname value (insert value at beginning)
                 -RPUSH listname value (insert value at end)
                 -LPOP listname (remove & return 1st element)
                 -RPOP listname (remove & return last element)
                 -LRANGE listname 0 -1 (get all elements)
-hash operations -HSET user:1 name "John" age 25  (set multiple fields in hash)
                 -HGET user:1 name (get field value)
                 -HGETALL user:1 (get all fields & values)
                 -HDEL user:1 age (delete field)
-set operations -SADD myset "apple" "banana" (add elements to set)
                -SMEMBERS myset (get all members)
                -SISMEMBER myset "apple" (check if element exists)
                -SREM myset "apple" (remove element from set)
-sorted set (ZSet) operations -ZADD scores 100 "Alice" 200 "Bob" (add elements with scores)
                              -ZRANGE scores 0 -1 WITHSCORES (get sorted elements)
                              -ZREM scores "Alice" (remove element)
                              -ZSCORE scores "Bob" (get score of element)
-


Recursive function:
-function calls itself inside its own definition (having dream inside of dream)
-1st function gets pushed on call stack then next on top of it & so on
-usually stack overflow error or computer runs out of memory
-very good choice in tree & graph but not everywhere since time complexity is O(N2)


Maths for programming:
-Machine learning -statistics & linear algebra is important
		 -vectors
		 -basic mathematics
		 -calculus
		 -probability
-backend development -graphs
-competitive programming -data structures algorithms
		        -9th, 10th, 11th, 12th maths is important
-game development -basic mathematics
		 -physics concepts & laws
		 -2D-3D geometry
-decimals, ratio & proportions, boolean algebra
-competitive programming -Fourier series, Laplace transform
			-tax calculations
-cyber security -number theory
	  	-cryptography


Python:
-high level interpreted language
-practical for various projects
-commonly used for server side applications, web apps, big data analysis, machine learning
-code is organised into notebooks where individuals cells can be executed then documented in same place
-.ipynb for creating interactive Jupiter notebook
-syntax is highly efficient
-multi-paradigm language 


Java:
-high level multi-paradigm programming language
-stability to compile to platform independent byte code
-compiles to byte code that can run on any operating system
-write once, run anywhere
-object-oriented (object, class, inheritance, encapsulation, polymorphism, and abstraction)
-secured (doesn't use Explicit pointers)
-java programs run inside virtual machine sandbox
-JRE also provides class loader, used to load class into JVM (java virtual machine) dynamically
-separates class packages of local file system from ones that are being imported from network
-strong memory management
-handle exceptions through java code, using type checking to make code more secure
-platform independent & no need to compile every time
-consumes more memory (runs on top of Java virtual machine)
-provides automatic garbage collection that can't be controlled by programmer
-less machine interactive
-bit costly due to its higher processing & memory requirements 
-need better hardware to run java program
-java is bit slower than C or C++


MongoDB:
-popular document oriented database
-organised into collections where they can be queried
-allows data accesses by app to be stored in same place
-makes read operation extremely fast since no joins are required
-makes easy to scale horizontally via shaarding
-designed for huge work loads
-full tech search
-NoSQL database stores data in JSON-like documents
-unlike SQL databases, no fixed schema, makes it flexible & scalable
-sudo apt update
-sudo apt install -y mongodb
-mongod --dbpath /data/db (start mongoDB server)
-mongosh (connect to mongoDB)
-show dbs (show all databases)
-use myDatabase (create or switch database)
-show collections (show collections (tables))
-db.users.insertOne({ name: "Alice", age: 25 }) (insert document)
-db.users.find() (fetch all documents)
-db.users.deleteOne({ name: "Alice" }) (delete document)
-CRUD operations -db.users.insertOne({ name: "John", age: 30, city: "New York" })
                 -db.users.insertMany([{ name: "Alice", age: 25, city: "London" }, { name: "Bob", age: 
                  27, city: "Paris" }])
                 -db.users.find()  (find all documents)
                 -db.users.findOne({ name: "Alice" })  (find first match)
                 -db.users.updateOne({ name: "Alice" }, { $set: { age: 26 } })
                 -db.users.updateMany({}, { $set: { country: "USA" } })  
                 -db.users.deleteOne({ name: "Bob" })
                 -db.users.deleteMany({ city: "Paris" })
-querying data -db.users.find({ age: { $gt: 25 } }) 
               -db.users.find({ name: /^A/ })  
               -db.users.find({ $or: [{ age: { $lt: 30 } }, { city: "London" }] }) 
               -db.users.find({}, { name: 1, age: 1, _id: 0 })  # Show only name & age
-indexing & performance -db.users.createIndex({ name: 1 }) 
                        -db.users.getIndexes()
                        -db.users.dropIndex("name_1")
-aggregation framework -db.users.aggregate([{ $match: { age: { $gte: 18 } } },  # Filter
                                            { $group: { _id: "$city", count: { $sum: 1 } } }, 
                                            { $sort: { count: -1 } }])
-replication (high availability) -primary -handles reads & writes
                                 -secondaries -keep copies of data for failover
                                 -rs.initiate() 
-sharding (scalability) -distributes data across multiple servers
                        -requires sharded cluster with mongos router
-security -use admin
          -db.createUser({user: "admin", pwd:"securepassword", roles:[{ role: "root", db: "admin" }]})
          -enable authentication -edit mongod.conf ---> -security: authorization: "enabled"
                                 -restart mongoDB: -mongod --auth


PostgreSQL:
-most trusted name in open source relational databases
-stores data in table, rows & columns
-use SQL to read & write data
-object relational database
-creates its own datatype to store object with properties
-supports advance features like polymorphism & inheritance
-give each transaction snapshot of database --> allow multiple transaction to run at same time traffic  
 jams or locks
-robust ecosystem
-every table has unique primary key


Blender tools:
-object mode -help manipulate objects in scene
             -translate (move) –moves objects along X, Y, Z axes
             -rotate –rotates objects around pivot point
             -scale –increases or decreases size of object
             -transform –combines move, rotate, scale
             -duplicate objects –creates copy of object
             -join objects –merges multiple objects into one
             -separate –splits object into multiple objects
             -origin Tool –moves object's origin (pivot point)
             -mirror –creates mirrored duplicate of object
             -shade smooth/flat –adjusts how light interacts with surfaces
             -boolean –uses one object to cut or merge with another
             -parenting –links one object to another for hierarchical movement
-edit mode (mesh editing) -used for modifying mesh geometry
                          -vertex, edge, face select –allows selection of different parts of mesh
                          -extrude –extends geometry by creating new faces
                          -inset faces –adds new geometry inside face
                          -bevel –smoothens edges by adding new geometry
                          -loop cut & slide –creates new loop of edges in mesh
                          -knife tool –manually cut & add edges to mesh
                          -edge split –separates edge without removing it
                          -bridge edge Loops – Connects two edge loops with faces
                          -fill – closes open hole in mesh
                          -grid fill –creates a smooth surface over open hole
                          -triangulate –converts faces into triangles
                          -subdivide –adds more geometry for smoothing
                          -proportional editing –allows smooth transformation of multiple vertices
-sculpting tools -used for digital sculpting
                 -draw –adds volume to surface
                 -clay strips –mimics traditional clay sculpting
                 -crease –creates sharp edges & folds
                 -smooth –blends surfaces smoothly
                 -flatten –flattens surface of mesh
                 -pinch –pulls vertices together for sharper details
                 -inflate –expands the surface outward
                 -blob –creates smooth bulges
                 -snake hook – Pulls surface in snake-like motion
                 -mask –protects specific areas from sculpting
                 -grab –moves large areas of the model
-texture paint tools -used for painting textures onto objects
                     -draw –paints colour directly onto a surface
                     -smear –smudges painted texture
                     -clone –copies details from 1 part of texture to another
                     -fill –fills area with solid colour
                     -soft eraser –erases texture softly
                     -vertex paint tools -painting directly on vertices
                     -draw –adds colour to vertices
                     -blur –blends colours smoothly
                     -smear –smudges painted colours
                     -lighten/darken –adjusts brightness of vertex colours
-weight paint tools -used for rigging and animation
                    -draw –assigns weight to vertices for deformation
                    -blur –smooths weight distribution
                    -average –levels out the weight values
                    -smear –moves weights like paint
-UV editing tools -unwrapping & editing UV maps
                  -Unwrap – Automatically generates UV maps
                  -Mark Seam – Defines edges for unwrapping
                  -Pin – Fixes vertices in place
                  -Pack Islands – Organises UV islands efficiently
                  -Live Unwrap – Updates UV maps in real-time
-grease pencil tools -used for 2D animation in blender
                     -draw –freehand drawing tool
                     -fill –fills enclosed areas with colour
                     -eraser –deletes drawn strokes
                     -line –creates straight lines
                     -curve –draws curved lines
                     -polygon –creates geometric shapes
-animation tools -keyframing & animating objects
                 -timeline –controls animation playback
                 -dope sheet –edits animation keyframes efficiently
                 -graph editor –adjusts movement curves
                 -action editor –manages different animations
                 -pose mode –used for rigging & character animation
-physics & simulation tools -for real-world effects
                            -rigid body –creates realistic object physics
                            -Soft Body – Adds elasticity to objects
                            -Cloth – Simulates fabric movement
                            -Fluid Simulation – Creates realistic water and smoke effects
                            -Particles – Adds effects like fire, sparks, or hair
                            -Force Fields – Influences physics objects with gravity, wind
-shading & materials tools -for realistic materials & textures
                           -shader editor –controls how surfaces react to light
                           -principled BSDF –main material node for realism
                           -normal maps –adds fine details without extra geometry
                           -displacement –modifies shape of objects with textures
-rendering & compositing tools -for finalising & exporting projects
                               -cycles render –high-quality path-tracing engine
                               -eevee render –real-time rendering engine
                               -compositor –adds effects like blurs, colour correction, glows
                               -render layers –organises elements for compositing
                               -depth of field –blurs background elements for realism
                               -motion blur –simulates movement blur
-geometry nodes -for procedural modeling
                -distribute points –creates scattered objects
                -boolean operations –cuts & merges geometry procedurally
                -randomise attributes –varies properties of objects
                -mesh to curve –converts mesh edges into curves
                -instances on points -places objects at specific points
-video editing tools -cut –splits video into sections
                     -fade –adds smooth transitions
                     -overlay –combines multiple video clips
                     -chroma key –removes green screens
                     -colour grading –adjusts brightness & contrast


Serverless computing:
-servers in cloud that requires 0 configuration & maintenance from developer
-amount of CPU & memory it takes to run your code
-AWS lambda, google cloud functions & Azure functions
-


AI influencers getting rich:
-using open source generative image models like diffusion XL & checkpoints like juggernaut
-producing high realistic image


Google like pro:
-wrap your question in quotes
-use site:URL to search 
-use - to exclude any dominant term you don't want
-use AFTER:2020 & BEFORE:2030 to get content published at specific time
-2015..2019 or $20..$40 range
-(A|B)C search for A or B but search for C is compulsory
-*wildcard 
-filetype:pdf 
-related:URL
-cache:URL 


VS code:
-productivity is key to success
-if using Mac or linux (need to add binary to your path)
-code (open current directory)
-code file.js (open file)
-less you rely its better (mouse is slow & keyboard is fast)
-ctrl + p (opening command palette) (do anything without remembering key bindings)
-executing javascript directly in file using Quokka.js
-ctrl + f (finding any word) or using @ in command palette)
-ctrl + g (:23) line number & shift key + arrow key to highlight something or ctrl + arrow 
-ctrl + d (finding matching words & changing them in one go)
-alt + shift + downkeyarrow or upkeyarrow
-ctrl + l (highlight line)
-ctrl + / (toggle comment)
-sometimes you need multiple terminal sessions running at same time
-ctrl + ` 


Mac commands for displaying connections
-ifconfig -a
-ifconfig
-iwconfig
-networksetup -listallhardwareports
-system_profiler SPBluetoothDataType
-blueutil --paired
-netstat -an
-netstat -i


Linux commands for displaying connections:
-ip link show
-ifconfig -a
-nmcli device status
-iwconfig
-bluetoothctl devices
-hcitool scan
-bt-device -l
-mmcli -L
-nmcli connection show
-netstat -tuln
-ss -tuln
-ifstat
-vnstat
-sudo rm -rf (destroys system & hard to recover), no preserve tool
-


Cyber attacks:
-


Tools of web browser:
-brave & edge are based on chromium 
-don't use safari & internet explorer
-ctrl + p (opening command palette)
-com + shift + j (opens up downloads)
-ctrl + p (command pallet) --> > (gives list of every command at your disposal)
-visual coverage (how much JS & HTML is contributing in visual elements)
-red bar indicates unused & dead code makes app slower
-$('h1') to grab element 
-$$('h1') to grab multiple elements 
-$0
-live expression by clicking on eye icon
->snippets
-redeclare variable
-copy elements
-using animation panel
-rendering FPS 
-visbug extension
-lighthouse tool
-responsive device
-network waterfall
-server timing
-memory profile
- 


Power over ethernet:
-networking devices need electrical power to function
-some have separate power cable 
-adds connivence over networking devices
-deeper connect air (decentralised private network) DPN
-


Browser shortcuts:
-Cmd + t (open new tab in web browser)
-Cmd + W (close tab)
-Cmd + Shift + T (reopen closed tab)
-Cmd + N (New Window)
-Cmd + Shift + W (Close Window)
-Cmd + Option + Right Arrow (Previous Tab)
-Cmd + 1 to 8 (Jump to a Specific Tab)
-Cmd + R (Refresh Page)
-Cmd + Shift + R (Hard Refresh (Clear Cache))
-Cmd + Shift + H (Home)
-


DNS:
-phone book of internet
-it maps human readable URLs or host names like www.fireship.io to IP address of server
-attempt to look at local browser or operating system to check cache
-recursive resolver -need to make multiple request to root servers 


Graphic designing:
-line, shape, colour, texture, space, image
-backend identity design, marketing ad & design, packaging design, UI/UX design, print & publication design, lettering & type design, graphic illustrations, data visualisations
-fonts can change how you feel
-do not work for free 
-learn about -brand strategy
	     -learn about making contracts
	     -taking 50% advance payment
	     -creating invoices
	     -keeping track of all projects
-


[If you don't know technology & how it works in this era then you are making big mistake]


Modules:
-javascript lives in single file --> turn this code into module by exporting --> this allows other files to use an import statement import this file as dependency
-module is nothing but file that exports its own code --> allows developers to organise their own projects or share their code with world with package managers like NPM 
-syntax is also supported in node 13
-module can export single default value, multiple value
-module also has option to expose multiple exports to single file
-you can export 1 by 1 or all together as single export list 
-importer will use the exact name used in module 
-Require -require function to import module
	 -require is more common now but future is ES module


[demos]


NumPy python:
-multidimensional array library
-can be used to store all sorts of data
-very fundamental for scientific computing
-lists are very slow meanwhile numPy is very fast (because uses fixed types) (faster to read less 
 bytes)
-Slicing and Indexing, Set operations, Sampling Methods, Array, Data Types, Linear Algebra
-In list a lot of information you store as an integer
-no need to type check each time when iterating through each item
-utilises contagious memory
-In list items are scattered around
-SIMD vector processing (single instruction multiple data) & effective cache utilisation
-insertion, appending, deletion, concatenation can be done in both Numpy & Lists
-Application -mathematic replacement (Matlab replacement)
	     -useful for plotting (matplotlib)
	     -backend (pandas, connect 4, digital photography)
	     -use to store png images
	     -useful for machine learning applications
	     -tensors library are similar to lumpy library


Built a Neural Network from Scratch:
-only using Numpy, python & mats
-From individual neurone to more complex networks
-neuron that has 3 inputs & 1 output (each connection has weight)(we multiply them with their inputs  
 & add bias)
-all neurone are interconnected to each other all connections mean that output value of neuron is 
 calculated as weighted sum of all previous neurones (same can happen to next neuron)
-linear algebra 
-ReLU (rectified linear unit) (understanding non-linear data)
-training exact same network on Pytorch --> getting correct weight --> pop that into network --> 93% 
 accuracy
-calculating how wrong is network
-update & weights & biases so that model actually learns something
-backrotation
-forward pass --> calculate loss --> backward pass --> update weight --> forward pass --> (models 
 keeps getting better& better)
-learning rate = amount that network changes its parameters (higher LR is more rapidly its going to 
 change parameters)
-optimisers
-Fashion minister


AI Learns to make Art:
-deep dreaming (used to generate very interesting & psychedelic art)
-convolution neural network (CNN that classifies image to docs then we pass random image of some cloud through model then tell them to stop at certain layer then amplify docs in that image)
-deeper you go more complex & intricate pattern gets 
-deep dreaming with different images
-Imagenet model
-neural style transfer -taking painting + image = produces image with style of painting
		       -difference between input image & style image 
		       -difference between input image & content image 
		       -trying to minimise both distances
-stable diffusion -extremely complicated to do & works by taking advantage of generative adversarial network
		 -training with billions of images & cost a lot of money
		 -using an open source library is great idea & easy to use also


AI Learns to make Faces:
-training neural network to generate these hyper realistic photos
-styleGAN3 (creates realistic human faces as well as animals)
-generative adversarial network
-deep convolutional gan
-DC gan
-generators starts with very small with really small image --> turn into bigger image --> discriminator takes bigger image & classifies it as fake or real
-during training -generator constantly tries to outsmart discriminator by creating better & better   
                  face
		-discriminator tries to be better & better detective & correctly differentiate real 	  
                  & fake images
-super sensitive to parameters & unstable for reference 
-proGAN (progressive growing GAN)
-adding more layers to double resolutions (4x4 pixel --> 8x8 pixel --> 16x16 pixel --> ... 1024x1024)
-latent vector (100s of random numbers)


[https://github.com/chuhaojin/Text2Poster-ICASSP-22.git]
[https://Linux-Hardware.org]
[dreamstudio.ai]


Making video game:
-platform game, isometric game, top-down game
-knock off games
-physics -data & plotting on graph, velocity, acceleration
         -x & y direction, plotting graph
         -force, gravitational force, horizontal force, vertical force, air resistance
         -kinematics, projectile motion
         -tracker video analysis
-engine -box2D, Nape physics, SpriteKit, Chipmunk2D physics


Blender for game development:
-open source
-not industries standard
-Maya & 3DX max can be used later on
-less official support
-modelling, sculpting, physics simulations, animation, paintings & even video editing
-asset creation & assembling those assets
-mapping, baking, texturing, rigging
-modelling -most Time consuming part 
	   -creating characters & environment that contains lot of props
 	   -lot of modifiers & lot of operations that effects objects in non-destructive way to
             gain time & make modelling process easier & efficient 
	   -low poly versions of highly detailed models to allow us to run video games smoothly in
	    real time
	   -box cutter, hard abs, mesh machine 
-Sculpting -characters are better created using sculpting forms start (although not advance as
	    Zbrush)
-UV unwrapping -creating games assets
	       -using some plugins to speed up process
	       -highly repetitive
-Baking -baking mesh normals which affects how light appears to reflect from model surface
	-specialised image with RGB value based 
	-requires UV & rap 
	-need to place high poly version & low poly version placed exactly in same position
-Texture -texture for characters & props in environment 
	 -using real time renders
-Animation


Blender for VFX:
-Particle system -used to simulate large amount of small moving objects creating phenomena of higher order fire, dust, cloud, smoke, grass
		-each dot react to different forces & have notion of lifespan
		-hair type particles are subset of regular particle 
-rigid body simulation -affects positions & orientations of objects & deform them
		      -body physics is great for flat surfaces or single point of collisions
-soft body simulations -adding secondary motion to animation (jiggles body parts)
		      -gravity, force fields
-cloth simulation -cloth, flags
-fluid simulation -viscosity & gravity
-Motion tracking
-composting
-video sequencer


Mark Zuckerberg on programming:
-language models & large language model (don't have to remember much)
-stack overflow
-earlier had to remembers all libraries & dependencies 
-summarise whole knowledge base 
-Facebook -wrapped php code in Mac shell script to run php
          -custom php script most likely monitoring apache logs in real time
          -modify apache log format & use %D symbol to display response-time/ latency, rest of display 
           (hostname, IP address, destination file)
          -zuck's script is programmed to simply display one-way latency (response-time) for web server 
           to server request to each connections, slowest connections & fastest connection
          -possible using apache logs & clever programming
          -MySQL database, apache server running on linux boxes, PHP
          -participants had 10 minutes to gain access to python web server, expose its SSL encryption & 
           intercept all data over its secured ports
-facts -most hack happens because of people stupidity & laziness & choosing weak password
       -mark didn't hack anything, most Harvard houses had internal Facebooks (simple web apps) served 
        individual student names, photos, email addresses freely to logged-in users
       -pages had URLs ending with unique identifiers for student (students=12345) changing number --->
        another student page 
       -mark wrote set of simple web scrappers that visited each pages in numerical order
       -hackers dumps 1000s of password in deep web
-break through -accessing dormitory databases
               -used web scraping ---> find publicly accessible directories
               -harvard had online directories for each dormitory, listing student names, photos, basic 
               -used script written in perl (programming language good for text processing) to scrape 
                these public websites
               -sending requests to webpages, extracting HTML content, pulling out data
               -bypassing security measures
               -most pages were public, some needed login credentials 
               -instead of hacking passwords, exploited weak configurations, like unencrypted URLs or 
                accessible API endpoints that didn’t verify users properly
               -faked browser session using scripts —pretending logged-in user by copying session 
                cookies or tokens
               -automating comparison system (Facemash logic)
               -saved scraped data into simple database (probably MySQL or SQLite)
               -hosting & crashing harvard network
               -hosted Facemash on local server (using Apache or Tomcat)
               -when site went viral -----> traffic overwhelmed harvard’s servers
               -DDoS-like effect (distributed denial of service) where tons of requests caused system 
                to crash because couldn’t handle load


[windows 356]


OpenCV:
-openCV is free to use
-compatible with many coding languages
-used to build GUI applications with customisable interfaces
-reading images & videos, image transformations, drawing shapes, putting text
-colour spaces, bitwise operators, masking, histogram computations, edge detection
-face detection, face recognition, deep computer vision, object detection, edge detection


Scikit-Learn:
-


[pip install --upgrade pip] 
[python3 -m venv myenv] (entering python virtual environment)
[source myenv/bin/activate]
[if ctrl + c does not kill the program then try ctrl + \ then ctrl + z]


Creating pull request:
-


Becoming great programmer:
-curiosity is most important thing
-be creative & be open to new things
-chunk up problems into small parts to solve
-write down what you're trying to accomplish before starting to code
-reuse other people's work, but understand it as much as you can
-be sensitive to hype cycles (e.g. be skeptical the latest programming fad)


Penetration tools (physical pin test tools):
-recording as much data as you can
-glasses with camera installed
-video recording pins
-micro computer with wifi & bluetooth with several different payloads
-high-end HDMI monitors
-cuff link USB adapter
-badge scanner


CS terminology:
-CS deals with theories & methods & processing information on digital computer
-designing computer hardware & software
-transferring & exchange instructions back & forth between hardware & software


Big O notation:
-way to describe how an algorithm works
-number of inputs & order of complexity
-for memory it has space complexity
-faster result grows after each step worst your algorithm perform


Godot:
-free & open source game engine capable of building high quality 2D & 3D games
-unity allows you to create, visualise & program behaviour of game objects
-using C or C++ or just GDScript (cross between python & typescript)
-reduces amount fo complexity & boiler plates when coding game scripts
-nodes are like building blocks that can be assigned as child of another node to control appearance & 
 behaviour of objects in scene
-we can save scene in disk & use it within other scenes
-can export your game in single click
-gizmo
-wireframe
-mesh is collection of triangle that make 3D shapes looks realistic
-directional light
-collision shape & mesh
-attaching script


Bad code just broke billion Windows machines:
-blue screen on windows
-update pushed by enterprise cybersecurity firm (crowd strike)
-airplanes are shutting down, hospitals are not able to treat patients, drive through window
-catastrophic failure
-falcon tool that provides end point protection using AI & analysis to detect threat in real time
-fix -detach operating system disc create snapshot or backup of disk
     -mount volume to new virtual servers
     -navigate to winder or drivers directory
     -delete file 
     -detach volume 
     -reattach fix volume to impacted virtual servers


Zip vs Rar:
-zip -standard format for lossless data compression
     -free & open standard with many implementations & supported almost everywhere
     -comes with built-in support for password encryption
     -zip uses Zip 2.0 encryption algorithm which is relatively weak
     -created with several programs (winRAR, winZIP)
-Rar -proprietary archive format for lossless data compression 
     -not free & open source & requires third party tool (winRAR archiver to compress/ decompress file
     -no password protection settings in built-in ZIP support provided by windows & Macintosh
     -use much efficient AES-128 encryption
     -limited to only program that is WinRAR 


Archiving vs compressing:
-archiving -tar -standard UNIX archiving utility
           -shar -shell archiving ulitiy, share replaced by tar/gzip
           -ar -creation & manipulation ulitiy for archives, mainly used for binary object file 
                libraries
           -rpm -red hat package manger
           -cpio -copy input & output, supplanted by tar/gzip, but still has some uses
           -rpm2cpio -command extract cpio archive from rpm one
           -pax -portable archive exchange toolkit facilities periodic file backups & cross-compatible 
                 b/w various floors of UNIX


Gzip:
-lossless file compression tools famous for making large chunks of data smaller
-files on computers are represented by chips on silicon chip but they often take up more space than 
 actual necessary
-LZ77 (solving problem by looping over content of file to identify repeated sequences that can be 
 replaced by meta data or shorter sequences --> reducing total amount of bits required to represent 
 information)
-lousy compression (which can make image file smaller but information is lost on process)
-gzip is most common way to implement end to end compression (file compressed on server is decompressed 
 on browser to reduce data sent over network)
-gzip is installed by default in any linux machine
-high compression ratio --> more space it has saved
-gzip cannot compress entire directory


Docker:
-tool that can package software into container that run reliably on any environment 
-virtual machines are bulky & slower
-instead of virtualising hardware, containers only virtualise OS
-all apps & containers are run by single kernel which make it faster & efficient
-docker file -its like DNA, use code that tells docker how to build image (which itself is snapshot of software along with all dependencies down to operating system level)
-image -immutable & can be used to spin up multiple containers which is actual software running in real world
-base image can be pulled down form cloud & can also upload your own image to variety of different docker registers
-building image layer by layer 
-can be run on multiple machines, multiple clouds 


Fatest algorithm:
-no fastest sorting algorithm
-each sorting algorithm can be fastest for certain scenarios
-many types of sorting algorithm present with time complexities O(N²), O(N*logN) & even O(N)
-quickSort has an excellent average-time performance, but degrades to quadratic-time in some cases
-most report that fastest sorts on average are quick-sort, or radix-sort (bucket sort)
-radix-sort may win in worst case & in worst case quick-sort is very bad
-tim-sort (fastest in practice, hybrid sort = merge sort + insertion sort + number of heuristics -intro-sort is another hybrid algorithm but not stable (combination of quick sort + heap sort & neither   of them stable
-cases -tiny lists = insertion sort (quite fast & stable)
       -larger ones = merge sort (generally fastest)
-dumbest sorting algorithm is Bogo sort


[PIXLR]
[Craiyon]
[NightCafe]
[Artbreeder]
[Tuberipper]


File compression formate:
-


Pied piper:
-most efficient network on earth
-compress content of encrypted file in transit bypassing encryption
-able to decrypt strongest known encryption schemes


Array Reduce:
-start with list of items then iterate over them to compute single value
-


ArrayMaps:
-


Typescript:
-


-Overclocked
-Opencv projects
-


Git advance:
-perfect commit
-bigger commit gets & more topics mixed into commit harder it gets understand 
-git add -p index.html (p stands for patch level)
-y for yes & n for no
-git status
-git commit
-branching strategy -helps when working with teams & onboard team members
		   -avoid mistakes & collision
		   -must have high quality testing environment setup
		   -


Matplotlib:
-useful library for data visualisation in python
-line plots, scatter plots, bar plots, histograms, pie charts
-3D plots, Contour plots, Heat maps, Box plots, Violin plots
-non-Cartesian plots, vector fields, violin graphs
-visualise both ordinal and tabular data
-geospatial plots, beautiful Data Visualisations with Seaborn
-implement event handling & GUI widgets & learn how to turn interactive plots into videos
-Visualise data using PyPlot, plot functions, create complex subplots & troubleshoot issues


Developer vs maintainer:
-open source softwares 
-global community of developers & maintainers
-Developers -innovators of open-source community
	    -contributes new ideas, develop features, write code
	    -finding errors & fixing bugs requires deep technical knowledge & analytical skills
-Maintainer -takes overall responsibility of management & coordination of all open source projects
	    -prioritising, setting goals, planning long term strategy
	    -which new feature should be included in next version 


Pandas:
-data structures for data analysis
-Data frame is two-dimensional
-Series is one dimensional
-data analysis toolkit for python
-fast, powerful, flexible
-pandas’ data structure is efficient
-pandas objects are structured like spreadsheet with rows & columns
-provides include relational databases, features that support plain text & tools for supporting comma-separated values (CSV) files
-data merging is simple in various situations
-effortlessly merge small, medium, or large datasets with Pandas
-data is flexible with Pandas
-employees will encounter no problems when editing data, customising datasets, or pivoting data to match their requirements
-pandas are more flexible than in SQL
-SQL only supports column metadata, pandas supports column & row metadata
-use pandas (with Python) in several domains (statistics, advertising, financing, or analytics)


Web scraping using python:
-Web Scraping -extracting content & data from website
	      -websites are built using Hypertext Markup Language (HTML) codes which web scraping codes/web scrapers can download objects from them
-interacting with URLs is important to web scraping 


Making Sorting algorithm race:
-important for search engines, databases, operating systems
-bogo sort (dumbest algorithm ever)
	  -randomly suffering data & checking if its in order
	  -best case scenario -1/100! (It would technically work)
-bubble sort -goes through data & compare adjacent elements & swaps them in wrong order
	     -repeats again & again
	     -not best but works
-merge sort -divides data into smaller & smaller chunks & sorts them
	    -then merges them back together
-cocktail shaker sort -kind of like bubble sort but it moves in both direction
		     -not that good 
-insertion sort -works by inserting each element into correct position
-bucket sort -divides data into buckets based not their values
	     -then merges whole
-quick sort -most used algorithm right now
	    -works by selecting pivot element then dividing other elements into 2 lists depending on if   
             they are greater or less than pivot
-radix sort -fastest 


Sorting algorithms:
-selection sort -performs well on small list & no additional temporary storage is required
                -poor efficiency in huge list of items
-bubble sort -popular & easy to implement 
             -doesn't do well with list containing huge number of items
-insertion sort -simple, performs well on small list & minimal space is required
                -doesn't do well with huge list
-merge sort -applied to files of any size, requires extra space = N
-quick sort -best sorting algorithm & deals well with large list
            -disadvantage with worst case efficiency


Linux boot process:
-behind scenes when pressing power button
-program (BIOS/UEIF) boots up --> pieces of softwares gets all part of computer ready for action --> 
Runs post --> checks out with post --> BIOS & UEIF needs to find & load up boot loader software --> boot loader usually set to check hard drive 1st or Usb drives or CDs 
-boot loaders -locate OS kernel on disk
	      -load kernel into computer memory
	      -start running kernel code
	      -some common boot loaders (LILO & GRUB2)
--> hands over to kernel to finish up start up process --> kernel takes control of computer's resources --> starts initiating all background process & services
-decompresses itself onto memory & checks hardwares --> loads device drivers & other kernel modules
-systemd -has ton of responsibility to get system boot up & ready to use
	 -


IDEs:
-integrated development environment
-indexing -core feature, all WebStorm functionality (syntax/error highlighting, code completion, code  
           inspections, navigation, refactoring, code coverage, search) is based on indexing
-combination of tools, text editor & compiler
-notepad or notepad++ 
-electronic machine only understand voltage fluctuations 
-debugger -application that detects errors & stops program right before error 


Vector database:
-pinecone, chroma, weaviate
-vector is array of number but can represent more complex objects like words, sentences, images, audio file & continues high dimensional space called embedding
-embedding -maps semantic words together similar features in virtually any other data type (used for recommendation system, search engines, text generation like chatGPT)
-vector database -you have array of numbers clustered together based on similarity 
		-ultra low latency
		-making it ideal choice for AI driven applications
		-extend LLM with long term memory
-Auto-GPT & babyAPI


Machine learning & neural networks without libraries:
-web app that learns to recognise drawings
-each drawing is made by collection of paths containing points
-


Tensor flow:
-open source machine learning framework for powering deep learning networks with high level code
-just library for programming with linear algebra & statistics
-multi dimensional array 
-collection of APIs for data processing visualisation model evaluation & deployment that make deep learning accessible to average developer 
-can be run on any small to big device & even in browser with tensorlfow.js
-core library can be scaled upto multiple GPUs or run on tensor processing units ships engineer specific
-used in medicine for object detection & MRI images
-used in predictive analysis
-recommended music 
-fraud detection
-self driving car, natural language processing 
-training model for multiple epics its accuracy should gradually improve


Power-shell vs command prompt:
-power-shell -task based CLI & scripting environment based on .Net framework
             -uses much more powerful function called cmdlets
             -interpret both batch commands & power-shell commands
             -output generated is not stream of text but collection of objects
-command prompt -CLI for Microsoft Windows OS
                -mostly string based & older batch language with standard set of function
                -only interpret batch commands
                -output generated is stream of characters (text)


Benefits of using unix/linux terminal:
-increased productivity -allow faster & more efficient interaction with OS, perform tasks more quickly 
 & automate receptive tasks
-better control over system -provides more granular control over system that graphical interfaces
                            -easily manipulate files, processes & system settings
-greater flexibility -offer greater flexibility than graphical interface, allowing to customise 
                      workflow & automate complex tasks
-access to powerful tools -only available in CLI, gain access to tools, helps in analysis & manipulate 
                           data, debug issues & manage system resources
-fixing issues at lower level
-linux runs on everything (cellphones, android phones, television sets, refrigerators to PC & laptops, 
 multi-million dollar super computer available, raspberry Pi zero


Char vs Varchar:
-char -fixed length strings with set length specified, if string is less than set length --> padded 
       with extra characters so its length is set length
      -use char when strings are going to be same length (phone, numbers, zip, codes)
      -fixed length data type, storage size of char value is equal to max size of column
      -doesn't shrinks space if not fully filled
      -allocate values upto full length specified using whitespace
      -gives more performance
      -takes 1 bytes per character
      -fixed number of characters, data are padded with spaces at end at end to full length of field
      -char column is incapable of holding null
      -uses reserve storage space
      -Declare test Char(100); test="Test" (test occupies 100 bytes 1st 4 bytes with value & rest with 
       blank data)
-varchar -variable length strings with max length specified, if string is less than max length, stored 
          verbatim without any extra characters
         -use archer when your strain don't have fixed length
         -variable length data type, storage size is actually length of data entered, no max size of 
          column
         -varchar shrinks space is not fully filled
         -allocate limited memory which occupied by data, no padding is there
         -less performance over char type
         -takes up 1 byte per character, +2 bytes to hold length information
         -variable character & it occupies exact amount of characters as data
         -char(x) NULL column is actually varchar(x) NULL column
         -uses not reserve storage
         -Declare test VarChar(100); test="Test" (test occupies 4+2=6 bytes, 1st bytes for value & 
          other 2 bytes for variable length information


Varchar vs Varchar2:
-varchar -identify NULL & empty string separately
         -store minimum 1 & maximum 2000 bytes of character data
         -allocate fixed size of data irrespective of input
         -extra spaces are padded to right side
         -ANSI SQL standard
         -external datatype
-varchar2 -can't identify both separately, north considered as same
          -store minimum 1 & maximum 4000 bytes of character data
          -allocate variable size of data based on input
          -extra spaces are truncated
          -Oracle standard
          -internal datatype


Third party softwares:
-Microsoft office (excel, power point) outlook, gmail, antivirus, McAfree, Norton
-created by companies other than companies developed computer's OS
-all Macintosh apps which are not created by apple are third party apps
-third party solutions comes in various forms -middleware, enterprise java beans, VCL/ CLX, KParts 
 (KDE), video game third party developers, third party source


Impact of Artificial Intelligence on Programming:
-automations has always helped people
-machine code --> assembler --> C --> rust
-low level hardware & kernel 
-you need to be optimistic to make big things


[4K images contain over eight million]
[AI girlfriend]
[Listing calculator]
[talk is cheap, tell me code]


Gaming terms:
-interface -sfx, haptic, blood, music, restore, purchase, data content, terms of use, privacy policy,
            language, music, sound, draw dirt, pedals, privacy options, about, social media icons
            control, daily bonus
-diamond, gold coins
-rewards, achievements, box, chest, trunk
-health, unit size, training cost, training time, movement speed, attack range, damage per second
-HUD (head of display)
-health, life left, pointes ammunition, weapons, menu option, sound, game progression, level 
 information, node is fundamentals building block of scene, within spirit kit
-HP is hit points, health points one you run out you die
-MP is mana points, used for casting most spells
-XP is experience points, when you gain enough of them you level up
-SP is stamina points and works kind of like MP but naturally recovers and is mostly used for skills
-scene (area of content)
-ATK (attack power)
-bots (CPU)
-cheesing (cheap tactic)
-DPS (damage per second)
-cool-down period
-Ganking (high level skilled player ganging up)
-glitch, lag -bug in game code
-K/D -kill to death
-PvP/ PvE
-critical hit
-loot, map -high tower, subdivision, bottle neck, no escape, so long, lunacy, icebox, snow blind,   
            pyramid, catacombs, overseer, suspension, cliffhanger, crossfire, undermine, crucible, 
            stronghold, entombed, deadlock, outpost
-max players, game time, game mode (PTB, TDM, CTF, VIP), spend limit, map drops, gravity, default load out, global specials
-one shot kill
-deploying troops
-unit size, training time, movement speed, attack range, attack speed, splash radius, shock duration, 
 headquarter level required
-rank, level, reserves size, upgrade tokens, tech level
-armoury, 
-level, hit points, DPS, damage per shot, training cost, research time, instant, XP gain
-abilities, locations, player speed, task bar, task list, tasks, vision
-chat, discussion, ejections, emergency, kick, quick chat, report, voting
-danger meter, flashlight, timer bar, ban, host, options, private, public, start
-accounts, achievements currency, friends list
-help, region, filtering system
-max speed, acceleration, handling, braking, buy, level, daily reward, VIP, coins, diamond, PR
-MP, HP, Health, money
-lost, win, draw
-zoning
-XP, MP, HP, PP
-VRR (variable refresh rate)
-under-levelled 
-PVP / PVE
-unlocks, time attack
-T-pose, telegraph
-turn-based, tanking, stun-lock
-skins, spamming, speed-run
-raid
-ragequit
-ADS, AoE, bots
-backwards compatibility
-unexpected glitch
-balancing, bullet sponge
-boss-rush, cheesing
-camping
-crafting
-combo
-DPS
-drops
-dialogue tree
-de-buff
-de-aggro
-weapons -lazor, shock blaster, doom cannon, damage amplifier, shield generator, grappler, hot pot, 
          SIMO, sky shield, boom surprise, flotsam cannon
-easter egg
-exploit
-escort mission
-end-game
-frame-rate
-friendly fire
-fetch-quest
-finisher
-farming
-ganking
-grinding
-HDR
-avatar, armoury, friends, officers, stats, score, help, setting, quick play, play online, play local
-general infantry, CQB specialist, classic pro pack, explosive specialist, scout sniper
-kills, damage, headshot, combat XP, skill XP, bonus XP, medals earned, damage dealt, longest shot
-hit box 
-I-frames
-invisible walls
-juggling
-kicking
-K/D ratio
-lobby
-load out, loot, mobs, mount 
-noob, OP, OHK, KO
-fire fighter -max speed, steering, handling, requires rank, weapons, machine gun, plate armour, 
               multiple target missile, missile lure, long range missile
-death match, survival, free for all
-control stick
-equipped, upgrade
-fire fighter -magazine size, fire rate, stability
-armour -durability, defence


Raspberry Pi:
-computer that fits in your palm of your hand costing just $5-$60
-best seller computers in world
-quite powerful quad core processor & upto 8 GB of ram
-great for building IOT prototypes, robots, security cameras, web servers
-GPIO (general purpose input output connector) for connecting other electrical devices
-wifi bluetooth module wirelessly connects to outside world
-audio jack for connecting speakers & headphones
-CSI connector for building for building you own custom camera
-micro SD slot (like hard drive that contains operating system required to interface with hardware) 
-noobs installer


[F-droid]
[infosys springboard]
[Hackereath, code chef, hacker rank, code force, smart India Hackathon]


Tox messaging CLI:
-secure and verifiable means of communication
-instant messaging protocol
-peer-to-peer: no central point of failure or interference
-no metadata: related to point 1, no third party can see who you are messaging, when or from where
-encrypted: content of messages are encrypted
-perfect forward secrecy: each message is encrypted with a separate key, so that decrypting one  
 message does not allow an attacker to decrypt your previous messages (this is an advantage over GPG 
 encryption)
-encryption/security of Tox is not as well tested as GPG
-install Orbot and TRIfA
-installing tox in tails OS


Llama:
-biggest LLM ever
-free & open source
-took months to train 16000 H100 GPUs costed 100s of million of dollar
-405 billion parameters model
-128K context length
-more parameters capture more complex patterns
-more parameter =! Better always
-training model is not open source
-only 300 lines of python code & fair scale library to distribute training across multiple GPUs


Super intelligence:
-invented convolutional neural network
-SSI (super safe intelligence)
-ASI (artificial super intelligence)


Classification of data:
-Classifying data is the process of organizing information into categories, making it easier to analyze and draw insights.
-Text classification is the process of organizing text-based data by classifying it into specific categories.
-Classifying emails as spam or movies into categories are examples of text classification. This process helps organizations classify and manage text-based data effectively.
-Multi-class classification organizes text into one of several distinct groups. For example, customer emails might be classified by topic, such as “order inquiry”, “technical support”, or “feedback”.
-multi-label classification, a single piece of text can belong to multiple categories simultaneously. For example, a movie on a streaming service can be labeled as both “action” and “adventure”
-binary classification, text is classified into one of two possible categories. For example, an email can be classified as either “spam” or “not spam”.
-By analyzing large amounts of data, generative AI sorts text with greater accuracy and consistency, making it ideal for large-scale classification tasks.
-Generative AI classifies text through a process which involves four steps: data ingestion, feature extraction using natural language processing (NLP), model training, and classification output.
-Data ingestion

The AI model begins by collecting and processing various text data, such as social media posts, emails, or customer feedback. Think of this as gathering all the information it needs to start analyzing.
-Feature extraction with NLP -model applies NLP to identify key features in the text, such as keywords, named entities, and sentiment indicators. This step helps the generative AI understand the meaning and context of the text.
-Model training -generative AI then trains on labeled data to learn patterns in the text. It learns to recognize specific features associated with each label, improving its accuracy when analyzing new text.
-the model uses the patterns it has learned to categorize the text. By classifying the text into categories, it makes the data easier to understand and analyze, providing useful insights based on identified patterns.

-time saving -Automated tools process data in seconds, leading to significant time savings. For LinkedIn, automated text classification quickly flags inappropriate profiles, without the need for manual reviews
-improved accuracy -Automation reduces human error, ensuring more reliable results. LinkedIn’s curated training data improves accuracy, limiting false positives when identifying inappropriate content
-scalability -Automation enables scalability by allowing businesses to handle large datasets effortlessly. It means LinkedIn can efficiently manage millions of profiles, even as its platform continues to expand.
-product review -Automated classification helps businesses analyze thousands of reviews to find patterns in customer satisfaction or dissatisfaction.
-customer support -By classifying support tickets by importance or topic, automation helps speed up response times and use resources better.
-social media monitoring -Automation tracks how people feel about a brand on different platforms, helping companies react quickly to changes in public opinion.
-speed -Generative AI categorizes vast amounts of text in seconds, speeding up the process over manual methods.
-scalability -When processing hundreds of millions of text entries, generative AI adapts seamlessly to any data volume, offering excellent scalability.
-consistency -By eliminating human error, generative AI ensures reliable and consistent results across all classifications.
-text classification challenges -Ambiguous language
Language is tricky because some words have different meanings depending on the context. For example, the word “bank” can mean a financial institution or the side of a river.

Generative AI solves this by finding patterns in large sets of data. It understands the meaning of words with multiple meanings by looking at the surrounding text.
-Tone and sentiment variability
Words carry different levels of intensity or meaning depending on the person. These variations in tone can be a challenge for accurate classification. For example, one person’s “great” might mean “okay” to someone else.

Generative AI adjusts to these changes by analyzing small details in the text. This helps it capture the right sentiment, even when people express themselves in different ways.
-Inconsistent data structure
Text data is often not the same in structure, style, and vocabulary. For example, one review might say, “Service was fantastic”, whereas another says, “Service was decent”.

Both reviews talk about the same thing but use different words and structures.

Generative AI adjusts to various formats by learning from many different text examples. This helps reduce the impact of inconsistencies and ensures a reliable classification process.
-

Granite models for text classification:
-2 specialised models 
-Granite-13b-chat-v2 -This model is a flexible, general-purpose model designed for efficient and consistent classification across a wide range of tasks.
    -granite-13b-chat-v2 model is versatile, making it suitable for a wide range of general-purpose text classification tasks across different workflows.
    -provides consistent and dependable output, making it highly reliable for straightforward classification needs.
    -model is designed to handle simple workflows efficiently, offering a cost effective solution for projects with minimal customization needs.
-Granite-13b-instruct-v2
This model is optimised for instruction-based classification, excelling in tasks that require nuanced understanding and contextual depth.
   -delivers precision in text classification, ensuring accurate and reliable results for detailed tasks.
   -model excels in understanding context, adapting to nuanced prompts and layered text for accurate outputs.
   -model is designed for efficiency, handling specialized and complex workflows without unnecessary delays.
   -model follows instructions effectively, enabling customized and context-specific responses for specialized tasks.
-data type -If the customer messages are clear, simple, and well-organized, the granite-13b-chat-v2 model works well. It handles short, routine messages efficiently and is good for general-purpose workflows, such as classifying messages into categories such as “order issues”, “product inquiries”, and "returns”.

However, if the messages are complex or require detailed instructions, the granite-13b-instruct-v2 model is a better choice. It is designed to understand complex situations and handle domain-specific or technical content, making it suitable for messages that need a deeper understanding or cover multiple topics.
-Complexity of classification
For simple broad categories, granite-13b-chat-v2 works well. It handles general classification tasks where there’s no need for deep context, making it good for classifying customer messages into clear, predefined groups.

For more detailed or complex classifications, granite-13b-instruct-v2 is a better choice. It’s suited for tasks that need careful attention to specific details, such as when customer messages involve multiple issues or require a more precise response.
-granite-8b-japanese
-granite-20b-multilingual 
-Define project goals and constraints -Clarify what your project needs. Is it general categorization, such as grouping emails by topic, or nuanced classification, such as analyzing detailed customer feedback? Knowing your goals will guide whether a general-purpose or precision-focused model is better.
-Assess time and cost efficiency -Determine how much time and computational resources your project allows. The granite-13b-chat-v2 model is cost effective and efficient for straightforward tasks, whereas the granite-13b-instruct-v2 model offers greater accuracy but might require more resources. Balance your project’s needs with its constraints.
-Consider future scalability -Think about whether your project’s requirements will change over time. The granite-13b-instruct-v2 model is more adaptable to evolving classification needs, making it ideal for dynamic workflows or expanding datasets.



-prompting -prompt provides input to an AI model to guide its response
           -Your prompt should clearly state the task and expectations. Avoid vague or ambiguous language, and use simple, direct sentences to eliminate confusion.

Ineffective prompt: “Classify this text.”

Effective prompt: “Classify this customer review as either Positive or Negative. Your response should include only the classification label.”
           -Provide the model with enough background information to understand the task. Include any necessary instructions, guidelines, or categories relevant to your specific use case.

Ineffective prompt: “Summarize this email.”

Effective prompt: “Summarize this email into two sentences, focusing on the main action items discussed.”
           -Whenever possible, include examples to guide the model. Examples demonstrate what you expect and help the model understand your intent.

Ineffective prompt: “Classify this text as either formal or casual.”

Effective prompt:

“Classify this text as either ‘Formal’ or ‘Casual’, as shown in the following examples.

Example text 1: ‘Hi, are you free to grab a coffee later?’

Example output 1: Casual

Example text 2: ‘I hope this email finds you well. I wanted to discuss our upcoming project.’

Example output 2: Formal”
-task -Classify the email as “Issue” or “No Issue” and determine whether it needs escalation.
-input text -“Please verify the account status and escalate it to support if there’s an issue.”
-original prompt -Classify the email as Issue or No Issue and decide if it should be escalated
-Modified prompts
Step 1: “Classify the email as Issue or No Issue.”

Step 2: “For emails classified as Issue, determine if they require escalation. Respond with Yes or No.”
-IBM watsonx™ Prompt Lab is a tool in IBM watsonx.ai(opens in a new tab) that helps users design, test, and refine prompts for foundation models to improve their performance.
-


Text to speech:
-TTS
-technology is mainly based on natural language processing (NLP) techniques. NLP is a field of artificial intelligence (AI) that focuses on the interaction between computers and people through natural language. It aims to enable computers to understand, interpret, and generate human language in a meaningful and useful way.
-Imagine you come across an article in an online magazine about the life of the Dutch post-impressionist painter, Vincent Van Gogh. You want to listen to the article while doing something else like cooking or watering the plants. You instruct your voice-enabled assistant, “Siri, play the article on Van Gogh from the latest issue of Brushes and Strokes magazine”. You wish to get immersed in Van Gogh’s story. But robotic, monotonous voice output spoils the experience. 

-machine learning -
-Machine learning means teaching AI-based systems to learn from large amounts of data. It helps the systems to recognize patterns and make predictions on their own. 



When used with NLP, machine learning techniques train a TTS system using several hours of recorded human speech and corresponding text. That’s why TTS can analyze the input text to understand its structure and meaning. This includes recognizing words, punctuation, and context, which influences how the text should be spoken.



For example, in the Van Gogh article, the system learns how to pronounce the Dutch name or how to pronounce words differently based on context like “read” in “Vincent read Theo’s letter.” versus “Vincent promised Theo that he would read the letter.”).



Machine learning also adds rhythm, stress, and intonation to the speech. This makes digital voice sound more natural and expressive, much like human voice, and so more engaging.



For example, saying “I can’t wait to see you!” needs an excited tone. “Are you coming?” with a rising intonation at the end indicates a question.

-text processing -
-Text processing includes breaking down text into smaller parts like sentences and words and fixing spelling mistakes. It also includes making sure the text looks consistent by using a single case (like all lowercase or all uppercase), removing extra spaces, and correcting common punctuation errors. This helps the TTS system understand and process the text more effectively.



For example, if you type “Hello, world! How are you?” the system separates it into “Hello, world!” and “How are you?”.

Customisation & personalisation -
-How would you feel if you could choose the preferred voice to read aloud the van Gogh article? Connected right? 



All TTS systems allow users to set their preferences by selecting different voices, adjusting speaking rates, and changing speech styles. This customization makes the experience more engaging and user-friendly. 



This feature helps businesses particularly, as their text to speech bot is also their company’s brand ambassador. A women’s clothing brand from the US may choose a classy female voice or a chirpy female voice based on its products and target audience. Similarly, it can use a Spanish voice for its chain of stores in Spain.
-

-Integration and API
The TTS system can be integrated with various applications through Application Programming Interfaces (APIs). This allows developers to add text to speech functionality to mobile apps, websites, and other digital platforms.



For example, Joshua is a high school student. He needs assistance in reading books. He uses a TTS tool that is available as a mobile app on his smartphone and as a plug-in on his home computer.

-Feedback and improvement
Consider this scenario. Users of a recipe blog website reported that certain words related to ingredients are mispronounced in the digital voice output, leading to confusion and disengagement. To address this feedback, developers updated the phonetic database of the website.



Such feedback helps businesses to identify areas for improvement in their TTS system and keep their customers engaged and satisfied.

IBM Watson® Text to Speech is a cloud-based service that provides natural-sounding digital voice output from the provided text. 

This service provides two types of voices: 

Enhanced neural voices offer a high degree of natural-sounding speech and support most service features. 

Expressive neural voices offer clear and crisp natural-sounding speech. These voices:

Have natural and conversational pronunciation and inflections 
Generate speech with extremely smooth transitions between words
Support the use of additional features that are not available with enhanced neural voices

-The service can generate voice in different languages and dialects including:
Dutch
English (Australia, UK, USA)
French (Canada, France)
German
Italian
Japanese
Korean
Portuguese (Brazilian)
Spanish (Castilian, Latin American, North American)
-The service can produce voice in a variety of audio formats including: 
A-law
Basic audio
Free Lossless Audio Codec (FLAC)
Linear 16-bit Pulse-Code Modulation (PCM)
MP3 (or MPEG)
Mu-law (or u-law)
Ogg or Web Media (WebM) audio with the Opus or Vorbis codec
Waveform Audio File Format (WAV)
The service offers male and female voices. 
-

-What is an API key? 

An API key is a unique code. It’s like a special password that gives you access to use certain features or services in an app or website. 

For example, if you want to get the latest weather information from a weather service, you need an API key to access their data. This key tells the service that you have permission to use their information.
-What is URL?

A URL (Uniform Resource Locator) is like the address of a house on the internet. Just as one would use a street address to find and visit a specific home, a URL helps you locate and access a specific webpage or online resource. 

Each part of the URL serves a purpose, similar to how a street address includes a street name, house number, city, and zip code, guiding you precisely to your desired destination.
-The most common issues text to speech system users experience are related to voice naturalness and quality. 



The first example, which has a male voice, has a natural and conversational tone. It pauses at the correct spots and has an expressive tone. On the other hand, the second example with the female voice seems mechanical and has a monotone quality. Its pitch is high which may lead to disengagement of listeners. There is less variation in emotion, which can make it sound less natural and more artificial.



Here is an overview of the most common issues related to the text to speech output.



Robotic sound



The digital voice output may sound robotic or monotonous, lacking the natural intonation and rhythm of human speech. Such output does not engage the listeners. Expressive neural voices provide natural and conversational voice output. 



Prosody issues

 

Prosody involves the rhythm, stress, and intonation of speech. Inconsistent prosody can make the speech sound unnatural. Also, incorrect placement or length of pauses can affect the flow and comprehension of the speech.



Addressing the text to speech system-related issues needs ongoing research and improvement in the technology. Developers must pay attention to user feedback and accordingly create new features or update existing ones.
-


Data fundamentals:
-


Large language model:
-LLMs are subset of deep learning
-large general purpose language model that can be pre trained & then fine tuned for specific purpose
-trained to solve common language problems like text classification, question answering, document 
 summarisation, text generation
-large training datasets
-large number of parameters
-general purpose -commonality of human language
                 -resource allocation
-pre-trained & fine tuned 
-language translation, sentence completion, text classification, question answering
-required minimal field training data when tailored them solve specific problem
-obtain decent performance even with little domain training data
-based on transformer model -encoder & decoder 
-LLM using pre-trained APIs -no ML expertise needed, no training examples, no need to train model, 
                             think about prompt design
-natural language process (NLP) 
-QA (question answering) -subfield of natural language processing that deals with task of 
                          automatically answering questions posed in natural language
-QA systems able to answer wide range of questions including factual definition & opinion based 
 questing, require domain knowledge
-prompt design -process of creating prompt thats tailored to specific task that system being asked 
 to perform
-prompt engineering -clear, concise & informative
                    -process of creating prompt thats designed to improve performance
-


Machine learning:
-AI -effort to automate intellectual tasks normally performed by humans
    -earlier -predefined rules humans come up with -----> execute those rules
    -can be simple & complex both
    -packman (path finding algorithm)
    -


-twitter card validator


IOT:
-internet of things
-farmers can put sensors on their crops that tell them when to water, how much water is needed, and when to harvest
-


CCNA foundation:
-computer network -


OBS:
-streaming -optimise for live streaming (twitch, youtube)
-recording -optimise for recording only (high-quality videos)
-virtual camera -using OBS as webcam source (zoom, discord)
-user interface -scenes -collections of visual/audio elements
                -sources -everything you add —webcam, images, screen capture, text
                -audio mixer -adjust audio levels for each source (desktop audio, mic)
                -controls -start/ stop streaming/recording, virtual camera, settings
                -preview -see setup before going live
-creating your first scene -add scene
                           -click + in scenes panel
                           -name it ("Gameplay," "Facecam," "Intro")
                           -add sources -display capture -records your whole screen
                                        -window capture -captures specific app (like game or browser)
                                        -video capture device -for webcams or capture cards
                                        -image -add logos, overlays, backgrounds
                                        -text (GDI+) -add text for labels or titles
-audio setup -audio inputs -desktop audio -captures system sounds (games, youtube)
                           -Mic/Aux -captures your microphone
             -adjust audio levels -use sliders in audio mixer to balance volumes
                                  -click next to each input for filters (Noise Gate, Compressor)
             -advanced audio settings -click advanced audio properties
                                      -monitor only -hear sound but not record it
                                      -monitor & output -hear & record sound
-scenes & transitions -switching b/w scenes
                      -create multiple scenes (Intro, Gameplay, Break Screen)
                      -hotkey toggle (set in settings ----> hotkeys)
                      -click scene transitions ---> + ---> add
                      -fade -smoothly blends scenes
                      -cut -instant switch
                      -stinger -use custom animations for transitions
-streaming setup -settings ---> stream
                 -service -choose platform (Twitch, YouTube)
                 -stream key -copy from your streaming platform & paste here
                 -output settings (streaming)
                 -settings ---> Output
                 -encoder: NVIDIA NVENC (if available) or x264
                 -bitrate -1080p at 60fps -6000 Kbps
                          -720p at 30fps -2500 Kbps
                 -rate control -CBR (constant bitrate)
                 -test stream
                 -click start streaming —check your stream health in OBS & platform's dashboard
-recording setup -settings ---> Output
                 -output mode -advanced
                 -recording path -choose folder for saving videos
                 -recording format -MP4 or MKV (MKV prevents data loss if OBS crashes)
                 -encoder -hardware (NVENC) for GPU encoding (better for gaming)
                          -software (x264) for CPU encoding
-overlays & customisation -add overlays
                          -use image source for adding overlays (frames, borders)
                          -drag & resize them directly in preview window
                          -browser source
                          -add alerts (followers, donations) using platforms like streamlabs or 
                           streamelements
                          -copy widget URL & paste it in browser source
-hotkeys & automation -go to settings ---> hotkeys
                      -assign keys for starting/stopping stream, switching scenes, muting audio
                      -F1 -start streaming
                      -F2 -switch to "Gameplay" scene
                      -F3 -mute mic
-advanced features -virtual camera
                   -allows to use OBS as webcam in apps like Zoom or Discord
                   -hit start virtual camera & select OBS virtual camera in your app
                   -right-click any source ---> filters
                   -chroma Key -green screen effect
                   -colour correction -adjust brightness, contrast, hue
                   -noise suppression: Reduce background noise from your mic
-troubleshooting & optimisation -reduce lag 
                                -lower output resolution (settings -> video -> output Resolution)
                                -reduce FPS (30fps instead of 60fps)
                                -change encoder from x264 to NVENC if using NVIDIA GPU
                                -audio sync issues -go to advanced audio properties ----> sync offset 
                                 (in milliseconds)
                                -test by clapping once —adjust until synced


Programming language for GPUs:
-parallel computing super power
-one wrong node leads to disaster
-no need to know about cuda, locks, mutex & regex to  
-python code runs on single thread
-modern CPUs has clock time of 4GHz (for handling 1 instruction per cycle --> only able to perform 4 
 billion instruction/seconds)
-modifying your python code to take advantage of multiple threads
-interaction combinators
-bend -feels like python but scales like Cuda
-uses rust interpreter to run 
-.bend extension & run (bend run app.bend)
-does not have loops but have folds (allows you to consume recursive datatype in parallel by list or 
 tree)
-using all threads of CPU (bend run-c app.bend)


Linux got wrecked by backdoor attack:
-cyber attack affecting XZ compression tool was shipped to production
-compromised linux distro debian, fedora, open suse
-backdoor attack
-XZ util is tool for compressing & decompressing (Ziv Karloff chain algorithm & Lzma contains)
-SSHD (secure shell domain) that listens to SSH connection
-malicious code is not present in source code
-injecting pre-built object disguise as test file


Mind behind linux:
-most boring office is best & sitting their quietly is important
-working alone can be extremely productive
-sometimes you just make projects to show off
-comments & feedback on your code is important
-CVS
-coding something meaningful
-coding can be money making machine
-good code vs bad code


AI from scratch:
-using keyboard for controls is not ideal
-camera sensors, basic image processing, blue rust bands, path finding, controls
-Proximity Sensor -all sensors that perform non-contact detection in comparison to sensors, such as 	
		  limit switches that detect objects by physically contacting them
                  -convert information on movement or presence of object into electrical signal


Machine learnings:
-algorithm analysis data -makes predictions on that
-function f(x,y) (x --> y)
-


Neural Networks can learn (almost) anything:
-


Choice of data structures in coding:
-array -need constant-time access to elements
       -number of elements is known & fixed
       -Insertion & deletion operations are not frequent
-linked list -need efficient insertion & deletion at both ends or in middle
	     -size of data set is dynamic
	     -Implementing a queue or stack
-stack -need to manage elements in Last-In-First-Out (LIFO) manner
       -undo functionality in text editors
-queue -need to manage elements in First-In-First-Out (FIFO) manner
       -task scheduling, breadth-first search (BFS) in graphs
-hash table/dictionary -You need fast access, insertion, and deletion based on a key
		       -Implementing a cache, counting occurrences of elements
-tree -binary Search Tree (BST) -You need to maintain a sorted list with efficient insertion, 	
                                 deletion, and lookup
			       -Implementing a set or a map with sorted keys
      -AVL Tree / Red-Black Tree -need a self-balancing tree to ensure O(log n) operations
				-Ordered collections with frequent insertions and deletions
-Heap/Priority Queue -you need to efficiently find and remove the smallest or largest element.
		    -implementing a scheduler, Dijkstra's algorithm.
-Graph -You need to represent and traverse complex relationships between entities.
       -Social networks, road maps, dependency graphs.
-Set -You need to store unique elements & support fast membership testing
     -Removing duplicates from a list, membership checking
-Trie -You need to efficiently store & search strings, especially prefixes
      -Implementing an auto-complete feature
-Matrix -You need to represent & manipulate two-dimensional data
       -Image processing, game boards
-Deque (Double-Ended Queue) -You need to efficiently insert & remove elements from both ends
			  -Implementing sliding window algorithm


Configuration files used in git (version control system):
-.gitignore -file specifies which files & directories should be ignored by Git
	    -these files will not be tracked, committed, or pushed to repository 
	    -particularly useful for excluding temporary files, build artefacts, sensitive 	
	     information or other files that are not meant to share with others
-.gitattributes -defines attributes for paths in your repository
	        -control variety of aspects, such as end-of-line normalisation, diff 	
                 settings & custom merge drivers
		-ensure consistent handling of files across different environments & tools
		-specifying custom diff tools or settings for specific file types
		-certain files as binary Git does not attempt to perform text diff
-git add .gitignore .gitattributes
-git commit -m "Add .gitignore and .gitattributes"


Good code vs bad code:
-readability -expressive (how understandable your intent of code it ?)
	     -conciseness (how much code is actually is to understand)
-testability
-correctness 
-maintainability 
-good code:
	-makes sense to another program or your future self after 6 months
	-statement, methods & object has single responsibility
	-easy to add a test for bug & barely asking for help or involve other devs
	-clearly defines all the data it works with: inputs, outputs, classes, data structures,
	 json models, xml schemas
	-explain odd design decisions, implementation quirks, or the rationale behind clever
	 solutions
	-choice in data structures is good
-bad code:
	-lots of comments
	-unnecessary details in method names
	-method with multiple tasks to perform 
	-unnecessary method arguments 
	-unnecessary over-loading
	-method documentation in method name 
	-uncalled-for return types 
	-meaningless names
	-long methods
	-code is hard to write unit test for
	-code doesn’t have unit test
	-code tightly coupled to other code
	-code that isn’t Solid
	-unreadable code
	-bad code has correct logic, but without comments leaves reader guessing at meaning
	-bad code is inflexible & not designed to accommodate changes or additions easily
	-repeated chunks of code instead of reusing common logic
	-security vulnerabilities due to poor input validation, lack of encryption, security best 	
         practices
	-data and context are implicit and never properly documented anywhere
	-inefficient & suboptimal algorithms or data structures that result in poor performance


Black arch vs kali linux:
-Kali linux  -User-Friendly interface
	     -polished and intuitive interface, making it accessible for beginners & experienced 
	      users alike
	     -includes default set of pre-configured tools, reducing setup time
	     -extensive documentation & community support
	     -numerous tutorials, guides & forums are available for help
	     -over 600 pre-installed penetration testing tools, carefully selected to cover wide 
	      range of security tasks
	     -Tools are tested & maintained by Kali team, ensuring they work well with system
	     -While comprehensive, toolset is not as extensive as BlackArch
	     -resource-heavy, particularly on older or less powerful hardware
	     -operates in non-root user mode by default & require additional configuration
	      for certain advanced tasks
-Black arch  -vast repository of over 2,500 security tools wide range of cybersecurity needs
	     -regularly updated with new tools, providing access to cutting-edge utilities
	     -provides a high degree of customisation Users can build their system from ground up
 	     -ensuring that users always have access to latest software
	     -suitable for advanced users who require more customisable & flexible penetration
	      testing environment
	     -offers access to Arch User Repository (AUR), allows users to install wide range of
	      additional packages
	     -lightweight and fast


Scala:
-high level statically typed programming language
-famous for using object oriented & functional programming paradigms together in cool & concise 
 syntax
-large scale analytics engine apache spark, X, linkedIn, ADAM
-one of many JVM languages --> converted t bite code and run to java virtual machine
-can interact Wirth java & use java libraries
-does not has java boiler plate
-result is concise, expressive & safe
-provides features like high order functions, null safety, pattern matching, algebra data types that  
 reduces amount of pain of java developer
-.sbt & .scala extension & scala compiler installation


Mac or linux:
-install free Xcode package for OS X & use home-brew to install any other linux tools 
-open up terminal & go to town then no separate linux install needed
-command line with iTerm2 & zsh
-install Nerd Fonts, ohmyzsh, & powerline9k
-home brew (for package management) & tmux
-UNIX system like BSD & solaris
-macOS is Posix compliant & linux Commands are also posix
-X windows applications, X server is needed, XQuartz


Intel chips:
-clock speed, number of cores of threads, transistors count, cash size
-failure rate
-everything is pointless if chip is unstable
-high default clock rates & power usage could be leading to silicon degradation & instability
-under clock CPUs at lower voltage shortly
-motherboard manufactures 
-weak under clock settings 


Code to go viral on social media:
-creating satisfying ball simulations & animations
-if object falls, accelerate cause gravity, if more time falling more fast
-sound & colour is important
-maximising retention
-ball, maze, sorting algorithm videos
-focus on gaining followers, subscribers, views, likes, comments, hearts, etc


Pygame python:
-library dedicated to video game development
-built on top of Simple DirectMedia Layer (SDL)
-facilitates interface & management of input devices (keyboard, mouse, joystick) & output devices (screen, speaker)
-instead of writing game engine in Python from scratch, if has pre-coded functions
-pygame Subset for Android to run on android smartphone
-highly active community
-python package index (PyPi) & GUI libraries
-pyglet is another Python library for game development (cross-platform multimedia library used for creating visually rich games & other applications)


Vim:
-vim is more efficient than normal IDE & has autocomplete features like IDEs
-text editor for writing code when you navigate around screen with keyboard instead of mouse
-your fingers should be glued to keyboard all time
-IDEs are very bloated & specific
-vim works in modes
-vi client.c (opens up client.c file)
-: (to give commands)
-:q (to exit)
-:q! (Quit & dismiss all changes)
-i (insert mode)
-esc (to escape)
-:w (write mode)
-:wq (write & write)
-shift+i (goes to 1st line)
-shift+a (goes to end of line)
-:set number
-5->, 4^, 3<- (going up, down, right, left)
-vi ~/vimrc
-u after esc (undo)
-v (visual mode) -> (selecting)
		-d (deletion)
		-y (copying)
		-p (pasting)
		-dd (deletes whole line) 
		-cc (changes line)
		-diw (delete in word)
		-dw
-Neovim -x (exiting pluggins)
        -PlugInstall 
	-PlugClean
-powerline font symbols


Zed:
-cmd + p (command palette)
-cmd + shift + p (go to file)
-cmd + click (go to definition)
-cmd + l (go to line)
-cmd + backspace (delete line)
-cmd + c (copy line)
-cmd + x (cut line)
-cmd + / (comment/uncomment line)
-alt + up/down (arrow move line up/down)
-ctrl + shift + E (move focus to file explorer)
-ctrl + ~ (move b/w editor & terminal)
-ctrl + Tab (navigate through open file tabs)
-cmd + l (select line)
-cmd + d (select word)
-cmd + \ (split editor)
-cmd + 1/2/3... (focus next split)
-cmd + w (close split)
-cmd + ctrl + f / F11 (toggle full screen)
-cmd + f (find)
-cmd + r (replace)
-cmd + shift + r (replace all)
-cmd + j (toggle terminal)
-cmd + , (open settings)
-cmd + shift + x (show extensions)
-cmd + n (new file)
-cmd + s (save file)
-cmd + alt + s (save all files)
-cmd + w (close file)
-cmd + shift + w / (close all files)
-cmd + b (toggle between file explorer)


React JS:
-virtual DOM -
-react web components allows to take lines from html & take component of our own
-reusing components to other pages
-maintained by Facebook 
-reactDOM & JSX -


Hosting website with old laptop:
-any computer can host a website
-difficulties -laptop must have static public IP address
              -most residential internet connection doesn’t have public IPv4 address
              -Jio provide public IPv6 address but keeps changing frequently, can’t relay unless using 
               some dynamic DNS
              -need dedicated commercial grade internet connection for web hosting
              -If don’t have public IP --> ISP need to forward TCP port 80 & 443 to your private IP
               (which they doesn’t do)
              -even high speed internet connections have low upload speed
              -website will suffer performance issues
              -laptop needs to be 24x7 on
              -ISP allow incoming connections even if it has dedicated IP address 
              -your ISP may block un-established incoming connections for security reason
              -consume lot of electricity & laptop needs cooling system
-process -get Jio connection & JioFy device
         -connect laptop with jiofy, get public IP
         -point your domain, test sub-domain towards laptops public IPv6 by crating ‘AAAA’ record in 
          DNS zone
         -linux in laptop install nginx
         -start nginx server
         -windows, easier to turn on IES server
         -browse your domain, get nginx/ IES home page
         -put contents in nginx home directory


long term hosting:
-unlimited bandwidth & continuous internet supply
-computer awaken 24 hours 
-college won't allow to do port forwarding by giving routers admin password
-port forwarding is important to redirect your traffic to PC


Turning old PC is your new server:
-hosting your own media server
-big servers in big data centres runs with redundant power supply & ECC memory (may prefer slower core rather than fast ones) (lack in consumer IO like tons of USB audio)
-serving 100s & thousands of clients
-factory reset PC 
-Plex media servers & pulse way to manage our system remotely
-running remote torrenting box, ad blocking server 
-managing your files remotely
-drive set up LLT simple server
-network share by copying link
-network, file, printing sharing turned on
-without exposing our IP to net


Home server monitoring setup:
-Prometheus & InfluxDB (databases)
-exporting tools 
-


Traditional centralised downloading:
-central web server ----------> multiple downloaders
-slow, single point failure
-high bandwidth usage for server


Decentralised peer to peer downloading:
-multiple servers & downloaders connected to each other
-fast, no single point failure
-all downloaders are also uploaders


Linux 100+ things to know:
-superior free open source operating system but only has 4% share of PC market
-most dominant os on servers
-if you can't SSH into linux terminal & fix it (you are done for)
-open source OS licensed under GPL 2.0
-linux is Operating system kernel
-boot-loader loads linux into random access memory (detects hardware & starts init system)
-sets up application in user space which brings user to login screen
-allocates & deallocates memory for processor & create virtual memory to use more memory than  
 physically available by tapping into hard drive
-virtual file system (ext4)
-kernel also interact with driver
-surrounded by CPUs protection at ring 0
-standard library for C & use all kinds of rappers for making system call (unistd.h)
-GNU -project that predates linux kernel itself & provides all core utilities for linux
-


CLI tools for terminal:
-gping  
-nvim
-vim
-bandwhich
-wtfutil
-tmux
-ping site_name
-yazi
-tree
-neofetch
-surge
-lazydocker 
-loadtest
-termchat
-vm_stat   
-gtop
-fzf
-jq
-glances
-wttr
-htop
-vtop
-duf
-cmus
-bashupload
-katoolin
-speedtest-cli
-lazygit
-kdash
-httpie
-taskwarrior
-tcpdump
-Rsync 
-ntop 
-tcpdump 
-netstat
-dua
-git 
-nmap 
-curl 
-man 
-less
-ssh
-mosh
-wget
-scli
-httrack
-iostat
-df -h     
-du -sh /path/to/directory
-traceroute google.com     
-tail -f /var/log/system.log
-grep "error" /var/log/system.log
-log show --predicate 'eventMessage contains "error"' --info
-networksetup -getinfo "Wi-Fi"
-networksetup -listallnetworkservices
-networksetup -setmanual "Wi-Fi" 192.168.1.100 255.255.255.0 192.168.1.1
-sed
-find
-awk
-loadtest
-pycryptodome
-links
-iftop
-netstat
-nethogs
-tldr
-dust
-exa, find-fd, gitui, delta diff, ack
-s-tui
-Zathura
-ls, cat, mv, cp, less, xargs
-Lakshmi
-Ncspot, khal, neovim, ranger,
-neomutt for mail
-newsboat for rss
-lolcat
-nethack
-myrepos
-visidata
-mpv
-sfeed
-bsdtar
-coreutils, vim, GnuCompilerCollection, binutils, csmith, various foss transpilers, cordless, tuir, 
 mingw, adb, fastboot, metasploit and friends
-nmail


[wrap]
[Tiptop]
[thispersondoesnotexist.com]
[windows subsystem]
[wire-framing]


Apple intelligence:
-resources to train large language models
-on-device foundations model
-sharing data with open AI remotely
-these private cloud will be audited by 3rd party to ensure your private data is not leaking somewhere


Machine learning algorithm form scratch:
-without relying on external libraries (TensorFlow, karas, scikit learn)
-classification: 
	-K-nearest neighbours (KNN) -classifies data points based on majority class of their k- 
         nearest neighbours in feature space
	-logistic regression -binary classification algorithm that models probability of data point   
         belonging to particular class using logistic function
	-naive bayes -probabilistic classifier based on Bayes's theorem with assumption of   
         independence between features
-regression:
	-linear regression -used for predicting continuous numerical values by fitting linear 
         relationship between input features & target variable
-clustering:
	-K-means clustering -unsupervised clustering algorithm that partitions data points into 'k'
         clusters based on their similarity in feature space 
-neural Networks:
	-perceptron -basic neural network unit that learns to classify inputs into two categories 
         using weighted sum & threshold activation function
	-neural network -implementation represents simple feedforward neural network with  
         customisable architecture, including multiple layers & activation functions


Try 3 different file System APIs in Node.js:
-most common thing to do on server side application is read & write o file system
-


Building streaming AI chat app:
-AI SDK an open source tool that makes it easy to build apps with large language model like GPT4 & others & handles text streaming on server allowing to creating typing effect
-Next.js under hood
-


PyTorch:
-open source deep learning framework used to build some most famous artificial intelligence product
-made in Facebook research lab
-Lua based torch library
-programming with tensors that are just multidimensional array that represent data & parameters in  
 deep neural network
-training machine learning models with just few lines of python
-facilitates high performance parallel computing on GPU 
-developers love prototyping with it as it supports dynamic computational graph allowing models to 
 optimised at runtime (it does this by constructing directed acyclic graph consisting of functions 
 that keep track of all executed operations on tensors allowing us to change shape, size & 
 operations 
-train models for computer vision AI like Tesla autopilot 
-image generators like stable diffusion & speech recognition model like AI whisper
-image classifier


Stay anonymous while hacking:
-hiding your identity is important while hacking
-configuring proxy chains on linux system -change your public IP address 
					-sudo apt install tor proxy chains
-locate proxychains
-nano /etc/proxychains4.conf
-edit file & exit by ctrl + x
-sudo service tor start (start tor)
-sudo service tor status (Check Tor Services)
-proxychains firefox
-proxychains commands
-visit [DNS leak test]
-whoami tool -sudo apt update && sudo apt install tar tor curl python3 python3-scapy network
 manager
-git clone https://github.com/omer-dogan/kali-wh...
-cd whoami-project
-ls
-sudo make install
-kali-whoami --start ( To launch Tool )
-kali-whoami --help ( To view Help )


Make multiBoot pen-drive using kali linux:
-storing more than 1 operating system in single pen drive
-ventoy
-cd downloads
-ls
-tar -xzvf File Name
-ls
-cd ventoy version
-ls
-./ventoyGUI.x86_64


Turning old PC/Laptop into media server:
-installing Ubuntu server edition
-burning disk image of Ubuntu server editor
-Popsicle or etcher (USB flashing tool)
-gnome disk or kde partition manager
-Thinkpad doc (handy for plugging any external hard drives)
-use internet core to do that
-using direct wire connections is much better than having wifi
-f12 to get into boot manager
-SHH into server --> entering local IP address to your machine
-install & enable PLEX


Java:
-building API servers with spring boot & spring framework
-swing & JavaFX for desktop applications
-list, set, queue, hashmap
-Collections (much more than just hash maps)
-stream API
-lambda expressions & functional interfaces
-date & time API
-working with files
-multithreading


-awk
-sed
-grep
-exa
-script sort bc
-nohuplc
-find + xargs
-bat btop Htop glances ranger spotdl Thefuck Lolcat Calc Cal
-miniserve
-ag
-ripgrep
-ed editor
-ss (killing sockets found)
-vifm, vidir, gron, elvish
-pecoa
-tldr
-lsdge
-ranger
-visidata
-atool wrapper for slew of compression/archivers (tar, gzip, zip, rar, rpm, deb, bzip, bzip2, lzip, 
 xz, 7zip) 
-bottom
-magic wormhole exchange file easily between two devices by using external open proxy with simple &  
 robust authentication & encryption
-vidir & others in moreutils
-up
-stow -symlink farming handy for managing your dot-files among other things
-paste & join merge lines of files display lists side-by-side in multiple columns
-expect -glue for interacting with CLI utilities that prompt user for input automates what human 
         would do
-pcregrep -for those rare cases where grep -P isn't fully perl compatible
-pandoc -swiss army knife for converting text files
-pigz - multi-threaded file compression for those times when gzip won't cut it
-zcat, zless, zgrep -same as their counterparts but for compressed files
-basename - strip directory and suffix from filenames
-pssh - Parallel SSH. Ever need to do the same thing on multiple hosts over SSH?
-Qalculate
-groff
-tmsu - it's a format-agnostic tagger. It keeps its own separate database to keep track of files and 
        their tags.
-xpe - a commandline xpath parser. xpaths are better than css queries for getting at specific html elements in the DOM. Compared to other parsers, this one is easier to use, and supports html.
-moreutils - a bunch of unique, interesting utilities
-mcfly - makes searching your shell history faster and easier
-soundmeter - makes it possible to measure sound levels on the cli.
-tig
-gh
-fd
-httm is a CLI tool for viewing snapshot file versions on ZFS and btrfs datasets
-advdef - losslessly recompress .gz and .png files, often reduces size by 10—40%-
-advzip - same as above, but for .zip files
-hexedit - view and edit the bytes of a binary file
-magick - create, edit, compose, and convert images on the command line
-pandoc - convert between Markdown, HTML, LaTeX, .docx, PDF, ...
-potrace - transforms a binary image into a smooth, scalable vector graphic
-sox - Swiss army knife of sound processing: convert file formats, change sample rate, apply various effects
-wttr.in check the weather on the command line, with ASCII art display
-lnav
a log file navigator, which I find extremely useful when looking at logs from many sources, such as aggregated from pods across machines in a Kubernetes cluster, or from different components of an app along the same timeline
-fc
-batch
-ionice / nice
-cut / tr
-tree
-uniq
-stty
-dd
-croc
-Lsof
-Chroot
-Nmap
-Tcpdump
-Netcat
-Iptables
-Grep
-mdlt
-wopr


[https://github.com/life4/enc]


Doom Emacs:
-with org mode(notes), magit (git client), dired( file manager) & LSPs for many languages, works fabulously (both GUI & TUI versions)
-IDEs differ from text editor as they allow to integrate framework to build software & test it, as well as integrating language servers & package definitions for language at hand
-editor pane with tabs, file navigator sidebar, multiple terminals at bottom
-SSHing into multiple machines to work in vim can be complicated


[Digital Attack Map]
[Kaspersky Cyberthreat Map]
[FireEye Threat Map]
[Check Point ThreatCloud]


Oldest text editor:
-ed command
-1960s (getting information out of computer was just to print it on paper) (teleprinters)
-ls /dev/tty"
-pre-installed in most linux distributions
-raspberry pie performing serial communication
-tx & rx pins


SSH:
-provides secure & encrypted way to remote access & mange servers network devices & computer systems
-uses public key cryptography to authenticate user & encrypt data being transmitted --> making it more 
 secure than traditional remote login protocols --> allows secure file transfer using SCP (secure copy)
-used in UNIX base OS 
-secure shell used to logging into to remote server, linux or BSD servers
-works on windows as well
-2 servers needs to be installed on remote machine
-SSH client that needs to be installed on local machine
-sudo apt update && sudo apt upgrade
-sudo apt install open-ssh-server
-sudo systemctl status ssh
-sudo systemctl enable --now ssh
-many servers have firewall enable by default in most linux distributions
-sudo systemctl status uff
-sudo ufw allow ssh
-ip a
-ssh ip_address
-remote machine & local machine
-no need to worry about passwords
-ssh-keygen -t asdfasdf
-sudo vim /etc/ssh/sshd_config
-sudo system reload sshd


Windows:
-windows has better hardware compatibility
-many hardware developer offers driver for their products on windows
-gaming on linux is improving
-application & software support is better in windows
-easy to use than linux


Linux vs windows:
-hardware requirement -windows -processor (1GHz) & faster
                               -RAM (1GB, 32-bit/ 2GB, 64-bit)
                               -free hard disk space (16GB)
                               -graphics card (Microsoft directX 9 graphics device WDDM driver)
                      -linux -processor (700MHz) & faster
                             -RAM (512MB)
                             -free hard disc space (5GB)
-linux is lightweight & better performance
-after each update of windows (XP --> 7 --> 8 --> 10 --> 11) hardware support has dropped
-some wifi adapters, windows version of neat brand scanners, newer USB bluetooth adapter doesn't work 
 in linux
-GPU drivers, NVIDIA & AMD don't necessarily keep upto data with latest release
-driver for RAID card supported 
-Broadcom wifi card & swap can solve that
-forcing PAE during installation
-AntiX (256MB RAM, 5GB hard disk, pentium 2 (32-bit)
-Lubuntu (64-bit processor, 1GB RAM, 9GB of HDD space)
-Ubuntu (64-bit dual core processor, 4GB, 25Gb of HDD)
-linux doesn't detect your hardware, more difficult, it might involve patching & building kernel to 
 support hardware, not straightforward as downloading driver from manufacturer website, support for new 
 hardware comes in successive kernel versions


Functions of layers:
-application -allows access to network resources
             -contains protocols allow users to access network (FTP, HTTP, SMTP)
             -doesn't include application programs email, browsers, word processing application
             -contains utilities & network-based services support email with SMTP, internet access, 
              HTTP, file transfer, FTP)
-presentation -translate, encrypt, compress data
              -encryption -transform data into unintelligible format at sending end for data security 
              -decryption -at receiving end
-session -establish, manage, terminate sessions
         -translation -different computers use different encoding systems (bit order translation)
                      -convert data into common format before transmitting
                      -character code (how many bits to represent data -8/7 bits)
         -compression -reduce number of bits to be transmitted
         -function -dialog control -allows 2 systems to enter into dialog, keep track of whose turn it 
                                    to transmit
                   -synchronisation -adds check points (synchronisation points) into stream of data
-transport -provide reliable end-to-end message delivery
           -service point addressing -computer run several programs at same time
                                     -not only from 1 computer to next, transport layer header must 
                                      Therefore include address (port address)
           -connection control -connectionless -each segment as individual & delivery to destination
                               -connection oriented -1st establish connection before packets send
                                                    -after all data packets delivered, connection 
                                                     terminated
                               -responsible for source-to-destination delivery of entire message
                               -segmentation & reassembly -divide message into smaller segments & 
                                sequence number them & transmit, reassemble these message at receiving 
                                end
                               -error control -make sure that entire message arrives without errors, 
                                else retransmit
-network -move packets from source to destination
         -routing -independent network large network, connecting device (routing/ switch)
                  -router packets to final destination
         -network layer responsible only for delivery of individual packets & doesn't recognise any 
          relationship b/w those packets
         -delivery of packets across multiple (source --> destination) network
         -when 2 systems connected to same link --> no need for network layer
         -logical addressing -physical addressing implemented by data link layer handles addressing 
                              problem locally (MAC)
                             -when passes boundary network layer adds header to packet (IP) coming from 
                              upper layer (include logical address of sender & receiver)
-data link -organise bits into frames
           -error control -adds reliability mechanisms to detect & retransmit damaged/ lost frames
                          -achieved by adding trailer to end of frame & recognise duplicate frames
           -access control -when 2 or more device connected to same link, this layer protocol determine 
                            which devices has control over link at any time
-physical -transmit bits over medium & provide electric specs


Awk command:
-ps (we can manipulate text)
-columned information
-ps | awk '{print $1}'
-ps | awk '{print $2}'
-ps | awk '{print}'
-cat /etc/passwd
-awk -F ":" '{print $1}' /etc/passwd
-awk -F ":" '{print $1 "\t" $3 "\t" $7}' /etc/passwd
-cat /etc/shells
-awk -F "/" '/'\// {print $NF}' /etc/shells | uniq | sort
-df | awk '/\dev\/loop/ {print $1}'
-df | awk '/\dev\/loop/ {print $1"\t"$2"\t"$3}'
-df | awk '/\dev\/loop/ {print $1"\t"$2 + $3}'
-df | awk '/\dev\/loop/ {print $1"\t"$2"\t"$3}'
-awk 'length($0) > 7' /etc/shells
-awk 'length($0) < 7' /etc/shells
-awk 'length($0) < 8' /etc/shells
-ps -ef
-ps -ef | awk '{ if($NF == "/bin/fish") print $0}'
-awk 'BEGIN { for(i =1; i <= 10; i++) print "The square root of", i, "is", i*I;}' 
-awk '$1 ~ /^[b,c]/ {print $0}' .bashrc
-cat numbered.txt
-awk '{print substr($0, 4)}' numbered.txt
-awk 'match($0, /o/) {print $0 " has \"o\" character at " RESTART}' numbered.txt
-df | awk  'NR==7, NR==11 {print NR, $0}'
-df | awk  'NR==7, NR==11 {print $0}'
-awk 'END {print NR}' /etc/shells
-awk 'END {print NR}' /etc/shells /etc/passwd


Cut & tr:
-cut (removes sections from each line from file)
-echo "This is a line. of text" | cut -c 1-10
-cut -c 1-10 .bashrc
-cut -c 11- .bashrc
-echo "This is a line. of text" | cut -d ' ' -f5
-cat /etc/passwd
-cut -d ':' -f2 /etc/passwd
-echo "abc def" | cut -f2 -d ' '
-echo "abc   def" | cut -f2 -d ' '
-echo "abc   def" | awk '{print $2}'
-echo " abc   def" | cut -f2 -d ' '
-echo " abc   def" | awk '{print $2}'
-man tr
-echo "This is a line of text" | tr 'a' 'A'
-echo "This is a line of text" | tr 'aeio' 'AEIO'
-echo "This is a line of text" | tr -d 'aeio' 
-echo "This is a line of text" | tr -d 'aeio '
-echo "Thiis iis aaaa liineee oof teeeext" | tr -s 'aeio' 
-echo "This its aaa linee off teeext" | tr -s '[:lower:]' '[:upper:]'
-echo "This is a line of text" | tr -d 'aeio'
-echo "This is a line of text" | tr -cd 'aeio'
-echo "This is a line of text" | tr -cd 'aeio\n'
-head /dev/urandom
-head 3 /dev/urandom | tr -cd '[:print:]'
-echo "This is a strong and complicated password 1234" | tr -cd '[:digit:]'
-echo "This is a line of text" | sed -e 'y/ai/AI/'
-echo "This is a line of text" | sed -e 'y/[:lower:]/[:upper:]/'


Sed command:
-string editor allows you to filter & transform text
-replacing & searching pattern
-sed 's/find/replace/' <oldfile>
-sed 's/o/O/' <.Xresources >sed-test
-sed 's/o/O/g' <.Xresources >sed-test
-echo "Derek" | sed 's/Derek/DT/'
-echo "The emacs file manager is dired" | sed 's/red/green/'
-echo "The emacs file manager is dired" | sed 's/ red/green/'
-echo "The emacs file manager is dired red." | sed 's/ red/green/'
-echo "The emacs file manager is dired red." | sed 's/ red/ green/'
-sed -i 's/find/replace/g' filename
-sed -i 's/Taylor/Tyler/g' .bashrc
-tldr sed | sed '/Replace/s/the/THE/'
-tldr sed | sed '/line_pattern/d'
-cat /etc/shells
-cat /etc/shells | sed 's/usr/u/g'
-cat /etc/shells | sed 's/usr/u/g' 's/bin/b/g'
-cat /etc/shells | sed -e 's/usr/u/g' -e 's/bin/b/g'
-cat /etc/shells | sed -e 's|usr|u|g' -e 's/bin/b/g'
-cat /etc/shells | sed -e 's|usr|u|g' -e 's#bin#b#g'
-cat /etc/shells | sed -n '/usr/p'
-sed -i 's/ *$//' test.sh
-sed -i 's/[[:space]]*$//' test.sh
-cat test.sh | sed '/^$/d'
-sed 's/[a-z]/\U&/g' test.sh
-sed 's/[A-Z]/\L&/g' test.sh
-head .bashrc
-sed 11q .bashrc
-awk 'NR < 13'.bashrc


Chmod:
-chmod -control permissions
       -4 (read) + 2 (write) + 1 (execute)
-chmod 577 index.txt -r-xrwrwx
-chmod 500 index.txt -r-x-----
-chmod 777 index.txt -rwx rwx rwx


Cmp, diff, tput:
-diff .bashrc test/bashrc
-diff .bashrc test/file1
-diff file1.txt file2.txt
-cmp .bashrc test/bashrc
-cmp .bashrc test/file1
-cmp binary1 binary2
-if cmp .bashrc test/bashrc ; then echo TRUE; else echo FALSE; fi
-if cmp .bashrc test/file1 ; then echo TRUE; else echo FALSE; fi
-if cmp --quiet .bashrc test/file1 ; then echo TRUE; else echo FALSE; fi
-if diff .bashrc test/file1 &>/dev/null ; then echo TRUE; else echo FALSE; fi
-if diff .bashrc test/bashrc &>/dev/null ; then echo TRUE; else echo FALSE; fi
-diff .bashrc test/bashrc
-diff -y .bashrc test/bashrc
-diff -y .bashrc test/file1
-diff -q .bashrc test/file1
-diff -u .bashrc test/file1
-diff -r nc/gitlab-repos/dtos/dtos-pkgbuild/ nc/gitlab-repos/dtos/dtos-core-repo
-tput setaf 3 && echo hi
-tput setaf 4 && echo hi
-tput setab 4 && echo hi
-cmp tldr
-tldr diff
-tldr tput
-cd nc/gitlab-repos/dtos/dtos-pkgbuild/


Pushd, pops, dirs:
-pushd /usr/share
-pushd /usr/share/icons
-pushd /usr/share/xsessions
-pushd +1
-pushd +2
-pushd -0
-pushd -n /var/local
-popd
-popd +4
-dirs
-dirs -v
-pushd
-pushd /home/dt
-cdh
-dirh
-cd ~/Download/
-dirh
-cdh
-prevd
-nextd


Setfont, write & wall:
-ubuntu server & switch to tty3
-ls usr/share/consolefonts/
-setfont font_name
-sudo vim /etc/default/console-setup
-reboot
-login as dt user
-man write
-who
-write dt tty3
-sudo write dt tty3
-mesg y
-messaging with tty3 & tty4 
-echo "hello there!" > tty4
-echo "hello there!" > /dev/tty4
-wall


Creating desktop log file:
-desktop notification on linux
-notify-send "firefox" "some message" 
-osascript -e 'display notification "some message" with title "firefox"'


Grep:
-grep the .bashrc
-grep -w the .bashrc
-cd .xmonad
-grep xmonad ./*
-grep xmonad ./* --exclude-dir=xpm
-grep xmonad ./* --exclude-dir={xpm, xmonad-example-configs}
-grep [aeiou] xmonad.hs
-grep [x-z] xmonad.hs
-grep ^im xmonad.hs
-grep -A 3 loghook xmonad.hs
-grep -A 3 -i loghook xmonad.hs
-grep -B 3 -i loghook xmonad.hs
-grep -C 3 -i loghook xmonad.hs
-grep -Hn import xmonad.hs
-grep -c import xmonad.hs
-cat ~/.bashrc
-cat ~/.bashrc |grep rickroll
-grep rickroll ~/.bashrc


Linux terminal utilities:
-man name_of_command
-name_of_command --help
-nano .bashrc
-less .bashrc
-cat .bashrc | head -n 5
-cat .bashrc | tail -n 5
-cat .bashrc | less
-cat .bashrc | tail -n 10 | head -n 5
-echo "gas gas gas" > file1
-xrandr 
-xrandr | grep "connected"
-xrandr | grep "connected" | awk '{print $1}'
-xrandr | grep "connected" | cut -f1 -d " "
-cd test
-ls
-chmod 755 file1
-ls -l
-chmod +x file1
-ls -l
-chmod -x file1
-ls -l
-chown name:name file
-chown -R name:name /home/dt/directory
-history
-history 10
-history | grep "xrandr"
-l3
-kill process_id
-killall conky
-ping google.com
-wget https........index.html
-ls
-cat index.html
-curl https........index.html --output index2.html
-seq 50
-seq 50 | shuf
-echo $RANDOM
-test -f file1
-test -f file1 && echo "True" || echo "False":
-test -f file1 && echo "True" || echo "False"
-test -f file2 && echo "True" || echo "False"
-ls
-test -d file2 && echo "True" || echo "False"
-echo "one two three" | xargs touch
-ls
-echo "one two three" | xargs rm
-ls
-lsblk
-df
-du
-du -ah/test
-date
-cal
-cal -3
-bc
-echo "6 / 2" | bc
-cp .bashrc test/bashrc
-cd test/
-ls -la
-split -n 5 bashrc
-ls
-cat xaa
-ls
-cat x* > newbashrc
-vim bashrc


Searching web from terminal:
-googler "distrotube"
-BROWSER=w3m googler "distrotube"
-3
-tldr googler
-BROWSER=w3m googler -j "distrotube"
-BROWSER=w3m googler -n 5 "linux"
-BROWSER=w3m googler -n 7 "linux"
-BROWSER=w3m googler -n 7 "linux"
-ddgr "distrotube"
-BROWSER=w3m ddgr -n -3 "distrotube"


Fork bomb:
-many dangerous commands that can crash or break linux installation
-sudo rm -rf on root directory (deletes every single file & directory on system)
-denial of service attack is like fork bomb (typically written in shell scripting)
-fork bomb continually forks process 1 --> 2 --> 4 process... (machine runs out of memory & machine locks up)
-shell script fork bomb
-#begin_example
:(){:|: & };:
#end_example
-shell fork bomb
-bash fork bomb


[TryHackMe]
[Hack the box]
[cybrary]


-ctrl + r for Reverse Search in Terminal:
-tmux & screen to detach and reattach to sessions at any time
-ranger or nnn file management
-python3 -m http.server 8000 (starting http server) 
-python3 -c "print(sum(1 for line in open('filename.txt')))"
-ssh -L 8080:localhost:80 user@remote_server (Forward a local port to a remote server)
-cat file.json | jq '.[].name'
-echo "scale=2; 5/3" | bc
-rsync -avz source/ destination/


Ip address:
-ifconfig
-ifconfig en0
-ifconfig en0 | grep "inet "
-networksetup -getinfo Wi-Fi
-networksetup -getinfo Ethernet
-ipconfig getifaddr en0
-ifconfig | grep "inet " | grep -v 127.0.0.1


Android phone remote control:
-never download untrusted softwares
-even standard looking cable can be malicious (OMG cable allows to create keystrokes to phone)
-send_sms -d "######" -t "fake sms"
-send_sms -d "######" -t "fake sms"
-sysinfo
-dump_sms
-dump_calling
-OMG & standard cable
-loading payload
-MSFvenom to create malicious APK file
-python3 -m http.server 8000
-


Regex
-tool for finding pattern within text
-


Communication without internet:
-HAM radio -long-distance communication & need appropriate licenses to operate them
	   -send text messages using digital modes like Packet Radio or FT8
-LoRa (long range radio) -LoRa transceivers, modules like LoRa SX1278 can be connected to 	
			 microcontrollers like arduino/raspberry Pi to create messaging system
			-cover distances up to 10-15 km in urban areas & even more in open spaces
			-low power consumption
			-good range for direct communication
-mesh network with wi-fi -raspberry pi or similar devices, high-gain Wi-Fi antennas, & mesh 
			 networking software
			-create mesh network where each device relays messages
			-number of nodes and the range of your antennas
-two-way radio (walkie-talkie) -Motorola T80 extreme
			      -use the built-in text messaging feature to send short messages
			       CB radio (citizens band radio)


Sending message through CLI:
-using netcat (nc) for local network communication
-nc -l 12345 (listen on specific port)
-echo "Hello brother how do you do?" | nc <your_mac_ip> 12345
-using ssh to send message remotely
-ssh user@friend_ip 'echo "Hello brother how do you do?" >> ~/message_file.txt'
-using mail command to send email
-echo "Hello brother how do you do?" | mail -s "subject" ansh@example.com
-ophcrack -free windows password recovery tool using rainbow tables
-NT password -tool to reset password on windows by modifying SAM file
-offline NT password & registry editor -another tool to reset windows passwords


Decentralised way of sending message through terminal:
-echo "What's up bastard" > message.txt
-openssl enc -aes-256-cbc -salt -in message.txt -out encrypted_message.enc (encryption)
-openssl enc -aes-256-cbc -d -in encrypted_message.enc -out decrypted_message.txt (decrypting)
-cat decrypted_message.txt
-avoid storing passwords in plaintext on system
-remove temporary files -after encrypting & decrypting, delete any temporary plaintext files to avoid leaving sensitive data on your system


Information of ports on system:
-sudo lsof -i -P -n  
-sudo lsof -i :1111
-netstat -an | grep :1111
-sudo lsof -i -P -n | grep LISTEN 
-netstat -an | grep LISTEN
-ss -tuln


Xargs:
-allows to taking standard input & pass that along as argument into another command
-many shell utility don't actually allow
-seq 5 
-seq 5 | echo 
-seq 5 | xargs echo
-seq 5 | xargs
-seq 5 | xargs -t 
-seq 5 | xargs -t printf
-ls
-ls | xargs ls 
-cut -d: -f1 < /etc/passwd | sort | xargs
-ls | xargs -I {} echo "/home/dt/{}"
-ls | xargs -I XXXX echo "/home/dt/XXXX"
-cd foo
-ls
-seq 1000
-seq 1000 | xargs -I {} touch {}.txt
-ls | cut -d. f1 | xargs -I {} mv {}.txt {}.txt
-ls -xargs -t
-ls -xargs -t -n 1
-ls -xargs -t -n 2
-seq 5 | xargs -n 1 bash -c 'echo $0'
-seq 5 | xargs -n 1 -P 1 bash -c 'echo $0'
-seq 5 | xargs -n 1 -P 1 bash -c 'echo $0'; sleep 1'
-seq 5 | xargs -n 1 -P 2 bash -c 'echo $0'; sleep 1'
-find foo -type f -name "*.txt" -exec rm {} \;
-cd foo
-ls
-seq 1000 | xargs -I {} touch {}.txt
-find . -type f -name "*.txt" | xargs rm
-time find . -type f -name "*.txt" -exec rm {} \;


$0 home server:
-personal media server to host movies & shows, network storage, VPN to home network
-minimum requirement is computer must have 64-bit processor & 2GB of ram
-connecting to ethernet 24/7
-never let your drive split into multiple volumes & not going to use all (we don't want that)
-samba (network servers)
-jellyfin (media server)
-wire-guard (VPN to network to access them from anywhere) 
-wake-on-lan -(remotely accessing machine anytime)
	     -computer ethernet port stays powered on, even when PC is off
-home server should have same local IP address (reserve that address in router's DHCP)
-accessing from SSH
-create directory that servers as network drive & changing permission


Web scraping & web crawling:
-web-scraping -instructing data from 1 or more websites
-web-crawling -finding, discovering URLs or links on web
-need to use both for data extraction projects 
-download HTML file --> scrape data from those files
-In crawling, you don't know specific URLs & don't know domain either
-search engine scroll web so they can index pages & display them
-creating crawler that will output all page URL 
-web scarping usually have lot more data fields (5,10,20 or even more)


Scrapping internet:
-


Linux vs windows:
-installing graphics driver in windows is easy
-windows support all games (xbox & playstation games through remote play using my PC)
-legacy DOS games under compatibility mode
-emulator can be used in linux like wine & proton
-window has better performance in gaming
-frame rate is less than windows but consistency due to optimised background task
-cloud gaming accounts


Home server:
-following instructions to build servers & all connections
-foreshadowing
-rack (full of hard drives in set)
-CPU (xeon silver 4210, 10 cores, 20 threats)
-RAM (4 32 bits sticks = 128GB)
-2GB nicks
-SFPs (4 10GB SFP ports) & 2 power supplies
-2 250GB SSDs for running my OS
-switch to handle insane networking requirements of server
-4 servers (each server has 10 GB SFP interfaces = 16 interfaces)
-2 10GB ports per gateway
-CRS326-24S+2Q+RM (can handle 320GB per second of non-blocking traffic)
-documentation is important
-cage nuts


-botnet
-


Networking:
-OSI (open system interconnection) model -help desperate computing systems to communicate with each other
-layer 7 (application), layer 6 (presentation), layer 5 (session), layer 4 (transport), layer 3 (network), layer 2 (data link), layer 1 (physical)
-most devices function at more than 1 layer 
-analog modems -modulator & demodulator (take digital signal coming from digital node --> return to 
	        analog signal --> modulating signals & placing that on wire) 
	       -accept analog signal from wire --> convert to demodulating signal back to digital 
		signal that node understand
	       -developed to create connection b/w network segments via public switched telephone 
	 	network using plain old telephone system
	       -provides signal connection to network
	       -works in layer 1
-hub -function as concentrator or repeater in that & does not care where signal comes from or where 
      its going
     -takes electrical signal arrives on port & replicates that signal out all its other ports
     -may have few or many ports & not very common in modern networks
     -works in layer 1 
-switch -utilises application specific integrated circuit chip & basic chip 
        -ASIC chip has specific programming allows switch to learn when device is on network & port 	
         is connected to via devices layer 2 MAC address
        -works in layer 2
	-may have few & many ports & smarter than hub & can be highly complex & programmable 
	-communicate with only local network devices 
-whap -wireless access point & specific type of network bridge that connect bridge 
      -connects connects wireless network segments with wired network segments 
      -common type of web bridges & 802.11 wireless network segment with 802.3 ethernet network 
       segment
      -just like switch wire access point only communicate with local network devices 
-multiplayer switch (MLS) -provides normal layer 2 network switching services & also provide layer 3
			  or higher OSI model services 
			 -most common multi layer switch is layer 3 switch
			 -utilises ASIC chip & programmed to handle mounting function
			 -allows devices communicate & pass data to non-local network devices
			 -highly programmable & complex network
			 -may have few or lot of ports & not common in small office or home office
			 -very expensive
-router -most common device connecting different network together
	-using layer 3 logical network information
	-uses software programming for decision making as compared to switches use of ASIC chip 
	-keep track of different network 
	-communicate with both local & non-local network devices
	-have fewer ports than switch
-security devices -firewall -placed on routers or hosts (software based or can be its own device)
			   -functions at various layers of OSI model (layer 2,3,4,7)
			   -block packets from entering or leaving network 
			   -stateless inspection (examines every packet that enters or leave 
			    against set of rules)
			   -once packet matches rule, enforced in specified action is taken
			   -stateful inspection (only examines state of connection b/w networks
			   -made from internal network to external network
			   -providing internal network from outside 
		  -Intrusion detection system -IDS & passive system to identify when network or 
					     attack against network is occurring  
					    -usually designed to inform network administrator when 
					     breach or attack has occurred & uses log files, text 
					     messages, through email notification 
					    -cannot stop breach or breach on its own 
					    -receives copy of all traffic & evaluate against 
					     set of standards (may be signature based or anomaly 
					     based or policy based)
						    -signature based -malware/attack signature
						    -anomaly based
						    -policy based
		  -Intrusion prevention system -IPS active system designed to breach or attack success 
                                                 in damaging network
		 -all traffic needs to flow through IPS to work 
		 -best placement in network segment is between router & firewall
		 -					     


Laptop buying guide:
-gaming laptop -best cooling, best processors, better upgradability
-RTX 4050 & RTX 3060 will handle 1080p, 1440p
-wattage of GPU is also important (4060, 90W is faster 4070, 50W)
-many recent CPUs can even handle AAA games
-batter life of Mac is fantastic & M chips have single core performance (unmatched by windows)
-AMD mobile naming is bad, risen AI 300 series is good with efficiency
-zen architecture number is important 764OU (7 --> portfolio model year, 6 --> market segment, 4 -->  
 architecture, O --> feature isolation, U --> form factor/TDP)
-intel ultra 100 series CPU offer little less performance 
-snap dragon X chip offers unmatched battery life with performance comparable to AMD
-chrome books serves really well if everything done with linux apps & web browser & cheap
-4GB, 8GB may slow down, 16 GB ram is recommended
-SODIMM & CAMM modules are good for upgrading laptop
-external SSDs always help
-display (mini LED, OLED, TN, IPS) avoid TN & IPS is allrounders
-16:9, 16:10, 3:2 size
-HD = 33" (1280x720), FHD = 22" (1920x1080), QHD = 17" (2560x1440), 4K = 11" (4096x2750)


Access everything from your web browser:
-RDP into windows & SSH into linux
-guacamole
-


Web crawler:
-python package scrapy (web scraping/web crawling framework)
-


Operating system:
-OS -bulky & complex (hardware interaction code must be present in codebase)
    -resource exploitation by 1 app
    -no memory protection
    -collection of system software
    -access computer hardware, resources management (arbitration) (memory, device, file, security, 
     process)
    -facilitates execution of application program by providing isolation & protections
    -user --> app program --> operating system --> computer hardware
    -provides means for proper use of resources in operation of computer system
    -goal -maximum CPU utilisation, less process starvation, higher priority job execution execution
-types of OS –multitasking OS [CTSS, MIT, early 1960s]
             -single process OS [MS DOS, 1981]
             -batch-processing OS [ATLAS, Manchester Univ., late 1950s – early 1960s]
             -multiprogramming OS [THE, Dijkstra, early 1960s]
             -multi-processing OS [Windows NT]
             -distributed system [LOCUS]
             -real time OS [ATCS]
-single process OS -only 1 process executes at time from ready queue (Oldest)
-batch-processing OS -user prepares his job using punch cards
                     -he submits job to computer operator
                     -operator collects jobs from different users & sort jobs into batches with similar 
                      needs
                     -operator submits batches to processor 1 by 1
                     -all jobs of 1 batch executed together
                                 -priorities can't be set, if job comes with some higher priority
                                 -may lead to starvation (batch may take more time to complete)
                                 -CPU may become idle in case of I/O operations
-multiprogramming -increases CPU utilisation by keeping multiple jobs (code & data) in memory so that 
  CPU always has 1 to execute in case some job gets busy with I/O (single CPU, context switching for 
  processes, switch happens when current process goes to wait state, CPU idle time reduced)
-multitasking -logical extension of multiprogramming (single CPU, Able to run more than 1 task
               simultaneously, context switching & time sharing used, increases responsiveness, CPU 
               idle time is further reduced
-multi-processing OS -more than 1 CPU in single computer (increases reliability, 1 CPU fails, other
                      can work, better throughput, lesser process starvation, (if 1 CPU working on some 
                      process, other executed on other CPU)
-distributed OS -OS manages many bunches of resources, >=1 CPUs, >=1 memory, >=1 GPUs
                -loosely connected autonomous, interconnected computer nodes
                -collection of independent, networked, communicating, & physically separate 
                 computational nodes
-RIOS -real time error free, computations within tight-time boundaries
      -air traffic control system, ROBOTS
-system calls -apps interact with kernel using system calls
              -Mkdir laks -indirectly calls kernel & asked file mgmt, module to create new directory
                          -just wrapper of actual system calls
                          -interacts with kernel using system calls
              -creating process -user executes process (user space)
                                -gets system call (US)
                                -exec system call to create process (KS)
                                -return to US
-transitions from US to KS done by software interrupts
-system calls are implemented in C -mechanism using which user program request service from kernel for 
 which it doesn't have permission to perform, user programs typically don't have permission to perform 
 operations like accessing I/O devices & communicating other programs
-system calls are only way through which process go into kernel mode from user mode
-types of system calls -process control -end, abort
                                        -load, execute
                                        -create process, terminate process
                                        -get process attributes, set process attributes
                                        -wait for time
                                        -wait event, signal event
                                        -allocate & free memory
                       -file management -create file, delete file
                                        -open, close
                                        -read, write, reposition
                                        -get file attributes, set file attributes
                       -device management -request device, release device
                                          -read, write, reposition
                                          -get device attributes, set device attributes
                                          -logically attach or detach devices
                       -information maintenance -get time or date, set time or date
                                                -get system data, set system data
                                                -get process, file, device attributes
                                                -set process, file, device attributes
                       -communication management -create, delete communication connection
                                                 -send, receive messages
                                                 -transfer status information
                                                 -attach or detach remote devices
-thrashing -when process don't have number of frames needs to support pages in active use ---> quickly       
            page fault --> must replace some page & all pages are in active use ---> must replace page 
            that will needed again right away ---> consequently, quickly faults again & again, 
            replacing pages that must bring back in immediately
           -high paging activity = trashing
           -spend more time servicing page than execution processes
           -technique to handle thrashing -working set model -based on concept of locality model
                                          -if allocate enough frames to process to accommodate its     
                                           current locality when only fault whenever it moves to some 
                                           new locality, when allocated frames < size of current 
                                           locality (bounce of thrash)
                                          -page fault frequency -thrashing has high page-fault rate
              -when high --> process needs more frames, when low rate --> process have many frames
              -start upper & lower bounds on desired page fault rate
              -pf-rate > upper limit --> allocate process another frame, pf-rate < lower limit --> 
               remove frame from process
              -by controlling pf-rate, thrashing can be prevented
-process -program -compiled code ready to execute
         -process -program under execution
         -OS creates process by converting program into process
         -steps -load program & static data into memory ---> allocate runtime stack ---> heap memory 
                 allocation ---> IO tasks ---> OS handles control to main()
         -architecture of process -stack (local variables, function argument & return values) -->     
          heap (dynamically allocated variables) --> data (global & static data) --> text (compiled 
          code loaded from disk)
         -attribute of process -feature allow identify process uniquely
                               -process table -all processes tracked by OS using table like data 
                                structure
                               -each entry in table is process control block (PCB)
         -PCB structure -process ID (unique identifier) --> program counter (PC) (next instruction 
          address of program) --> program state (stress process state) --> priority (based on priority 
          process gets CPU time) --> registers --> list of open files --> list of open devices
         -registers in PCB -data structure, process running & time slice expires --> current value of  
          process specific registers stored in PCB --> process swapped out --> process scheduled to run 
          --> register value read from PCB & written to CPU registers 
-page replacement algorithms -whenever page fault occurs (process tries to access page which is not 
                              currently present in frame & OS must bring page from swap-space to frame)
                             -OS must do page replacement to accommodate new page into free frame, but 
                              might be possibility system is working in high utilisation & all frames 
                              busy, OS must replace 1 of pages allocated into some frame with new page
                             -PRA decides which memory page is to be replaced, some allocated page 
                              swapped out from frame & new page swapped into freed frame
                             -types of PRA (to have minimum page faults)
                                  -FIFO -allocate frame to page as it comes into memory by replacing 
                                         oldest page, easy to implement, performance not always good
                                        -page replaced may be initialisation module used long time ago
                                         page may contain heavily used variable initialised early & is 
                                         in content use
                                        -belady’s anomaly is present, case of LRU & optimal page  
                                         replacement algorithms, it seen that number of page faults 
                                         will reduced if increase number of frames. However, in FIFO 
                                         PRA, number of page faults increased with increment in number 
                                         of frames, strange behaviour in FIFO algorithm in some cases
                                  -optimal page replacement -find if page thats never referenced in 
                                                             future --> If such page exists --> replace 
                                                             this page with new page
                                                            -if no such page exists --> find page thats 
                                                             referenced farthest in future --> replace 
                                                             this page with new page
                                                            -lowest page fault rate among any algorithm
                                                            -difficult to implement as OS requires 
                                                             future knowledge of reference string which 
                                                             (impossible) (similar to SJF scheduling)
                                   -least-recently used (LRU) -use recent past as approximation of near 
                                                               future ---> can replace page thats not 
                                                               been used for longest period
                                                              -implemented by 2 ways
                                                              -counters -associate time field with each 
                                                                         page table entry, replace page 
                                                                         with smallest time value
                                                              -stack -keep stack of page number, 
                                                                      whenever page is referenced --> 
                                                                    its removed from stack & put on top
                                                                     -most recently used is always on 
                                                                      top, & least recently used is 
                                                                      always on bottom
                                                                     -entries might removed from middle 
                                                                    of stack -> doubly linked list used
                                   -counting-based page replacement –keep counter of number of 
                                                                     references that have been made to 
                                                                     each page (reference counting)
                                                                    -least frequently used (LFU)
                                                                           -actively used pages should 
                                                                            have large reference count, 
                                                                       replace page with smallest count
                                                                    -most frequently used (MFU) -based 
                                                                             on argument that page with 
                                                                            smallest count was probably 
                                                                       just brought in & yet to be used   
                                                              -neither MFU nor LFU replacement (common)
-virtual memory  -technique allows execution of processes that are not completely in memory, provides 
                  user illusion of having very big main memory, done by treating part of secondary 
                  memory as main memory (swap-space), programs can be larger than physical memory
                 -required that instructions must be in physical memory to be executed, but limits size 
                  of program to size of physical memory, many cases, entire program is not needed at 
                  same time, we want ability to execute program only partially in memory give many 
                  benefits
                 -program no longer be constrained by amount of physical memory thats available
                 -each user program could take less physical memory, more programs could be run at
                  same time, with corresponding increase in CPU utilisation & throughput
                 -running program thats not entirely in memory would benefit both system & user
                 -programmer is provided very large virtual memory when only smaller physical memory is 
                  available
                 -demand paging is popular method of virtual memory management
                 -demand paging, pages of process which are least used, get stored in secondary memory
                 -page is copied to main memory when its demand is made, or page fault occurs
                 -various page replacement algorithms used to determine pages which will be replaced
                 -rather than swapping entire process into memory, use Lazy Swapper, lazy swapper never
                  swaps page into memory unless that page will be needed
                 -we are viewing process as sequence of pages, rather than 1 large contiguous address 
                  space, using term swapper is technically incorrect, swapper manipulates entire 
                  processes, whereas pager is concerned with individual pages of process
                 -how demand paging works -when process is to be swapped-in, pager guesses which pages 
                                           will be used
                                          -instead of swapping in whole process --> pager brings only 
                                           those pages into memory, avoids reading into memory pages 
                                           that won't be used anyway
                                          -OS decreases swap time & amount of physical memory needed
                                          -valid-invalid bit scheme in page table used to distinguish 
                                           b/w pages in memory & that are on disk
                                          -valid-invalid bit 1 means ---> associated page is both legal 
                                           & in memory
                                          -valid-invalid bit 0 means ---> page either is not valid (not 
                                           in LAS of process) or valid but currently on disk
                                          -if process never attempts to access some invalid bit page, 
                                           process will be executed successfully without even need 
                                           pages present in swap space
                                          -what happens if process tries to access page that was not 
                                           brought into memory, access to page marked invalid causes 
                                           page fault, paging hardware noticing invalid bit for
                                           demanded page cause trap to OS
                                          -procedure to handle page fault -check internal table (PCB of 
                                           process) to determine whether reference was valid or invalid 
                                           memory access
                                          -if ref. was invalid process throws exception
                                          -if ref. valid, pager swap-in page
                                          -find free frame (from free-frame list)
                                          -schedule disk operation to read desired page into newly 
                                           allocated frame
                                          -when disk read complete, modify page table that, page is now 
                                           in memory
                                          -restart instruction that was interrupted by trap, process 
                                           now access page as through it had always been in memory
                                          -pure demand paging -extreme case, start executing process 
                                           with no pages in memory, when OS sets instruction pointer to  
                                           1st instruction of process, which is not in memory, process 
                                           immediately faults for page & page is brought in memory
                                                       -never bring page into memory until its required
                                          -locality of reference to bring out reasonable performance 
                                           from demand paging
                                          -advantages of virtual memory -degree of multi-programming 
                                           increased, user run large apps with less physical memory
                                          -disadvantages -system becomes slower as swapping takes time
                                                         -thrashing may occur
-disadvantage of dynamic partitioning is external fragmentation -removed by compaction with overhead
                                                                -need more dynamic/flexible/optimal 
                                                              mechanism to load processes in partitions
-idea behind paging -If we have only 2 small non-contiguous free holes in memory say 1KB each
                    -If OS wants to allocate RAM to process of 2KB in contiguous allocation, its not 
                     possible (must have contiguous memory space available of 2KB) (external 
                     fragmentation)
                    -what if we divide process into 1KB-1KB blocks
-paging -memory-management scheme that permits physical address space of process to be non-contiguous
        -avoids external fragmentation & need of compaction
        -divide physical memory into fixed-sized blocks (frames), along with divide logical memory into 
         blocks of same size (pages) (page size = frame size)
        -page size is usually determined by processor architecture, traditionally pages in system had
         uniform size like 4,096 bytes, processor designs allow 2 or more, sometimes simultaneous, page 
         sizes due to its benefits
        -page table -data structure stores which page mapped to which frame
                    -contains base address of each page in physical memory
        -every address generated by CPU (logical address) divided into 2 parts (page number (p) &
         page offset (d), p used as index into page table to get base address corresponding frame in 
         physical memory
        -page table stored in main memory at time of process creation & its base address stored in 
         process control block (PCB)
        -page table base register (PTBR) present in system that points to current page table
        -changing page tables requires only this 1 register at time of context-switching
-paging avoids external fragmentation by non-contiguous allocation of pages of process allowed in 
 random free frames of physical memory
-paging is slow & make it fast by -too many memory references to access desired location in physical 
                                   memory
-translation look-aside buffer (TLB) -hardware support to speed-up paging process
                                     -its hardware cache, high speed memory
                                     -TBL has key & value
                                     -page table stores in main memory & when memory references is made 
                                      translation is slow
                                     -when retrieving physical address using page table, after getting  
                                      frame address corresponding to page number, put entry of into  
                                      TLB, so next time, get values from TLB directly without 
                                      referencing actual page table, make paging process faster
                                     -TLB hit, TLB contains mapping for requested logical address
                                     -address space identifier (ASIDs) stored in each entry of TLB
                                      ASID uniquely identifies each process & used to provide address  
                                      space protection & allows TLB to contain entries for several 
                                      different processes
                                     -when TLB attempts to resolve virtual page numbers, it ensures  
                                      that ASID for currently executing process matches ASID associated 
                                    with virtual page, if it doesn’t match, attempt treated as TLB miss


-segmentation -important aspect of memory management becomes unavoidable with paging is separation of   
               user’s view of memory from actual physical memory
              -memory management technique that supports user view of memory
              -logical address space is collection of segments, these segments based on user view of 
               logical memory
              -each segment has segment number & offset, defining segment 
               <segment-number, offset> {s,d}
              -process divided into variable segments based on user view
              -paging closer to OS rather than user, divides all processes into form of pages although 
               process have some relative parts of functions need to be loaded in same page
              -OS doesn't care about user's view of process, divide same function into different pages 
               & those pages may or may not be loaded at same time into memory, decreases efficiency of 
               system
              -better to have segmentation divides process into segments, each segment contains same    
               type of functions such as main function included in 1 segment & library functions 
               included in other segment
              -advantages -no internal fragmentation,1 segment has contiguous allocation, efficient 
                           working within segment, size of segment table generally less than size of 
                           page table, results in more efficient system because compiler keeps same 
                           type of functions in 1 segment
              -disadvantages -external fragmentation, different size of segment not good that time 
                              of swapping
              -modern system architecture provides both segmentation & paging implemented in some 
               hybrid approach
-defragmentation/compaction -dynamic partitioning suffers from external fragmentation
                            -compaction to minimise probability of external fragmentation
                            -all free partitions made contiguous & all loaded partitions brought 
                             together
                            -store bigger processes in memory, free partitions merged now be allocated 
                             according to needs of new processes (defragmentation)
                            -efficiency of system is decreased in case of compaction since all free 
                             spaces transferred from several places to single place
                            -free holes in memory are represented by free list (Linked-List data 
                             structure)
                            -various algorithms implemented by OS in order to find out holes in linked 
                             list & allocate them to processes
                            -first fit -allocate first hole that is big enough, simple & easy to 
                                        implement, fast/less time complexity
                            -next fit -enhancement on 1st fit but starts search always from last 
                                       allocated hole, same advantages of first fit
                            -best fit -allocate smallest hole that is big enough
                                      -lesser internal fragmentation
                                      -create many small holes & cause major external fragmentation
                                      -slow, required to iterate whole free holes list
                            -worst fit -allocate largest hole that is big enough
                                       -slow, as required to iterate whole free holes list
                                       -leaves larger holes that may accommodate other processes
-deadlock -multi-programming environment, several processes competing for finite number of resources
          -process requests resource (R), if R not available (taken by other process), process enters 
           in waiting state, sometimes waiting process never able to change its state because resource,
           it requested is busy (forever) (DEADLOCK (DL))
          -2 or more processes are waiting on some resource’s availability, which never available as
           its also busy with some other process, processes said to be in Deadlock
          -DL is bug present in process/thread synchronisation method
          -processes never finish executing, system resources are tied up, preventing other jobs
           from starting 
          -example of resources (memory space, CPU cycles, files, locks, sockets, IO devices)
          -single resource have multiple instances of that (CPU is resource, system have 2 CPUs)
          -request -request R, if R is free lock it, else wait till its available
          -use
          -release -resource instance & make it available for other processes
          -deadlock necessary condition -mutual exclusion -only 1 process at time use resource, if 
                                         another process requests that resource, requesting process 
                                         must wait until resource has released
                                        -hold & wait -process must holding at least 1 resource & 
                                         waiting to acquire additional resources that currently being
                                       held by other processes
                                      -no-preemption -resource must voluntarily released by process 
                                       after completion of execution (no resource preemption)
                                      -circular wait -set {P0, P1, ... ,Pn} of waiting processes must 
                                       exist so that P0 is waiting for resource held by P1, P1 is 
                                       waiting for resource held by P2 & so on
          -methods for handling deadlocks -use protocol to prevent or avoid deadlocks, ensuring 
                                         system never enter deadlocked state
                                        -allow system to enter deadlocked state, detect it & recover
                                        -ignore the problem altogether and pretend that deadlocks  
                                         never occur in system, (ostrich algorithm), deadlock 
                                         ignorance
          -ensure deadlocks never occur, system use deadlock prevention or deadlock avoidance scheme
          -deadlock prevention -ensuring at least 1 of necessary conditions can't hold
                              -mutual exclusion -use locks (mutual exclusion) only for non-sharable 
                                                resource
                                               -sharable resources like read-only files accessed by 
                                                multiple processes/threads
                                               -can’t prevent DLs by denying mutual-exclusion 
                                                condition as some resources are intrinsically non-
                                                sharable
                              -hold & wait -ensure H&W condition never occurs in system, must guarantee 
                                            that whenever process requests resource, it doesn’t hold  
                                            any other resource
                                           -protocol (A) can be, each process has to request & be 
                                            allocated all its resources before its execution
                                           -protocol (B) can be, allow process to request resources 
                                            only when it has none, request any additional resources 
                                            after it must have released all resources thats currently 
                                            allocated
                             -no preemption -if process is holding some resources & request another 
                                             resource that can't be immediately allocated to it, then 
                                             all resources process is currently holding are preempted, 
                                             process restart only when it can regain its old resources, 
                                           as well as new 1 that it is requesting (live lock may occur)
                                            -if process requests some resources, we 1st check whether 
                                             they are available. if yes --> allocate them, if not --> 
                                             check whether they are allocated to some other
                                             process waiting for additional resources, if so, preempt 
                                             desired resource from waiting process & allocate them to 
                                             requesting process
                             -circular wait -ensures that condition never holds is to impose proper 
                                             ordering of resource allocation
                                            -P1 & P2 both require R1 & R1, locking on these resources 
                                             should be like, both try to lock R1 then R2, which ever 
                                             process 1st locks R1 will get R2
-process synchronisation techniques play key role in maintaining consistency of shared data
-critical section (C.S) -refers to segment of code where processes/threads access shared resources
                         such as common variables and files, & perform write operations on them, 
                         processes/threads execute concurrently, any process can be interrupted mid-
                         execution
-major thread scheduling issue -race condition -race condition occurs when 2 or more threads access 
                                shared data & they try to change it at same time as thread scheduling 
                                algorithm swap b/w threads at any time, you don't know order in which 
                                threads attempt to access shared data, result of change in data is 
                                dependent on thread scheduling algorithm, both threads are racing to 
                                access/change data

-solution to race condition -atomic operations -make critical code section atomic operation, executed 
                                                in 1 CPU cycle
                                               -mutual exclusion using locks
                                               -semaphores
-can't use simple flag variable to solve problem of race condition
-Peterson’s solution -avoid race condition but holds good for only 2 process/threads
-mutex/locks -locks used to implement mutual exclusion & avoid race condition by allowing only 1 
              thread/process to access critical section
    -disadvantages -contention -1 thread has acquired lock, other threads will be busy waiting, what if 
                    thread that acquired lock dies, then all other threads will be in infinite waiting
                   -deadlocks
                   -debugging & starvation of high priority threads
-concurrency -execution of multiple instruction sequences at same time, happens in OS when there are 
              several process threads running in parallel
-thread -single sequence stream within process, independent path of execution in a process
        -light-weight process, used to achieve parallelism by dividing process’s tasks independent path 
         of execution
        -multiple tabs in browser, text editor (when typing in editor, spell checking, formatting of 
         text & saving text are done concurrently by multiple threads)
-thread scheduling -threads scheduled for execution based on their priority, even though threads are 
                    executing within runtime, all threads are assigned processor time slices by OS
-threads context switching -OS saves current state of thread & switches to another thread of same 
                            process
                           -doesn’t includes switching of memory address space (program counter, 
                            registers & stack are included)
                           -fast switching as compared to process switching
                           -CPU’s cache state is preserved
          -each thread has its own program counter
          -depending upon thread scheduling algorithm, OS schedule these threads
          -OS fetch instructions corresponding to PC of that thread & execute instruction
          -I/O or TQ, based context switching is done here as well
          -have TCB (thread control block) like PCB for state storage management while performing 
           context switching
-single CPU system would never gain by multi-threading technique
-as 2 threads have to context switch for that single CPU --> won’t give any gain
-benefits of multi-threading -responsiveness, resource sharing, efficient resource sharing
                             -more economical to create & context switch threads
                             -allocating memory & resources for process creation is costly
                             -better to divide tasks into threads of same process
                             -threads allow utilisation of multiprocessor architectures to greater 
                              scale & efficiency
-32-bit OS -32-bit registers & access 2^32 unique memory addresses (4GB of physical memory)
-64-bit OS -64-bit registers & access 2^64 unique memory addresses (17,179,869,184 GB of physical 
 memory)
-32-bit CPU architecture process 32 bits of data & information
-64-bit CPU architecture process 64 bits of data & information
-advantages of 64-bit over 32-bit OS
          -addressable memory -32-bit CPU -> 2^32 memory addresses, 64-bit CPU -> 2^64 memory addresses
          -installing more RAM on system with 32-bit OS doesn't impact performance, upgrade that system    
           with excess RAM to 64-bit version of windows -----> notice a difference
          -all calculations take place in registers, when performing math in code, operands are loaded 
           from memory into registers, having larger registers allows perform larger calculations at 
           same time 
-32-bit processor executes 4 bytes of data in 1 instruction cycle & 64-bit means processor execute 8 
 bytes of data in 1 instruction cycle (thousands to billons of instruction cycles in 1 sec depending 
 upon processor design)
-64-bit CPU run both 32-bit & 64-bit OS, 32-bit CPU run 32-bit OS only
-8-bytes graphics calculations make graphics-intensive apps run faster

-when computer turns on -PC on
                        -CPU initialises itself & looks for firmware program (BIOS) stored in BIOS chip 
                         (basic input-output system chip is ROM chip found on mother board allows to 
                          access & setup computer system at most basic level)
                        -modern PCs, CPU loads UEFI (unified extensible firmware interface)
                        -CPU runs BIOS tests & initialises system hardware, Bios loads configuration  
                         settings, If somethings not appropriate (missing RAM) error is thrown & boot 
                         process is stopped (POST (power on self-test) process)
                         (UEFI do lot more than just initialise hardware, its really tiny OS (Intel 
                          CPUs have intel management engines) provides variety of features, including    
                          powering intel’s active management technology allows for remote management
                          of business PCs)
                        -BIOS will handoff responsibility for booting PC to OS’s bootloader
                            -BIOS looked at MBR (master boot record), special boot sector at beginning 
                             of disk., MBR contains code that loads rest of OS (bootloader)
                            -BIOS executes bootloader that takes from there & begins booting actual 
                             OS—windows or linux,
                            -BIOS or UEFI examines storage device on system & look for small program, 
                             either in MBR or on EFI system partition & runs it
                        -bootloader is small program that has large task of booting rest of OS (boots 
                         kernel then, user space), windows uses bootloader named windows boot manager 
                         (Bootmgr.exe), most linux systems use GRUB & Macs use boot.efi
-components of OS -kernel -interacts directly with hardware & performs most crucial tasks
                          -heart of OS/core component, very 1st part of OS to load on start-up
                  -user space -where application software runs, apps don’t have privileged access to 
                               underlying hardware, interacts with kernel (GUI, CLI)
                  -shell (command interpreter), is part of OS that receives commands from users & gets 
                   them executed
-functions of kernel -process management -scheduling processes & threads on CPUs
                                         -creating & deleting both user & system process
                                         -suspending and resuming processes
                                         -providing mechanisms for process synchronisation or process
                                          communication
                     -memory management -allocates & deallocates memory space as per need
                                        -keeps track of which part of memory are currently being used &  
                                         by which process
                     -file management -creating & deleting files
                                      -creating & deleting directories to organise files
                                      -mapping files into secondary storage
                                      -backup support onto stable storage media
                     -I/O management -manage & control I/O operations & I/O devices
                                     -buffering (data copy b/w 2 devices), caching & spooling
                                         -spooling -within differing speed 2 jobs
                                                   -print spooling & mail spooling
                                         -buffering -within 1 job, youtube video buffering
                                         -caching, memory caching, web caching
-types of kernel -monolithic kernel -all functions are in kernel itself, bulky in size, memory required   
                                     to run is high, Less reliable, 1 module crashes -> whole kernel is  
                                     down, high performance as communication is fast (less user mode,  
                                     kernel mode overheads), linux, unix, MS-DOS
                 -micro kernel -only major functions are in kernel --> memory mgmt, process mgmt
                               -file mgmt & IO mgmt are in user-space, smaller in size, more reliable
                                more stable, performance is slow, overhead switching b/w user mode & 
                                kernel mode, L4 linux, symbian OS, MINIX
                 -hybrid kernel -advantages of both worlds (file mgmt in user space & rest in Kernel
                                 space), combined approach, speed & design of mono, modularity & 
                                 stability of micro, macOS, windows NT/7/10, IPC also happens but 
                                 lesser overheads
-inter process communication (IPC) -2 processes executing independently, having independent memory
                                    space (Memory protection), but some may need to communicate to work
                                   -done by shared memory & message passing
-thread -single sequence stream within process
        -independent path of execution in process
        -light-weight process
        -achieve parallelism by dividing process’s tasks which are independent path of execution
        -multiple tabs in browser, text editor (when typing in editor, spell-checking, formatting of 
         text & saving text are done concurrently by multiple threads)
-multi-tasking -execution of more than 1 task simultaneously
               -concept of more than 1 processes being context switched
               -number of CPU 1
               -isolation & memory protection exists, OS must allocate separate memory & resources to 
                each program that CPU is executing
-multi-threading -process is divided into several different sub-tasks (threads), has its own path of 
                  execution
                 -concept of more than 1 thread, threads are context switched
                 -number of CPU >= 1 (better to have more than 1)
                 -number isolation & memory protection resources shared among threads of that process
                 -OS allocates memory to process; multiple threads of that process share same memory 
                  & resources allocated
-thread context switching -OS saves current state of thread & switches to another thread of same 
                           process
                          -doesn’t includes switching of memory address space (program counter, 
                           registers & stack are included), fast switching, CPU cache state preserved
-process context switching -OS saves current state of process & switches to another process by 
                            restoring its state
                           -includes switching of memory address space, slow switching, CPU cache state 
                            is flushed
-process scheduling -basis of multi-programming OS, by switching CPU among processes, computer more 
                     productive, many processes kept in memory at time, when process must wait or time  
                     quantum expires, OS takes CPU away from that process & gives CPU to another 
                     process & this pattern continues
-CPU scheduler -whenever CPU become ideal, OS must select 1 process from ready queue to be executed
                done by STS
-non-preemptive scheduling -once CPU been allocated to process, process keeps CPU until it releases CPU 
                            either by terminating or by switching to wait-state
                           -starvation, as process with long burst time may starve less burst time 
                            process, low CPU utilisation
-preemptive scheduling -CPU taken away from process after time quantum expires along with terminating 
                        or switching to wait-state, less starvation, high CPU utilisation
-goals of CPU scheduling -maximum CPU utilisation, minimum Turnaround time (TAT), min wait-time, min 
                          response time, max throughput of system
-throughput -number of processes completed per unit time
-arrival time (AT) -time when process is arrived at ready queue
-burst time (BT) -time required by process for its execution
-turnaround time (TAT) -time taken from 1st time process enters ready state till it terminates (CT-AT)
-wait time (WT) -time process spends waiting for CPU (WT = TAT – BT)
-response time -time duration b/w process getting into ready queue & process getting CPU for 1st time
-completion time (CT) -time taken till process gets terminated
-FCFS (first come-first serve) -whichever process comes 1st in ready queue will be given CPU first
                               -if 1 process has longer BT, will have major effect on average WT of 
                                diff processes (convoy effect)
-convoy effect -situation where many processes that need to use resource for short time are blocked by 
                1 process holding that resource for long time, causing poor resource management
-shortest job first (SJF) (Non-preemptive) -process with least BT will be dispatched to CPU 1st
                                           -must do estimation for BT for each process in ready queue, 
                                            correct estimation of BT is impossible task (ideally)
                                           -run lowest time process for all time, choose job having 
                                            lowest BT at that instance
                                           -suffer from convoy effect as if very 1st process which came  
                                            is ready state is having large BT, process starvation might 
                                            happen, criteria for SJF algo, AT + BT
-SJF (preemptive) -less starvation, no convoy effect, gives average WT less for given set of processes 
                   as scheduling short job before long 1 decreases WT of short job more than it  
                   increases WT of long process
-priority scheduling (non-preemptive) -priority is assigned to process when its created
                                      -SJF is special case of general priority scheduling with priority 
                                       inversely proportional to BT
-priority scheduling (Preemptive) -current RUN state job will be preempted if next job has higher 
                                   priority
                                  -may cause indefinite waiting (starvation) for lower priority jobs 
                                   (possibility is they won’t get executed ever) (true for both 
                                   preemptive & non-preemptive version)
                                  -solution -ageing is solution
                                  -gradually increase priority of process that wait so long (increase 
                                   priority by 1 every 15 minutes)
-round robin scheduling (RR) -most popular, like FCFS but preemptive, designed for time sharing systems
                             -criteria -AT + time quantum (TQ), doesn’t depend on BT, no process going  
                              to wait forever, very low starvation (no convoy effect), easy to 
                              implement, if TQ is small, more will be context switch (more overhead)
-MLQ -multi-level queue scheduling -ready queue is divided into multiple queues depending upon 
                    priority, process is permanently assigned to 1 of queues (inflexible) based on some 
                    property of process, memory, size, process priority or process type
                    each queue has its own scheduling algorithm (SP -> RR, IP -> RR & BP -> FCFS)
                                        -system process created by OS (highest priority)
                                        -interactive process (foreground) -needs user input (I/O)
                                        -batch process (background) -runs silently, no user input 
                                         required
                                        -scheduling among different sub-queues implemented as fixed 
                                         priority preemptive scheduling (foreground queue has absolute 
                                         priority over background queue)
                                        -if interactive process comes & batch process is currently 
                                         executing, then batch process will be preempted
                                        -problem -only after completion of all processes from top-level 
                                              ready queue, further level ready queues will be scheduled
                                              ,starvation for lower priority process, convoy effect is 
                                              present
-multi-level feedback queue scheduling (MLFQ) -multiple sub-queues are present, allows process to move 
                                               b/w queues, idea is to separate processes according to  
                                               characteristics of their BT, If process uses too much  
                                               CPU time ---> moved to lower priority queue, scheme 
                                               leaves I/O bound & interactive processes in higher-
                                               priority queue, process that waits too much in lower- 
                                               priority queue may be moved to higher priority queue
                                              -form of ageing prevents starvation
                                              -less starvation then MLQ & flexible
                                              -configured to match specific system design requirement
-conditional variable -condition variable is synchronisation primitive lets thread wait until certain 
                       condition occurs, works with lock, thread enter wait state only when it has 
                       acquired lock, when thread enters wait state, it release lock & wait until 
                       another thread notifies that event has occurred, once waiting thread enters 
                       running state, it again acquires lock immediately & starts executing, avoids 
                       busy waiting, contention is not here
-semaphores -synchronisation method, integer thats equal to number of resources
            -multiple threads go & execute C.S concurrently
            -allows multiple program threads to access finite instance of resources whereas mutex 
             allows multiple threads to access single shared resource 1 at time
            -binary semaphore -value can be 0 or 1 (mutex locks)
            -counting semaphore -range over unrestricted domain
                                -used to control access to given resource consisting of finite number 
                                 of instances
            -to overcome need for busy waiting ---> modify definition of wait () & signal () semaphore 
             operations, when process executes wait () operation & finds that semaphore value is not 
             positive, it must wait, rather than engaging in busy waiting, process car block itself
            -block operation places process into waiting queue associated with semaphore & state of 
             process is switched to waiting state, then control is transferred to CPU scheduler, which 
             selects another process to execute
            -process thats blocked, waiting on semaphore S, should be restarted when some other process  
             executes signal () operation, process is restarted by wakeup () operation, which changes 
             process from waiting state to ready state, process is then placed in ready queue
-Dinning philosopher problem -we have 5 philosophers
                            -they spend their life just being in 2 states -thinking, eating
                            -they sit on circular table surrounded by 5 chairs (1 each), in centre of 
                            -table is bowl of noodles & table is laid with 5 single forks
                            -thinking state -when ph, thinks, he doesn’t interact with others
                            -eating state -when ph, gets hungry, tries to pick up 2 forks adjacent to 
                                           him (left & right), he can pick 1 fork at time
                            -1 can’t pick up fork if its already taken
                            -when ph has both forks at same time, he eats without releasing forks
                            -solution can be given using semaphores -each fork is binary semaphore
                                                           -ph. calls wait() operation to acquires fork
                                                           -release fork by calling signal()
                                                           -semaphore fork[5]{1}
                            -although semaphore solution makes sure that no 2 neighbours are eating 
                             simultaneously but it could still create deadlock
                            -suppose that all 5 ph become hungry at same time & each picks up their 
                             left fork, then all fork semaphores would be 0
                            -when each ph tries to grab his right fork, he'll wait for ever (Deadlock)
                            -we must use some methods to avoid deadlock & make solution work
                                                       -allow at most 4 ph to be sitting simultaneously
                                                       -allow ph to pick up his fork only if both forks 
                                                        are available & to do this, he must pick them 
                                                        up in critical section (atomically)
-multi-programming environment -have multiple processes in main memory (ready queue) to keep CPU 
                                utilisation high & make computer responsive to users
                               -to realise this increase in performance, must keep several processes in 
                                memory, thats, must share main memory, must manage main memory for all 
                                different processes
-logical vs physical address space -logical address -address generated by CPU, address of instruction 
                                                     or data used by process
                                   -user can access logical address of process
                                  -user has indirect access to physical address through logical address
                                  -logical address doesn't exist physically, virtual address
                                   -set of all logical addresses generated by any program referred as 
                                    logical address space, range 0 to max
                                   -physical address -address loaded into memory-address register of 
                                                      physical memory
                                                     -user never access physical address of program
                                                     -physical address is in memory unit, its location 
                                                      in main memory physically
                                                     -accessed by user indirectly but not directly
                                                     -set of all physical addresses corresponding to 
                                                      logical addresses (physical address space)
                                                     -computed by memory management unit (MMU)
                                                     -range: (R + 0) to (R + max), for base value R
                                   -runtime mapping from virtual to physical address done by hardware 
                                    device (memory-management unit (MMU))
                                   -user's program mainly generates logical address & user thinks that 
                                    program is running in this logical address but program mainly needs 
                                    physical memory in order to complete its execution

-OS manages isolation & protect (memory mapping & protection) 
                  -provides this virtual address space (VAS) concept
                  -separate memory space, need ability to determine range of legal addresses that
                   process may access & ensure that process access only these legal addresses
                  -relocation register contains value of smallest physical address (base address [R]); 
                   limit register contains range of logical addresses (relocation = 100040 & limit = 
                   74600)
                  -each logical address must be less than limit register
                  -MMU maps logical address dynamically by adding value in relocation register
                  -when CPU scheduler selects process for execution, dispatcher loads relocation, limit
                   registers with correct values as part of context switch, since every address 
                   CPU (logical address) checked against these registers, protect both OS & other users
                   programs & data from being modified by running process
                  -any attempt by program executing in user mode to access OS memory or other uses
                   memory results in trap in OS which treat attempt as fatal error
                  -address translation
-allocation method on physical memory -contiguous allocation, non-contiguous allocation
-contiguous memory allocation -each process contained in single contiguous block of memory
                              -fixed partitioning -main memory divided into partitions of equal or 
                                                   different sizes
                              -limitations -internal fragmentation -if size of process is lesser then 
                                                                    total size of partition then some 
                                                                    size of the partition gets wasted 
                                                                    and remain unused ---> wastage of 
                                                                    memory (internal fragmentation)
                                           -external fragmentation -total unused space of various 
                                                                    partitions can't be used to load 
                                                                    processes even though theres space 
                                                                   available but not in contiguous form
                              -limitation on process size -if process size is larger than size of 
                                                           maximum sized partition then that process 
                                                           can't be loaded into memory, limitation 
                                                           imposed on process size thats it can't be 
                                                           larger than size of largest partition
                              -low degree of multi-programming -fixed partitioning, degree of
                                                                multiprogramming is fixed & very less 
                                                                because size of partition can't be 
                                                                varied according to size of processes
                              -dynamic partitioning -partition size not declared initially
                                                    -its declared at time of process loading
                                                    -advantages over fixed partitioning -no internal  
                                                     fragmentation, no limit on size of process, better 
                                                     degree of multi-programming
                                                    -limitation -external fragmentation
-swapping -time-sharing system may have medium term schedular (MTS)
          -remove processes from memory to reduce degree of multi-programming
          -removed processes can be reintroduced into memory & its execution be continued where it left 
           off (swapping)
          -swap-out & swap-in done by MTS
          -necessary to improve process mix or because change in memory requirements has overcommitted 
           available memory, requiring memory to be freed up
          -mechanism in which process can be swapped temporarily out of main memory or move to  
           secondary storage (disk) & make that memory available to other processes
          -after some time system swaps back process from secondary storage to main memory
-context-switching -switching CPU to another process requires performing state save of current process 
                    & state restore of different process
                  -when this occurs, kernel saves context of old process in its PCB & loads saved
                   context of new process scheduled to run
                  -pure overhead as system does no useful work while switching
                  -speed varies from machine to machine, depending on memory speed number of registers
                   that must be copied
-orphan process -process whose parent process has been terminated & its still running
                -adopted by init process, Init is 1st process of OS
-zombie process/ defunct process -process whose execution is completed but still has entry in process
                                  table
                                 -occur for child processes as parent process still needs to read its
                                  child exit status, once its done using wait system call, zombie 
                                  process is eliminated from process table (reaping zombie process)
                                 -because parent process maycall wait () on child process for longer 
                                  time duration & child process got terminated much earlier
                                 -as entry in process table only be removed, after parent process reads 
                                  exit status of child process, child process remains zombie till its 
                                  removed from process table
-register -smallest unit of storage, its part of CPU itself, register may hold instruction, storage 
           address or any data (such as bit sequence or individual characters)
          -type of computer memory used to quickly accept, store, transfer data instructions being used 
           immediately by CPU
-Deadlock


Operating systems:
-OS = interface between programmer & computer
-high level statement (a = b + c) --> converts into micro instructions -loading value of b into R1 	
							  register
							 -loading value of b into R2 register
							 -add R1 & R2
							 -store value into a 
-ALU (arithmetic logic unit) -functional unit like arithmetic function
                             -performs arithmetic & operational logic
     		            -consists of adders & subtracters
-memory -primary -main, volatile, faster, less in size, RAM, ROM, caches, registers
        -secondary -auxiliary, hard-disk, pen drive, non-volatile, less expensive, more size
		   -part of input & output devices
-VAN (vm Neumann architecture)
		-test.c --> complier --> .exe (I1,I2,I3..In) --> passed to OS --> main memory --> 
                  loads executable 
		 into main memory --> CPU 
		-test.c & test.exe file --x--> CPU (Hardisks are slow & can't fetch data from hard 
		 disk)
		-instruction of program load sequentially one after another
-os -converts high level language --> machine language (0s & 1s) (understandable by hardware)
-kernel (core/nucleus) -process manager, file manager, memory manager, device manager, protection 
		        manager
-resource manager -allocation & deallocation management 
		 -software -file, monitor, semaphore
		 -hardware -CPU, monitor, I/O devices
-control program -controls all operations of computer
-set of utility to simplify application development
	-take charge of hardware
	-create env/platform that force on dev in HL mode
	-OS will perform work at back of stage
-efficiency (utilisation of resources), reliability, robustness (strong enough to bear errors), scalability (ability to evolve), portability (ability to work across diff platforms)
-missile control, satellite control, neural system, air traffic control (strict deadlines & RTOS)
-1st generation -no OS
-2nd generation -magnetic tapes (no OS)
-3rd generation -magnetic disk (hard disk & floppy) -uni programmed 
						  -multi programmed
-uni programmed -ability of OS to hold single program in memory (1 CPU at motherboard)
	        -hold only single program from main memory
	        -moved to IO devices --> CPU becomes IDLE (No, we want efficient CPU utilisation)
	        -throughput less --> efficiency less
	        -throughput = no of program executed per unit time
	        -Ex. MS-DOS (disk operating system) (command based & no GUI)
	        -maximum use of CPU
-multiple programming -OS can hold multi ready to run program
	              -only 1 program can run at time in any case
	              -maximum efficiency, throughput, impression of multiplexing of CPU among
		       different programs	
	-pre-emptive -forceful deallocation from CPU
		     -win95....win11, unix, linux, Mac
		     -forceful deallocation by OS
		     -other waiting program can get chance to run on CPU
		     -based on time & priority 
	-non-preemptive -nobody force program to leave CPU
                        -leave CPU voluntarily 
                        -either all instructions are complete, needs IO, system call
-drawbacks of MP -starvation (waiting for other programs)
		-lack of interactiveness & responsiveness
-multitasking OS -program (unix) = task (windows)
                 -same as multiprogramming 
-secondary storage devices -should be DMA compatible
			  -efficient data transfer b/w MM
-processor -should support dual mode operation
           -user mode for 1 & non-privilege mode
           -kernel mode for 0 & privilege mode
-register in CPU -many times needed to shift mode (U --> K & K --> U)
-whenever we need OS services (shifting from user mode --> kernel mode & kernel mode --> user mode)
-
-systematic view of multiprogramming -secondary storage has programs P1,P2,P3 
				    -various jobs are loaded in OS (job1 for IO services, job2 for 
				     execution, job3 & job4 are waiting to receive) 
				    -CPU utilisation increase & idleness decreases  


Paying for cloud storage:
-expensive cloud storage provider
-network attached storage (NAS) 
-ARM based processor crushes CPU & can be powered up by just 2 amp & 12 volt input
-Petascale 1u & 2u storage server
-CM3588 & NAS kit (half gig ethernet, 3 HDMI ports 1 in & 2 out, USB 3, USB-C, micro slot, 4 full 
 sized M2 PCLE Gen 3 slot)
-inexpensive adapters
-4TB MP34 drivers
-NAS can be shared with anyone else on your network
-3-2-1 rule (3 copies of data on 2 types of media with 1 of them being offsite)
-SD card --> eMMC storage
-choosing RAID 5 for balance, protection & capacity
-SMB protocol (server message block)
-Libyan friendly, WRT, ubuntu & even android


Linux vs unix:
-linux -open source & developed by linux community & developers (Linus torvald)
       -ext2, ext3, ext4, hfs, reiserFS, Xfs, Btrfs, FAT, FAT32, NTFS
       -KDE & Gnome, other GUI supported are LXDE, Xfce, unity, mate
       -wide varieties from desktop, servers, smartphone to mainframe
       -bash is default shell for linux
       -developed by intel x86 hardware processors, now it supports 20+ processor families
       -ubuntu, debian, GNU, arch, linux
-unix -developed by AT&T bell labs & not open source (licensed OS)
      -fs, gpfs, hfs, hfs+, ufs, xfs, zfs
      -initially command based OS, most of them have Gnome
      -mostly used on servers, workstations/ PCs
      -bourne shell is default shell fro Unix
      -CUnic supports PA-RISC & titanium family
      -sunOS, solaris, SCO, UNIX, AIX, HP/UX, ULTRIX


Extracting source code from any app or software:
-not easy task
-reverse engineering of compiled/native programs
-Microsoft DLLs with software like IDA Pro to get idea for reconstructing 
-can’t simply lift source code wholesale without lot of manual effort into bargain
-don't hide secret data in your application (like access keys/ secret keys)
-some parts of logic on phone, but have also a backend which contains logic & authentication Make sure there's a secure communication between them (mTLS or OAuth2 or similar) and then decompiling gives you only a part of the puzzle. The most useful part though is that any secret data can be on your backend where it's safer
-decompiler.com
-ghidra-sre.org


Avoid mouse & trackpad (Mac):
-cmd + space -open spotlight search
-ctrl + F2 -focus on menu bar (use arrow keys to navigate)
-com + tab -switch between open applications
-cmd + ` -cycle through windows of same application
-cmd + q -quit active application
-cmd + h -hide active application
-cmd + option + h -hide all other applications except one you're using
-cmd + m -minimise current window
-cmd + option + m -minimise all windows of current application
-cmd + option + w -close all windows of current application
-cmd + w -close current window
-cmd + option + t -toggle the visibility of toolbar in finder
-cmd + f -open find window
-cmd + shift + a -open applications folder in finder
-cmd + n -open new finder window
-ctrl + up -open mission control to see all desktops & windows
-ctrl + down -see all windows of current application
-ctrl + left/ right -move between desktops 
-ctrl + cmd + f -toggle full-screen mode for current application
-F3 -open mission control
-cmd + space -open spotlight
-cmd + option + space -open spotlight in finder
-cmd + t -open new tab
-cmd + w -close current tab
-cmd + shift + t -reopen last closed tab
-cmd + l -focus address bar
-cmd + f -open find bar to search within the page
-cmd + arrow keys -scroll through page
-cmd + option + arrow keys -scroll one screen at time
-cmd + tab -cycle through open applications
-cmd + shift + tab -cycle through open applications in reverse
-cmd + option + tab -switch between windows of same application
-ctrl + c -terminate current process in terminal
-cmd + option + power button -put your Mac asleep
-cmd + control + power button -force restart your Mac (use only when necessary)
-cmd + option + esc -force quit application
-cmd + option + d -show or hide dock
-cmd + shift + 4 -take screenshot of selected area
-cmd + shift + 5 -open screenshot utility
-cmd + delete -move selected item to trash
-cmd + shift + delete -empty trash
-cmd + option + delete -immediately delete selected item without moving it to trash
-cmd + I -get information about selected item
-cmd + shift + n -create new folder
-cmd + option + v -move copied file (cut-paste equivalent)
-cmd + left arrow/right arrow -move cursor to the beginning/end of line
-cmd + up arrow/down arrow -move cursor to beginning/end of document
-option + left arrow/right arrow -move cursor word by word
-shift + arrow keys -select text character by character or line by line
-cmd + c -copy selected text
-cmd + v -paste copied text
-cmd + x -cut selected text
-cmd + z -undo last action
-cmd + shift + z -redo last action
-cmd + a -select all text or items


Server-less computing bill goes parabolic:
-avoiding server less tax
-server that scales automatically 
-all big clouds offer server-less functions
-bandwidth CPU & gigabytes hours
-getting bill explosion due to DDOS attack
-every developer should know how their pricing scale
-every developer should have self hosted backup plan
-ideally you need to containerised that using docker to launch anywhere


[storage (hard disk drive HDD) & (solid state drive SSD)] <-------> RAM (data buffer) <-------> network



Monitoring home server:
-wife's shows isn't on Plex but has previously aired, which usually means my VPN has dropped out
-pushovers
-Nagios
-NEMS if you're running it on a Raspberry Pi - works really well for small/cheap setups.
-only use slack for various monitoring/logs webhooks so would be easy to switch over if there's any benefit
-discord webhook
-I set up a few basics notifications (like disk space low
-monitoring is important in web server it becomes important
-search engines down rank your search appearances if your site reliability is inconsistent
-commands -top
	  -vmstat
	  -free 
	  -iostat
	  -netstat
	  -iotop
	  -htop
	  -atop
	  -nmon
	  -iftop
-tools -hetrix
       -Netdata
       -pttg
       -Prtg
-ssh
-zpool status -v
-htop
-df -h
-Observium is pretty cool if you want to setup an snmp server, Not the best for mobile alerts but can give you some info on what's going on with your home servers
-Librenms with nagios plugins
-Zabbix
- front idrac lcd when it turns orange.
-servers enough to know they either work or don't. I don't see the need for a mobile monitoring setup to fill an OCD void or flex to others
-home assistant + mqtt for all kinds of stuff. I have alerts setup for when services go down, VPN goes down, any VM disk usage goes about 95%, etc. The nice part of using a system like this is that everything is logged and it's completely customizable. You do need to be a little savvy though.
-OMV 6 dashboard. If anything is running slow or looks off there I'll ssh in and check htop. Used netdata for a while but that used a decent amount of resources
-TrueNAS has native telegram notifications
pushover but also recently found gotify. It's an open source and self hosted solution that I've found works just as well. Netdata has gotify integration built in too. I also use it for notifications from uptime-kuma which other comments have mentioned.
-


Hak5 USB rubber ducky coast 70$, but actually, u can make a one at ur home for less than 5$. Like that, u can make pretty much good stuff at ur home, and + point is that most of the source codes and circuit diagrams are freely open on the internet

P4wnP1 ALOA with LED, Pwnagotchi, Pi Zero/Zero 2 with Kali, Raspberry Pi Pico bad USB, Attiny85 bad USB, ESP32 marauder, Nethunter on old phone

Flipper zero

Pwnagotchi

Bashbunny

USB rubber ducky

OMG cable

RPI all the way! It is very useful. If OP does decide to quit hacking for any reason, an RPi can still be used for home automation or a server etc

port forwarding does open your network to vulnerabilities, so it’s important to have a secure web app

However, I use tools like Ngrok instead of port forwarding


double compile" remotely from his flip phone.
Double compiling is real
If you're writing LaTeX. Sometimes you even need to triple compile if you're using long tables
Not exactly -- you might have to run the compiler multiple times on the same full document to resolve bibliography/references and other related things.
twice is enough, but it depends on the number of intermediary files created or changed during a compilation. The compiler generates those files for things like table of contents and footnotes.
irst pass usually replaces things like the table of contents or references with placeholders. That way the layout is the same for all passes and the second pass replaces those placeholder values with the required content.
it is possible that the layout of the documenthas changed in this second pass, making things like the table of vontents inaccurate. So you needa 3rd pass.
Triple-compiling comes up if you want to do repeatable bootstrapping of a new compiler. I have only seen this in Gentoo instructions, so... take that as you will for practical use.
Compile your new compiler, using your old one. Version (1) is going to be less optimal, because you're missing the new features, because it was compiled with an old compiler.
Compiler your new compiler, using compiler (1). This will be a nice new fancy one, compiled with all the new goodies. Version (2) is the good one.
Compile you new compiler, using compiler (2). The resulting version (3) should be bit-identical to version (2), because both were compiled with the new version. If it's not, we have some kind of issue.
Venture.
OSI model layers, IPv4, IPv7, the birth of the internet.
null hypothesis, travelling salesman, imaginary numbers, Fermet's last theorem
Bloody Monday
Shoujo-tachi wa Kouya wo Mezasu 


pre-existing partitions
Even these old machines could be completely factory restored by pressing command + r during boot if you had an internet connection, with a blank drive from apple.
type of firmware you are talking about would be OS specific. ie the firmware for OSX is not going to work with any flavour of linux.
Also distros have built in tools to identify hardware that not working, and there are guides online to get them working, but they are distro specific. ie mhwd in manjaro. lspci is also useful to identify devices without drivers, and using that information to list hardware identifiers to find a driver.
firmware for older macs is more available than newer. My recent experience is with newer (intel) macs
various WiFi chips, the macOS drivers and the Linux drivers are somewhat simila
inux drivers are specifically designed to work with the same firmware as used on macOS. Frequently, the firmware running on the chip is built using proprietary tools of the device vendor. In this case it would be quite difficult for the Linux community to generate new firmware, in cases where the device vendor was not willing to do that themselves.
Linux in it's own partition on a silicon mac is tricky
reverse engineering the API to the silicon mac GPU and giving Linux higher performance graphics than macOS on a silicon mac
pple's view actually makes more sense to me- keep everything in a disk partition, no free space outside of a partition, yet you can easily manipulate partitions in their GUI. Unfortunately, Linux installers were designed for Microsoft (or bare) systems, where it is relatively easy to create free space but not so easy to keep track of it, so extra steps on Apple for Linux
Microsoft and Apple have different views on disk partitioning 


Termux:
-sudo apt update (system is upto date with latest security patches & updates)
-sudo apt upgrade 
-mkdir & rmdir
-everything is similar to linux
-pkg update
-pkg upgrade
-pkg install package_name
-pkg uninstall package_name
-pkg list-installed
-pkg search search_term
-pkg show package_name
-termux-help
-termux-setup-storage
-termux-open-url https://example.com
-termux-microphone-record -d 10 output.wav
-termux-camera-photo -c 0 photo.jpg
-ip addr show
-ping google.com
-wget https://example.com/file.zip
-curl -O https://example.com/file.zip
-pkg install openssh
-ssh user@host
-sshd
-df -h
-uname -a
-termux-battery-status
-termux-info
-ps
-kill process_id
-find /path/to/search -name "file_name"
-du -sh /path/to/directory
-reboots


Termux:
-Always download from F-droid
-different sessions are in termux that runs (1,2,3,4..)
-just like linux with some minute differences
-apt install termux-api
-termux-battery-status
-termux-call-logs
-android environment does not have linux FSH (file system hierarchy)
-pkg install vi
-install tbomb
-install red hawk
-install zphisher
-install seeker
-install tool-x
-install metasploit
-install proot
-minimum 2-4 GB RAM
-more than 2GB of free internal storage space
-install hashcat
-install termux-tools
-install john
-free & open source terminal emulator & allows running linux environment in android 
-termux-setup-storage
-install curl
-install git
-install nmap
-install apache2
-pkg install python -y
-pkg install python2 -y
-pkg install python3 -y
-install ruby -y
-install perl
-install wget
-pwd
-echo $0
-cat > file.txt
-stat file.txt
-hostname
-apt list
-apt search python
-apt show tsduck-python
-apt show apache2
-apt remove ...
-apt reinstall apache2
-pkg install w3m
-w3m www.google.com
-install zip
-termux-change-repo


Mapscii
Cybermap
Digitalattackmap
securitycenter
threatmap


Building the $1,000,000 Computer:
-


Find info on phone numbers:
-phoneinforga tool runs on nay linux distro
-using docker & copy pasting command in google cloud console
-entering you phone number based on country
-


How internet works:
-internet is not bubble cloud even in new age of cloud computing
-its wires underground
-usually finer optic & copper 
-server is special computer connected directly to wire
-web pages are on that servers hard drives
-our home computer is not directly to internet
-computer connected to ISP (connected directly to wire)
-computer break downs information (picture, text) into smaller pieces (packets)
-everything is connected to each on internet & has unique IP address


Cool websites:
-hidden wiki -offers links to different websites on dark web
-onionlinks -catalog of working dark web websites
-duckduckgo -dark web search engine, doesn't share any personal information
-tunnels
-archive.today -time capsule of webpages
-deep web radio -dark web digital radio station
-imperial library -vast range of digital books
-sci-hub -all research work free, 88 million research documents
-wasabi wallet -free & open source 
-hidden wallet 
-secure drop -place where whistleblower & journalism meets
-comic book library
-keybase -effective messaging tool
-zerobin -sending encrypted messages over dark web


[social vulnerability index]


Installing kali linux:
-rootless installation on android phone
-installing termux 
-wget -O install-nethunter-termux https://offs.ec/2MceZWr
-chmod -x install-nethunter-termux
-./install-nethunter-termux
-nh 
-nmap kali.org
-exit
-nethunter kex passwd
-nethunter kex
-installing nethunter store
-search for kex
-open terminal on kali linux
-nmap kali.org
-nh
-cd /
-ls
-cd bin
-cd ..
-ls
-nh -r
-echo $0


Things to include in Readme.md file of project:
-overview
-installation
-usage (how to start & screenshots)
-options (controls & different features)
-future work
-licence 
-contributing
-requirements
-some useful links & hyperlinks
-features
-dependency


[Linear regression because no one has been fired for using it and it's easy to explain]
[Logistic regression because it's super fast, very easy to explain as well]
[Random Forest is just a name for a specific way of building an ensemble of Decision Trees. Boosting is an ensemble technique]
[Logistic regression and xgboost cover almost all of my classification needs]
[https://peerj.com/preprints/3190.pdf]
[ARIMA and Prophet]
[TBATS & ETS]


Mr Robot:
-
-common social engineering techniques -phishing, spear phishing, pretexting, baiting, quid pro quo, 
 vishing, tailgating, hoaxes, identify fraud, invoice scam, credential harvesting, watering hole 
 attack, typo squatting URL hijacking, hybrid warfare, dumpster diving, farming, pretending
-havibeenpwned.com
-password-hacking -when computer boots into recovery mode, it allows to open notepad
	          -rename sticky keys exe & make copy of command prompt in its place
	          -when you restart, press shift 5 times & since you’re not logged in yet, cmd will 	
                   launch with system privileges
	          -command (net user [x] *) for resetting password
	          -images you can load onto USB drive that will boot up & give you password
	          -trick to change the disability program in system32 to cmd.exe using kali 
	          -booted into safe mode with command prompt & managed to escalate to root  
		   privileges & change password
	          -konboot tool for bypassing windows & mac passwords
-deep-sound -audio converter tool, hide all of files on everyone he’s hacked—as well as his own old 	
	    -WAV & FLAC audio files 
	    -real files are encrypted & password protected
	    -steganography, art of concealing information within plain sight
-proton-mail -browser-based email service built at CERN research facility (one where the World Wide 
	      web was born)
	     -end-to-end encryption
	     -no IP logging
	     -even lets you set expiration dates for your emails, they’ll self-destruct (provided 
	      recipient hasn’t made copy of them, that is)
	     -free, though there’s wait list for invitations to create account 
	     -beta versions of iOS & Android mobile apps were just announced
-raspberry-pi -tiny & inexpensive computer that helps you learn programming & build digital toys
	     -ham & fm pirate radio & build antenna make pirate radio station
	     -used to gain remote access to HVAC systems
	     -raise temperature in evil corp’s storage room where tape backups are stored
-tastic RFID thief -long-range radio frequency identification (RFID) reader that saves score on 
                    microSD card as text file & clone badge later
		  -completely portable & fits neatly into messenger bag or briefcase
-RSA secureID -two-factor authentication can definitely foil your average fraudster’s plans 
	     -25,000 actual organisations worldwide & allsafe
	     -cybersecurity firm where Elliot works, uses RSA SecureID
	     -two-factor authentication adds layer of security to company’s protected resources by 	
              requiring users to not only enter their RSA SecurID pin, ne-time password generated 	
	      within app—which lasts only 60 seconds
	     -texted him large MMS files to try to drain some of his boss’ battery
	     -snagged the phone to enter that temporary authentication code at end of password with 
	      nary second to spare
-kali linux -penetration testing & security auditing
	    -cracking Wi-Fi passwords, bypassing anti-virus software, and testing security
	     vulnerabilities on your network
-metasploit  -exploit development & delivery system that allows users to create & execute
	      exploits, typically for penetration testing
	     -reduces hackers time because they don’t have to learn new tool each time they want to 
	      run exploit
-meterpreter is just one of several hundred payloads that can be used within Metasploit
		-esides entirely in memory and writes nothing to disk, but can give an attacker control of their target’s system and parts of the network
		-open-source pen testing framework designed specifically for simulating social engineering attacks, such as phishing, spear phishing, credential harvesting
		-used SMS spoofing from within SET, a module that’s unavailable on the newer versions, but Mr. Robot tech adviser Michael Bazzell said that it’s possible for users to add that package back in within the new version
-flexiSPY -secretly installs mobile monitoring software on lover’s Android phone
	  -after gaining root privilege by using SuperSU 
	  -installs flexiSPY & monitor other people device activities with online portal
	  -doesn’t recover past data, show anything still stored on their phone’s memory or SIM
	   card
	  -hides SuperSU as part of its installation
-ignoring remote
-local backup
-law enforcement hotline
-complex auditory space
-barricade network IP DAT file
-access to root directory
-writing rootlet
-placing femtocell
-no benefit of microwaving a RAM module to "cover" your tracks
-microwave a computer part that holds non-persistent data
-RAM is volatile memory, it does not mean memory "evaporate" instantly when the system is powered 
 off 
-memory will slowly fade away after interruption of power supply for few seconds to even few minutes
-use liquid nitrogen or cooling technique to slow down this "evaporation" process & recover memory
-cool boot attack
-finding flaws (there are always flaws)
-FTP server & AS400
-DDOS attack 
-reconfigure DNS
-rebooting servers
-encrypted files
-attack coming from everywhere USA, Finland, etc
-load sharing
-root kit sitting inside server
-malicious code
-fundamentally invisible
-virus replicate itself
-putting  network backup
-infected server running
-boot sequence
-eta before runs server
-backup server
-redirect traffic & switch DNS
-hackers loves attention they don't do DDOS for no reason
-personal cell tower
-logic bomb
-systematically formatting all servers
-reverse engineering, protocol exploitation
-server side key used to verify game 
-code injection
-handler function
-100 MMS files
-hack registrar & change name server
-few spots with finer connection
-tor Browser to keep server anonymous to anyone
-onion rooting protocol
-100 terabytes pornographies
-afk (away from keyboard)
-servers down & wipe all data
-vulnerability 
-vulnerable FTP server & AS400 
-encrypted database on old server
-penetrate data security facility
-raspberry pie to climate control system
-heavily networked
-virus scan dated servers & security software that runs now windows 98
-man in middle 
-bad configuration
-getting root access to NSA servers
-prevent cross site scripting
-monitor for DDoS attacks, emergency database rollbacks, & faulty transaction handlings
-Hacks -USB stick theft 
       -SQL injection -exploits a vulnerability in website
		     -input malicious SQL code into website's input fields, allowing them to access 		
                       & manipulate website’s database
       -server sabotage -make them perform poorly during live demo
		       -exploiting vulnerabilities in network infrastructure & causing DOS like 		
			condition
       -MITM attack -intercept & alter messages sent through his own chat app
       -firmware exploit -allows them to access & control servers remotely
       -smart contract vulnerability -exploits vulnerability in smart contract code of 	
				     cryptocurrency exchange to siphon off funds 
       -phishing attack -phishing attack to gain access to person's email
		       -sends fake email to tricks person into entering his login credentials into 		
			fraudulent website
       -hardware exploit -planting device in servers that allows them to manipulate network traffic
			-device acts as a hardware backdoor, getting control over server operations
       -social engineering -manipulate the voting process for new CEO election
       -DDoS attack -bring down the dealer's site
		   -exploits weak security (using same password across sites) gain access to 
		    private accounts
       -physical penetration -rubber ducky USB device to inject a root-kit into servers
       -bluetooth exploit -gain access of personal data
       -stingray device -use stingray device to intercept & monitor FBI communications, allowing
                         them to gather information on FBI activities
       -zero-day exploit -install root-kit on servers, getting access to network without detection
       -supply chain attack -modifies firmware of device to install backdoor, allowing monitor &
                             expose their activities
       -ransomware -encrypts data with ransomware, inaccessible without decryption key
       -malware injection -injects malware into network & orchestrates physical attack by placing 
                           explosives in storage facilities & destroy paper records


Reduce file size of text or code file:
-trim excess spaces
-sed -i 's/[ \t]*$//' filename (Remove trailing spaces)
-sed '/^$/d' filename (Remove empty lines)
-gzip filename        # Compress with gzip
-bzip2 filename       # Compress with bzip2
-xz filename          # Compress with xz
-use tabs for indentation
-Reduce Encoding Size
-iconv -f utf-32 -t utf-8 filename -o outputfile (file contains text in a less efficient encoding (e.g., UTF-32), convert it to a more space-efficient encoding like UTF-8.) 
-sed '/^#/d' filename.py > output.py (Remove Comments)
-uglifyjs input.js -o output.js --comments false
-jq -c '.' input.json > output.json  # Compact JSON output
-sort filename | uniq > output.txt
-split -b 1M filename part_  # Split into 1MB chunks
-Use Optimized Formats: If your file contains images or other media, ensure they are in optimized formats like WebP for images or compressed formats for audio and video. 


Viruses vs worms:
-virus -standalone & free malicious program starts harming/ damaging system
       -host must initial infection, only propagate when device infected program is run
       -corrupt, modify, remove, change data/ software on target device
       -require host file to infect
       -needs to be added with email, message, internet
       -corrupt files like .exe & .sys
       -can infect files
       -high latency
       -sometimes virus must leverage some security vulnerability in your browser (not kept computer 
        upto date with security patches)
-worms -malicious program replicate itself, spread into other devices programs, corrupt device, files
       -don't even need to execute, impacts automatically when get into device
       -degrade system, resources, burden system, sluggish processing, system crash, network failure
       -spread more slowly & changes system's data
       -consume too much system resources or N/W bandwidth
       -can't infect files
       -stand alone program
       -can't modify any stored program
       -lower latency


Trojan:
-pretends to be legitimate program but in fact malicious


Rootkit:
-allows user to maintain privileged access within system without being detected


Adware:
-unwanted to malicious advertising installed on endpoint
-non self replicating
-produces copies of itself using host file as carrier
-can't control PC remotely
-detected & deleted using anti-virus & anti-adware software


Spyware:
-non self replicating
-doesn't produce copies of itself using host file as carrier (independent program)
-control PC remotely
-detected & deleted 


Lights:
-input (110//220V 50Hz/60Hz)
-output power (80 watt)
-luminance (7200 LM)
-LED bulbs (480 Pcs)
-adjustment range, colour temperature (3200K-5600K), flash index (RA-97)
-battery (mAh), charger (watt), adapter (watt)


Speakers:
-sound bar with wireless subwoofer for extra deep bass
-audio wattage -220 Watts
-battery type -alkaline
-power source -corded electric
-predefined equlaiser
-compatible with TV remote
-dolby digital audio
-HDMI arc
-optical input
-smart standby mode


3D printers:
-RAISE 3D (RxP 2200) 
-software -idea-maker, Autodesk inventor
-create 2D sketches & 3d models on Autodesk inventor ----> create Code by using ideaMaker 3D software  
 ----> operate 3D printer ----> manufacture 3D model by printer
-ipt (inventor part), iam (inventor assembly, idw (inventor drawing), dwg (autoCAD drawing), ipj 
 (inventor project)
-FDM -fused deposition modelling
     -melting filament putting layer be layer
     -lower resolution & less smooth
-resin -umbrella term for multiple type of printing technology
       -using resin & hardening process, vat of UV curable resin used for each layer
       -as print moves along each layer formed by UV light until entire model is complete
       -toxic resin & wear gloves & clean with isopropyl alcohol
-filament spool holder
-types of filament -PETG (polyethylene terrephelate glycol), PLA (polylactic acid), ABS, nylon, carbon 
                    fibre, glass fibre, TPU, ninja flex, hips, wood fibre, dichromatic, water soluble,
                    metal 
-ender-3 printer & assemble all parts according to manual
-main board -brain of 3d printer, terminals for power coming, connectors for end stops, connectors for 
             stepper motor, connector for LCD, USB connector & SD card, microcontroller
-Bowden & direct drive
-display -temperature (hot end & nozzle), temperature (heated bed), x & y coordinates, FR (feed rate), 
          speed of printer moves, bar fill with timer
         -click > prepare > auto home (0,0)
         -disable steppers, preheat nozzle, cool down, bed levelling
         -click > temperature > bed (60 degree)
-.pdf, .doc, .jpeg, .png ----> driver ----> printer
-.stl (stereo lithography), .obj, .3mf ----> slicer (slices files) ---->  3d printer
-thingiverse, my mini factory
-cura ultimare (slicer)
-G-code -machine language tells 3D printer exactly how to move, extrude filament, build object layer by 
         layer
        -consists of commands control printer's movement, temperature, fan speed
        -generated by slicing software (Cura, PrusaSlicer) from 3D model (STL file)
        -G1 X100 Y100 Z10 F1500 ---> move to coordinates (100,100,10) at 1500 mm/min
        -M104 S210 ---> set nozzle temperature to 210°C
        -M140 S60 ---> set heated bed temperature to 60°C
        -G92 E0 ---> reset extruder position
-STL -contains geometry (shape) of 3D object but no colour, material, scale information
     -created using 3D modeling software (Blender, Fusion 360, or Tinkercad)
-components -print bed -surface where object is printed, may need levelling
            -extruder -melts & deposits filament to create layers
            -filament spool -supplies material (PLA, ABS)
            -control panel/screen -interface to set parameters or start/stop prints
            -frame & axis system -guides nozzle & print bed for precise movement (X, Y, Z axes)
-preheat nozzle (usually around 200°C for PLA) ---> insert filament into extruder ---> feed it until 
 melted plastic flows through nozzle levelling bed
-place sheet of paper b/w nozzle & bed to check distance (slight resistance is ideal)
-preparing 3D Model -3D Modeling Software
                    -use CAD software (Tinkercad, Fusion 360, Blender to design objects)
                    -slicing software -convert model into printable format using slicers (Cura, 
                                       PrusaSlicer, or Simplify3D)
                    -input settings like layer height, infill density & print speed
                    -export file as G-code to USB, SD card, directly to printer
-starting print -insert storage device or connect via USB/Wi-Fi
                -select file from printer menu
                -ensure bed & extruder are heated
                -start print & monitor 1st layer to ensure adhesion
-monitoring & adjusting -1st layer check -ensure filament sticks well, adjust bed levelling if needed
-stringing/ blobs -adjust retraction settings
-layer shifts -tighten belts or check model for errors
-post-processing -remove print -let it cool before detaching from bed
                 -clean print -trim excess material using tools like pliers or sandpaper
                 -assembly/ finishing -multi-part prints, assemble them or apply paint/finishing 
                                       touches
-maintenance -clean nozzle & print bed regularly
             -check belts & screws for wear
             -store filament in dry environment to prevent moisture absorption
             -poor bed adhesion -use glue stick or adhesive spray on print bed
             -nozzle clogs -heat & clear blockages with cleaning needle
             -warping -adjust bed temperature or use enclosure for temperature control
-bed levelling -gap/ overlap b/w extruded line (gaps, just touching (perfect), too close)


Math behind most 3d games:
-creating object using many triangles ---> accurate 2D representation 
-light ------> window/screen (square = pixel) -----> eye
-ray tracing -capable of creating hyper realistic images
-CPU based ray tracing is around for long time extensively within movies & animation (slow --> single 
 frame toy films takes 60-160 hours to render)
-object order rendering (much faster) -draw each object 1 after other (much better approach for GPUs)
-find location of each projected position within vertex shader by calculating by calculating line-plane 
 intersection
-orthographic projection -generalisation of view volume allows to specify any dimension & location
                         -maintain overall shape of view volume & keep view direction & orientation fix
                         -defined by 6 bounding planes (left-right on x-axis, top-bottom on y-axis, 
                          near-far on z-axis)
-converting orthographic view volume to canonical view volume ----> 
-perspective transformation, square frustum 
-


Maths behind game development:
-linear algebra, basic calculus, matrix, vectors, multi-dimensional arrays
-be comfortable with reading maths notation
-sfa5#48@j
-


Maths in ML & AI:
-linear equations & functions -models built using functions
                              -linear regression is just solving equation of line
                              -slope intercept form, used in linear regression (m = weights, b = bias)
                              -point slope form, standard form
Solving Simultaneous Equations:
Substitution & Elimination
Matrix Inversion (used in ML optimisation)
🔥 Machine Learning Example:

Linear Regression: Finding 
𝑚
m and 
𝑏
b to fit data points.
Neural Networks: Each neuron is just a linear equation!
📌 2. Matrices & Vectors (Core of ML!)
Machine Learning Relevance:

Every ML model is just matrix operations.
Data is stored as vectors and transformed using matrices.
✅ Must-Know Concepts:

Matrix Addition & Multiplication
Dot Product (for Neural Networks)
𝑎
⋅
𝑏
=
∑
𝑎
𝑖
𝑏
𝑖
a⋅b=∑a 
i
​
 b 
i
​
 
Matrix Multiplication
𝐶
=
𝐴
𝐵
C=AB
(Used in Deep Learning, PCA, and Transformations)
Identity Matrix 
𝐼
I (Like multiplying by 1, important for inverses)
Matrix Inverse 
𝐴
−
1
A 
−1
  (Used in optimization)
Transpose 
𝐴
𝑇
A 
T
  (Useful in gradient calculations)
Determinant 
det
⁡
(
𝐴
)
det(A) (Checks if a matrix is invertible)
🔥 Machine Learning Example:

Deep Learning → Every layer in a Neural Network is a matrix multiplication!
Principal Component Analysis (PCA) → Uses matrix operations to reduce dimensions.
📌 3. Eigenvalues & Eigenvectors (For Data Transformations & PCA)
Machine Learning Relevance:

Dimensionality Reduction → PCA, SVD, LDA
Feature Extraction → Finding patterns in data
Markov Chains & Graphs → Google PageRank
✅ Must-Know Concepts:

Eigenvalue Equation:
𝐴
𝑣
=
𝜆
𝑣
Av=λv
where 
𝐴
A is a matrix, 
𝑣
v is an eigenvector, and 
𝜆
λ is an eigenvalue.
How to compute eigenvalues:
det
⁡
(
𝐴
−
𝜆
𝐼
)
=
0
det(A−λI)=0
Eigenvectors help identify principal components in PCA.
🔥 Machine Learning Example:

PCA (Principal Component Analysis) → Reducing high-dimensional data.
Google’s PageRank Algorithm → Uses eigenvalues of link matrices.
📌 4. Systems of Equations & Linear Independence
Machine Learning Relevance:

Used in solving optimization problems in ML.
Determines whether equations have unique solutions.
✅ Must-Know Concepts:

Gaussian Elimination → Systematically solving equations using matrices.
Rank of a Matrix → Determines if a system has unique or infinite solutions.
Linear Independence → Essential in Feature Selection (removing redundant data).
🔥 Machine Learning Example:

Feature Selection → Removing redundant features that don’t add new info.
Solving for weights in linear regression → Uses systems of equations.
📌 5. Polynomials & Non-Linear Equations
Machine Learning Relevance:

Many ML models (like Neural Networks & Support Vector Machines) are non-linear.
Used in Polynomial Regression & Activation Functions.
✅ Must-Know Concepts:

Polynomial Functions:
𝑦
=
𝑎
𝑛
𝑥
𝑛
+
𝑎
𝑛
−
1
𝑥
𝑛
−
1
+
⋯
+
𝑎
1
𝑥
+
𝑎
0
y=a 
n
​
 x 
n
 +a 
n−1
​
 x 
n−1
 +⋯+a 
1
​
 x+a 
0
​
 
Factorization & Roots of Polynomials
Quadratic Formula (Important for optimization)
𝑥
=
−
𝑏
±
𝑏
2
−
4
𝑎
𝑐
2
𝑎
x= 
2a
−b± 
b 
2
 −4ac
​
 
​
 
Taylor Series Expansion → Approximates non-linear functions (used in Neural Networks).
🔥 Machine Learning Example:

Polynomial Regression → Used when data isn't linear.
Activation Functions in Neural Networks use polynomial approximations.
📌 6. Logarithms & Exponentials (Essential for ML Models!)
Machine Learning Relevance:

Used in Gradient Descent, Loss Functions, and Probability Models.
✅ Must-Know Concepts:

Logarithm Rules:
log
⁡
(
𝑎
𝑏
)
=
log
⁡
𝑎
+
log
⁡
𝑏
log(ab)=loga+logb
log
⁡
(
𝑎
𝑏
)
=
𝑏
log
⁡
𝑎
log(a 
b
 )=bloga
Exponential Functions:
𝑒
𝑥
e 
x
  → Basis of sigmoid & softmax functions in ML.
Natural Log (ln) → Used in log-loss function in classification models.
🔥 Machine Learning Example:

Logistic Regression → Uses the log function to model probabilities.
Softmax Function → Uses exponentials to convert scores into probabilities.
📌 7. Probability & Statistics (Used in All ML Models!)
Machine Learning Relevance:

ML models make predictions based on probability.
Used in Bayesian models, Gaussian distributions, and Hidden Markov Models.
✅ Must-Know Concepts:

Basic Probability:
𝑃
(
𝐴
∩
𝐵
)
=
𝑃
(
𝐴
)
𝑃
(
𝐵
∣
𝐴
)
P(A∩B)=P(A)P(B∣A) (Bayes' Theorem)
Gaussian (Normal) Distribution:
𝑓
(
𝑥
)
=
1
𝜎
2
𝜋
𝑒
−
(
𝑥
−
𝜇
)
2
2
𝜎
2
f(x)= 
σ 
2π
​
 
1
​
 e 
− 
2σ 
2
 
(x−μ) 
2
 
​
 
 
Variance & Standard Deviation: Measures data spread.
Covariance & Correlation: Measures relationships between variables.
🔥 Machine Learning Example:

Naive Bayes Classifier → Uses Bayes' Theorem for classification.
Gaussian Mixture Models (GMMs) → Used in unsupervised learning


Maths:
-do it --> if get wrong --> keep practising
-do it --> it get right --> keep practising
-visualisation is important but try to make picture in your head & don't just look picture
-arithmetic (basic math -addition, subtraction, multiplication, division)
                        -budgeting, shopping, cooking, splitting bills
                        -quick mental calculations (tipping in restaurant)
                        -estimating time, speed, distances while driving
                        -essential for all fields, finance, retail, business
-fractions, decimals & percentages -understanding discounts, interest rates, taxes
                                   -cooking & measuring ingredients
                                   -comparing loan offers and investments
                                   -banking, finance, stock market analysis, business analytics
-ratio & proportion -mixing ingredients while cooking
                    -scaling up/down blueprints in construction or 3D printing
                    -adjusting recipes or ingredient proportions
                    -engineering, architecture, chemistry, business pricing strategies
-algebra -If save $X per month, how long will it take to afford $Y phone?
         -business profit/loss calculations, managing personal finance equations
         -coding & programming, economics, engineering, AI development
-geometry -home design, furniture arrangement, space planning
          -understanding maps, navigation, GPS
          -sports strategies (basketball angles for shooting)
          -architecture, engineering, robotics, 3D animation, game development, physics
-trigonometry -calculating heights of buildings or trees using shadows
              -GPS & navigation systems use trigonometry to determine locations
              -engineering structures like bridges tunnels
              -civil engineering, aerospace engineering, game development, physics simulations
-calculus (differentiation & integration) -predicting rates of change (tracking population growth, 
                                           investment returns)
                                          -understanding acceleration, speed, motion in physics
                                          -fluid dynamics (how water flows in pipes
                                          -engineering, AI & ML, physics, data science, robotics
-probability & statistics -making informed decisions based on data (sports betting, weather forecasts)
                          -analysing risks in investments, insurance, business
                          -medical studies & experiments
                          -data science, machine learning, stock market analysis, actuarial science, AI
-matrices & linear algebra -computer graphics (video games & animation)
                           -encryption and cybersecurity (used for encoding messages)
                           -google’s pageRank algorithm for ranking search results
                           -computer science, robotics, AI, quantum computing, physics
-differential equations -used in physics to model how things change over time (heat transfer, wave 
                         motion)
                        -predicting population growth & climate change
                        -engineering, aerospace, physics, and biology
-complex numbers -electrical engineering to analyse circuits
                 -quantum mechanics & physics applications
                 -electrical engineering, physics, control systems, signal processing
-discrete mathematics & boolean algebra -logic gates in computers & digital circuits
                                        -decision-making in algorithms (AI & programming)
                                        -software engineering, cryptography, AI, cybersecurity
-graph theory -social media networks (people are connected)
              -shortest path algorithms (google maps, Uber, delivery services)
              -computer science, logistics, AI, telecommunications
-game theory -used in negotiations, economics, business strategies
             -predicting competitor behaviour in business
             -economics, AI, cybersecurity, military strategy
-Fourier transform -image & sound processing (used in MP3s, JPEGs, medical imaging like MRIs)
                   -noise reduction in audio signals
                   -signal processing, AI, medical imaging, telecommunications
-machine learning & AI mathematics -recommendation systems (Netflix, YouTube, Amazon)
                                   -fraud detection in banking
                                   -self-driving cars & facial recognition
                                   -AI, data science, robotics, cybersecurity
-hypergeometric series
-hardy Ramanujan number -12^3 + 1^3 = 1729
                        -10^3 + 9^3 = 1729


Maths in java:
-prime numbers -2,3,5,7,13
-property of modulus -(a + b) % m = ((a % m) + (b % m)) % m
                     -(a - b) % m = ((a % m) - (b % m) + m) % m
                     -(a * b) % m = ((a % m) * (b % m)) % m
                     -(a / b) % m = ((a % m) * (b^-1 % m)) % m


Smartphones:
–material used (glass, metal, plastic)
-IP Rating –water & dust resistance (IP68)
-foldable, hinge mechanism 
-screen Size –measured diagonally in inches (6.5)
-resolution –pixels (1080 × 2400)
-aspect ratio –ratio of width to height (20:9)
-pixel density (PPI) –pixels per inch, higher is sharper
-panel type –LCD, OLED, AMOLED, Super AMOLED, LTPO
-refresh rate –60Hz, 120Hz, 144Hz
-touch sampling rate –affects touch response speed
-brightness (nits) –peak brightness for outdoor visibility
-HDR support –HDR10, HDR10+, dolby vision
-chipset (SoC) –Snapdragon, MediaTek, Exynos, Apple A-series
-architecture –ARM, x86
-cores –number of CPU cores (Dual-Core, Octa-Core)
-clock speed –GHz, speed of CPU (3.2 GHz)
-fabrication process –nanometers (nm), lower is better (4nm)
-GPU (graphics processing unit) –Adreno, Mali, Apple GPU
-AI engine –used for camera, battery, system optimisations
-RAM (random access memory) –4GB, 8GB, 16GB, 24GB
-storage type – eMMC, UFS 2.1, UFS 3.1, UFS 4.0
-expandable storage –microSD slot availability
-virtual RAM –additional RAM using storage
-read/ write speed –affects app opening times
-Rear Camera Specs -megapixels (MP) –resolution (50MP, 108MP)
                   -sensor size –affects light capture (1/1.28")
                   -aperture (ƒ/) –controls light (ƒ/1.8, ƒ/2.2)
                   -lens type –wide, Ultra-Wide, telephoto, periscope, macro
                   -optical zoom –true zoom using lenses (5x optical)
                   -digital zoom –software-based zoom (100x)
                   -optical image stabilisation (OIS) –hardware stabilisation
                   -electronic image stabilisation (EIS) –software stabilisation
                   -pixel binning –combines pixels for better low-light shots
-front camera specs -selfie camera megapixels –32MP
                    -dual selfie camera –if 2 front cameras exist
                    -face unlock –2D or 3D facial recognition
-video recording -resolution –4K, 8K, 1080p
                 -frame rate (FPS) –30fps, 60fps, 120fps, 240fps
                 -slow motion –high FPS recording (960fps)
                 -HDR video –HDR10, Dolby vision
                 -pro mode video –manual controls for video
-battery -battery capacity –mAh (5000mAh)
         -charging speed –watts (W), 120W fast charging
         -charging type –wired (USB-C), wireless (Qi)
         -reverse wireless charging –charging other devices wirelessly
         -battery life –screen-on time & endurance rating
-connectivity -SIM type –nano-SIM, eSIM
              -network support –5G, 4G LTE, VoLTE, Wi-Fi calling
              -Wi-Fi version –Wi-Fi 6, Wi-Fi 6E, Wi-Fi 7
              -bluetooth version –4.2, 5.0, 5.3
              -NFC (near field communication) –used for payments
              -IR blaster –remote control functionality
              -satellite communication –SOS via satellite (iPhone 14)
-OS version –android 14, iOS 17
-custom UI –one UI, MIUI, OxygenOS, ColorOS
-software updates – Years of OS & security updates
-audio & multimedia -speakers –mono or stereo speakers
                    -3.5mm jack –available or not
                    -hi-Res audio –support for high-quality sound
                    -Dolby atmos –surround sound support
                    -haptic feedback –vibration motor quality
-security & authentication -fingerprint sensor –optical, ultrasonic, rear-mounted, side-mounted
                           -face recognition – 2D (software-based) or 3D (hardware-based)
                           -under-display scanner –optical or ultrasonic
-sensors -accelerometer –detects movement
         -gyroscope –used for gaming & VR
         -proximity Sensor –turns off screen near ear
         -ambient Light Sensor –adjusts screen brightness
         -magnetometer –used for compass functionality
         -barometer –measures atmospheric pressure
-cooling & performance -vapour chamber cooling –advanced cooling for gaming
                       -graphene cooling –uses graphene sheets to cool device
                       -game mode –optimisations for gaming performance
-stylus support –S-pen, apple pencil
-gaming features –trigger buttons, game turbo mode
-foldable screen type –UTG (ultra-thin glass) or plastic OLED


Imax vs 4DX vs ICE:
-ICE -immersive cinema experience goes beyond screen experience
     -270 degree view 
     -5 non-reflective LED panels on each side on auditorium
     -standard screen size with additional side panels to extend visuals
     -high-quality visuals with enhanced depth & clarity
     -3D immersive sound system (Dolby Atmos)
-Imax -biggest theatre screens of 75-117 feets tall
      -same experience from any corner of cinema hall
      -curved massive screens with crystal-clear visuals & enhanced audio
      -extra-large, curved, floor-to-ceiling screens
      -dual laser projectors with upto 4K/8K resolution for ultra-clear images
      -taller aspect ratio (1.43:1 or 1.90:1), showing more of filmed image
      -high-precision, multi-channel surround sound (12-channel audio system)
-4DX -4 dimensional real effect
     -actually living in that movie
     -multi-sensory signature effect
     -motion seats & environmental effects (wind, water, scent, smoke)
     -regular size (compared to IMAX), but effects dominate experience
     -motion, vibration, mist, rain, snow, fog, scents, lightning synchronised with movie scenes
     -3D surround sound complements physical effects


Software for making movies:
-scriptwriting -KIT scenarist
-storyboarding -storyboarder
-video Editing -Olive (Davinci resolve free)
-VFX & CGI -natron & blender
-sound editing -ardour & audacity
-subtitles -aegisub
-publishing -peertube, youtube


Hidden linux commands:
-watch
-watch -W ttyv1 (ssh into my BSD box and want a command to run in the foreground, but persist when I 
 disconnect (usually involuntarily)
-mktemp, mkfifo
-pushd / popd
-chromium --user-data-dir="$(mktemp -d)" (spawn clean browser sessions to test stuff)
-mypassword=12335
-mypassword=12344
-xargs
-subshells
-git branch -d $(git branch | grep feature)
-ps aux | grep (application you're trying to kill')
-pgrep or killall
-pkill
-pulling PIDs out and killing those directly
-sudo dnf upgrade && flatpak update
-install -d -o user -g group -m 750 mydir
-udisksctl to have them in /media. Very useful with Wine or Dosbox-x
-!!, !:0, !a_command_typed_before... are useful
-grep, awk, sed, find, xarg, vim, rsync
-View the Linux version	uname -a
-Find the PHP version	php -i
-Search for PHP settings location	find / -name "php.ini"
-php -i | grep php.ini
-Restart Apache	/etc/init.d/apache2 restart
-Start MySQL	service mysqld start
-Check if MySQL is running	ps afux | grep -i mysql
-Stop MySQL	service mysqld stop
-Access admin rights	sudo -i
-Clean APT cache
-(check size, clean, check size)	du -sh /var/cache/apt/archives
-sudo apt-get clean
-du -sh /var/cache/apt/archives
-Remove old kernels	sudo apt-get autoremove --purge
-Uninstall unused apps	sudo apt-get remove package-name1
-Remove no longer required packages	sudo apt-get autoremove
-ac
-delv
-dir
-dos2unix
-fold
-zipcloak


Hacking in shows:
-NSA to keep sneaking backdoors into the kernel
-secret Cryptocurrency farming 
-black hat & white hat & grey hat
-phone call confirmation when transfer is bigger than 7 digits for
-SMS 2FA
-have many backups and divided data all over the place as to not have a single point of failure.


CLI tools for Android development:
-sdkmanager "platform-tools" "build-tools;30.0.3" "platforms;android-30" 
-avdmanager create avd -n testDevice -k "system-images;android-30;google_apis;x86_64"
-emulator -avd testDevice
-adb devices
-adb install myapp.apk
-./gradlew build
-./gradlew assembleDebug
-./gradlew test
-fastlane deploy
-buck build :app
-proguard @myconfig.pro
-javac MyClass.java
-keytool -genkey -v -keystore my-release-key.keystore -alias alias_name -keyalg RSA -keysize 2048 -validity 10000
-./gradlew lint
-curl -O https://example.com/file.zip
-firebase init
-firebase deploy


[Oh My Zsh, Powerlevel10k, Python, JavaScript scripts, Docker, host web servers]
[ttsmp3]


https://www.freecodecamp.org/news/command-line-for-beginners/
https://www.reddit.com/r/mac/comments/snyx5y/macos_terminal_commands/
https://ss64.com/


Building Custom PC:
-CPU -core (i5,i7,i9), AMD (Ryzen 5,7,9)
     -performance (number of cores, threads, clock speed)
     -compatibility with your motherboard (socket type)
-GPU -NVIDIA (RTX 3060, 3070), AMD (RX 6700, RX 6800)
     -performance (CUDA cores, VRAM size)
     -monitor resolution (1080p, 1440p, 4K) & refresh rates
-RAM -DDR4, DDR5
     -16GB basic, 32GB for more demanding tasks like video editing, gaming, virtual machines)
-Storage (SSD/HDD) -SATA (slower) & M.2 NVMe (faster) 
-PSU -require 500W to 750W
-Case -form factor -ensure case matches with motherboard size (ATX, Micro-ATX, Mini-ITX)
-CPU cooler, case fans


Hacking hardware:
-flipper zero, rubber ducky, bash bunny, wifi nugget, deauther watch, OMG cable
-Wifi hacking -raspberry pi with Wi-Fi adapter that supports mon mode
	      -cool hacking hardware from stores like Hak5
	      -virtual-box to set up mini hacking home lab
	      -wifi pineapple (hacking into enterprise networks)
-key croc -key logger (plug & see what people are typing
-alfa Wi-Fi adapters (AWUS036ACH, AWUS036NHA) -used for Wi-Fi penetration testing with tools like 
                                               Aircrack-ng
                                              -supports monitor mode & packet injection
-pineapple mark VII (WiFi pineapple) -intercepts & manipulates Wi-Fi traffic
                                     -creates fake access points (evil twin attacks)
                                     -used by red teams to test network vulnerabilities
-ESP8266 & ESP32 -used for Wi-Fi deauth attacks, fake access points, IoT hacking
                 -run Deauther firmware to disconnect devices from networks
-flipper zero -multi-functional tool for Wi-Fi, RFID, NFC, infrared, GPIO hacking
              -scan Wi-Fi networks, replay IR signals, emulate NFC/RFID cards
-WiFi duck -USB device acts as wireless keystroke injector (like Rubber Ducky)
           -works over Wi-Fi to send automated payloads remotely
-LAN turtle -small USB device provides remote access to network
            -sniff network traffic, redirect connections, execute attacks
-shark jack (Hak5) -network auditing tool shaped like USB stick
                   -runs automated payloads to scan networks & steal credentials
-packet squirrel -works as MITM (man-in-middle) attack device
                 -intercept network traffic, sniff packets, capture credentials
-USB Armoury -Open-source USB cybersecurity platform
             -used for network packet capture & payload injection
-rubber ducky (Hak5) -looks like USB drive but acts as keyboard to execute pre-programmed keystrokes
                     -install backdoors, steal credentials, disable security
-OMG cable -USB charging cable secretly acts as hacking device
           -allows remote access to victim’s computer
-bash bunny -more powerful than rubber ducky, execute multi-stage payloads
            -used for network attacks, password stealing, backdoor installation
-USB kill -sends high-voltage power surges to destroy device’s USB port
          -used for testing hardware durability but destructive
-BadUSB -turns normal USB drive into hacking tool
        -execute scripts to steal data, create backdoors, disable security features
-keyGrabber USB -hardware key logger records all keystrokes from keyboard
                -used to capture passwords and login details
-Key-logger cable -normal USB cable but records all keystrokes typed on connected device
-screen crab -hardware screen capture tool records everything displayed on monitor
-Hak5 plunder bug -portable network tap intercept & capture network traffic over Ethernet
-Proxmark3 RDV4 -read, write, clone RFID/NFC access cards (like hotel key cards & employee badges)
                -used for penetration testing on access control systems
-ChameleonMini -emulate & clone NFC cards, used for card-based authentication bypassing
-flipper zero -scan, read, emulate RFID/NFC cards
-magic mifare cards -special cards allow rewriting & cloning of RFID/NFC data
-raspberry Pi (Hashcat) -used for brute-force attacks on passwords (Wi-Fi, hashes)
                        -supports GPU acceleration for faster cracking
-BitCracker -tool used on FPGAs & GPUs to crack BitLocker encrypted drives
-LAN tap pro -passive ethernet tap allows network monitoring without detection
-bus pirate -used to interact with & reverse-engineer hardware communication protocols
-JTAGulator -helps identify debug ports in electronic devices to extract firmware
-Pwnagotchi -AI-powered Wi-Fi hacking tool captures handshakes for cracking
-USB rubber ducky -execute automated brute-force password attacks
-GreatFET One -USB device used for hardware hacking & debugging embedded systems
-GlitchKit -used for voltage glitching attacks to bypass security on embedded devices
-BeagleBone black -used for hardware hacking, firmware extraction, debugging IoT devices
-OpenOCD (On-Chip debugging) -allows direct debugging & firmware extraction from microcontrollers
-bus pirate v4 -used for reverse-engineering, debugging electronic communication protocols (SPI, I2C, 
                UART)


Hacking phone:
-rooted my lg phone with a simple app i got online called towelroot, one button and that's it, then 
 installed supersu and had root access. Today phones are way more secure
-inserting an SD card with a RAT(remote access trojan) on it and installing it onto the phone as a 
 software update
-root access to install unsigned system updates and Wellock actually gains root access
-pre-loaded on a microSD card with unlocked boot-loader


Linux distro for gaming:
-Pop OS and Drauger OS
-Nobara
-OpenSUSE
-Fedora Kinoite 38
-No matter what distro you go with, be sure to follow guides to install drivers for your respective distro
-mint
-Garuda Dragonized Gaming edition
-more FPS in Apex Legends
-nvidia is worse for linux and amd is the better option for linux 


-mc pigz htop bmon mtr iotop
-rclone ffmpeg pdftk
-Btop cowsay nano cd Lsd Tldr Pip Man
-asdf
-noti
-Byobu
-tabby
-micro
-Rsync
Tar
Lsof
Ip
Iptables
Netstat
-Smb
Fdisk
uniq
-tcpdump
-dcfldd
-foremost
-pgrep
-pkill
-Rsync
-hexdump


-/sbin/ifconfig eth0| grep 'inet addr:'
-install atool you will have standard syntax to handle all types of archives.
-als archive.format (list files in archive)
-aunpack , to extract any format.
-rm -r dir -Removes directory (and all internal directories recursively) rm -r / -Removes entire contents of hard disk...


App development:
-exclusively for iOS -swift
-exclusively for Android -Kotlin /Java
-cross platform -flutter (dart) /react native


Log files:
-computer generated data file contains information about usage patterns, activities, operations in OS, 
 application, server, another device
-start --> control panel --> system & security --> windows tools --> events viewer
-log files -primary data source for network observability
           -automatically computer generated when even wit specific classification happens on network
           -software & hardware developers debug
           -helps to analysts identify slow queries, errors causing transactions to take too long/ bugs 
            impact website/ apps performance
-application logs -created in events in application
-directory service logs -computer respond to security authentication request within window server 
                         domain (domain controller) may generate directory service logs, user privilege 
                         changes, authentication operations requests & other operations request
-DNS server logs -domain name server contains databases match hostnames of website on internet with 
                  appropriate IP addresses, DNS servers involved in processing request & helping 
                  browser get to right page
-file replication service log -only available for domain controllers they record information about file 
                               replication
-security logs -security vents, failed logs-ins, password changed, failed authenticators configure type 
               of events application events
-system logs -occurs in OS, driver errors, start-up, sign-in, sign-out events & other activities


[ISP = AT&T, T-mobile, other regional provider]
[retnet, transformer architecture]
[SSD garbage collector]


Addictive apps:
-quick onboarding
-notifications
-auto-play next
-infinit scroll
-mounting loss
-gamification
-design for emotions
-customisable experience
-speed & ease (skeleton screen)
-turning user into creator


How hackers capture network traffic:
-man in middle -when hacker place himself between victim & machine that victim wants to access
	       -Ip & MAC address
	       -sending packets back & forth
-MAC address -12 character code formatted as 6 colon separated pairs 
	     -burned in identifier on you network interface car (NIC) & cannot be changed
	     -can be spoofed (copying & using MAC address of another device on same network
	     -man in middle attack
-positioning in middle of network & all request & response will flow through hacker
-see sensitive data travelling on network
-MITM attacks are performed
-tools for MITM -ETTERCAP & 
	        -BETTERCAP -captures network traffic & include various features including ARP  
                             spoofing
		-network sniffing & even some wifi penetration testing
-email Hi-jacking -gaining access to anyone's email account
		 -watching all transaction & taking advantage of them
-wifi eavesdropping -passive way to deploy MITM attack 
		   -involves cyber hackers setting up public wifi connection with unsuspecting name
		   -gaining access to victim ASAP they connect to malicious wifi
-DNS spoofing -by altering website's address record with DNS server 
	      -victim unknowingly visits fake site & attacker will attempt to their information
	      -attempt to divert traffic to fraudulent website with malicious intent
	      -attacker disguises IP address 


Top 10 Hacking tools:
-nitko, metasploit, Reconness, Nmap, angry IP scanner, Nessus, burp suit, openVAS, netscan, Hping3, 
 Msfvenom, John the ripper, wiresharp, THC hydra, sqlmap, aircrack NG, acunetix, netsparker, intruder, 
 nmap, metasploit, aircrack-Ng
-villain -windows & linux backdoor generator & multisession handler allows users to connect with 	
	  sibling servers & share their backdoor session handy for working as team
	 -built-in auto-o payload function to assist user bypassing antivirus
	 -undetected
	 -payload generated by this tool is inherited from hoax shell
-sublister -python tool designed to enumerate subdomains of website using osint
	  -helps penetration testers & bug hunters 
	  -collecting & gathering subdomains of domains they are targeting
	  -uses many search engines like google, yahoo, bing
	  -uses net-craft, virus token, threat crowd, DNS dumpster & reverse DNS
-nuclei -fast & customisable vulnerability scanner
        -goang language based tool used to send request to multiple target
        -based on uncle templates leading to zero false positive or irrelevant results
        -fast scanning of various hosts
        -scans for various protocols http, tcp, dns
-routersploit -exploit embedded devices
	      -finding exploits in routers, IP cam, CCTV 
-seclist -security testers & collections of multiple types of lists
	 -including usernames, password, sensitive data patterns fuzzing payloads web shells
-Beef-XSS -browser exploitation & penetration testing tool 
-bettercap -extensibnle framework & used in reverse engineering
	   -attacking wifi, bluetooth, low energy devices HID devices & ethernet networks
-proxichainS4 -able to run application through proxy server & bypassing network restrictions


Phases of ethical hacking:
-reconnaissance -----> scanning & enumeration -----> gaining access exploitation -----> maintaining 
 access persistence -----> clearing tracks -----> .....


How hacker hacks Wifi:
-most people use wifi for surfing internet
-authentication attack -temporarily removes all client from your wifi by sending false packages
		      -you get disconnected from network
		      -handshake (special packet shared between wifi router & device that
		       trying to connect)
		      -uses special wifi adapter (monitor mode & special injection)
		      -capture different types of wireless packages of wifi network in our range
		       without even connecting to them
		      -contains password hashes (using word lists containing millions of most used 	
                        password)
-choosing long & strong password
-buying wifi router with WPA3 encryption
-authentication attacks only works on WPA & WPA2 router
-Evil twin attack -capturing handshake file by simple de-authentication attack
		 -clone to your wifi network which has same name as yours
		 -sending malicious package to all clients connected to network
		 -force them to disconnect from network
		 -malicious webpage pops up & ask for wifi credential
		 -captive portal
-hackers can change our wifi password or name & see all clients connecting to wifi


Password cracking tools in kali linux:
-identifying vulnerability & strengthen security
-hydra -used for testing security of their own system
-john the ripper -speed & ability to crack password hashes
-hash-cat -can crack wide range of password hashes using various algorithm
-cewl (customer word list generator)
-cewl https.....com
-python3 -m http:server (starts server at port 8000)
-cewl http://localhost:8000
-cewl http://localhost:8000 > words
-subl words
-converting all words in each line --> lowercase -->  


Clicking on malicious links:
-phishing -cyber crime & targeted by emails, telephones, text message
-acting as legitimate institution
-getting sensitive informations, backing & credit card details
-fake websites
-eye-catching offers & lucrative offers & attention grabbing statements
-sense of urgency & want victim to act fast
-unusual sensors
-spam filters


Script vs code vs program:
-script is a type of code that is typically interpreted rather than compiled. Scripts are usually 
 written in scripting languages like Python, JavaScript, Bash, or Ruby.
        -makes coding simple & fast 
        -dependent
        -interpreted in another program
        -limited/ no support to user interface design, data types, graphic design
-automate tasks, manipulate data, or run sequences of commands in environments like the terminal or 
 web browsers
-Usually smaller in scope, designed for specific, often repetitive tasks.
-Code" is a general term that refers to the written instructions in a programming language that a 
 computer can execute. It’s the raw material used to create scripts, programs, and software 
 applications
-facilitates communications b/w human & machine
-building blocks of scripts, programs, and software in general.
-program is a complete set of code that performs a specific task or a set of tasks when executed. It is usually compiled (converted into machine code) or interpreted, and it can range from a small utility to a large, complex application.
         -writing codes that human input & machine output remain in sync


Why linux is safer than windows:
-user permission
-windows create an administrative account gives full access to OS (run as administrator)
-linux only allows to use home directory freely but need root password when doing any system level 
 operation
-windows handle user permission is wrong & risky
-XE or MSI file download it & install it in windows
-linux has package manager responsible for downloading program you need from trusty sources called repositories (managed by communities) & packages takes long process to get verified & accepted
-linux is open & new distribution can be created & commercialised also (more developers & researchers find bugs & exploits sends patches almost everyday)
-makes linux safer & more secure over time
-updates are only available for system & other Microsoft software 
-security through obscurity -linux is running majority of servers running on world
			   -user base on desktop is very low
			   -malware & virus that target linux usually geared towards web servers & 
         		    network devices 


Reconnaissance tools:
-NMAP (network mapper) -open source network scanner 
		      -used to discover hosts, ports & services
		 -sends packets to host & then analysis responses to produce desired results
		 -scanning for open ports
-OSINT framework -collection of open source tools & resources
		-centralised platform & contains tools, websites & data source
		-informations includes IP address, domains, sub-domains 
-shodan.io -search engine of IOT 
	   -internet connected device & retrieve information about them
-censys.io -certificates, SSL configurations & banners
	   -identifies open services & examine SSL configuration to detect security issues
-google dork -uncover files, directories or information not for public access
-GAU (get all URLs) -extracting tools for website including subdomains & paths
		   -finding hidden pages or endpoints
-FFUF -finding potential vulnerabilities in web applications
      -effective for directory & file brute force discovery helping hackers finding hidden or 	
       forgotten endpoints


Proxy-chain in Kali linux:
-web server saves hacker's public IP in their log file & easy get caught
-different servers from different countries gets request & sends to main server & hides public IP
-strict is uncommented


Top 5 hacking scripts:
-fluxion -tool used for network pen testing, hacking wifi
-cupp -(common user password profiler)
      -written in python for making strong word list
-cam-hacker -python script that captures victim's picture by webcam & sends to hacker
-past Jacker -method that malicious website employ to take control of your computer's clipboard 
              change its content
	     -uses matasploit to work & return to interactive shell
-thefatrat -used for making persistent back doors for almost all operating system


Top 10 Kali linux tools:
-kali linux is most popular for ethical hacking
-contains more than 600 tools for hacking
-Social engineering toolkit -performing hacks based on social engineering
			   -understanding human behaviour
			   -most common hacking attack
-wire shark -network security tool 
	    -used by ethical hackers to work with data set over network
	    -used to analyse packets transmitted over network
	    -captures & analyse data traffic in wifi network
	    -packets have information about source IP & destination IP, protocol used, some header
	    -packets generally have P cap extensions
-john the ripper -cracking passwords
		-performing special brute force attack
		-dictionary based attack to check password strength
		-used by cyber security expert to test password strength for many zip files & hash
-SQL map -SQl injections attack
	 -automates process of testing parameters for SQL injection
	 -detects database of its own
	 -just need to provide URL is vulnerable or not 
-air crack ng -all in one packet sniffer WPE & WPA  
	      -WPA analysing tool & hash capturing tool
	      -tool mainly used for hacking wifi
	      -supports almost all wireless interfaces
-burp suite -most widely used web application security testing tool & utilised as proxy
	    -all request from proxies browser pass & because request runs through burp suite
	    -testing vulnerabilities such as XSS SQLI & other web related issue
-net cap -network tool for working with ports & performing tasks such as port scanning, listening,
	  redirection
	 -useful for debugging & testing network demons
	 -used for perfuming TCP & UDP or unix domain sockets
	 -open remote connections & domains
-nmap -open source network scanning for reconfiguring & scanning network
      -used to find ports, hosts & services along with their versions over network
      -sends packets to host & examines responses to get intended outcomes
      -used to discover hosts direct operating system
      -scan for open ports
-NICTO -used by pen testers
       -complete web server scan o discover security vulnerabilities & related flaws
       -scan collects results by detecting default files names in secure files & app pattern
       -outdated server software & server & software MIS configurations
-metaspolit -open source tool
            -most used penetration testing framework
            -comes packed with lot fo exploits to exploit network or OS
            -generally works for local network but can be used over internet using port forwarding
            -CLI based tool


Solving hardest maze using code:
-making 40x40 gird in python pygame
-prims algorithm to generate maze
-Wilson's algorithm -randomly creates path form starting point & it keeps going until its connected   
                     to maze itself
		   -if it bumps into itself it deletes path
		   -not good for large maze & gets lost 
-random mouse algorithm 
-A* & Dijkstra
-wall follower


Backend developer:
-Node.js -its runtime that allows to run javascript on server
	-simple scripting language to run in browser
	-as web browser evolved javascript became more & more powerful
	-back then JS was impossible to run on server & most servers were written on PHP or JAVA
	-there are lot of low level implementations 
	-node can be used to handle request & read file from server file system & respond back to 	
	 client
	-REPL mode 
	-javascript works same way it does on browser as it does on node.js
	-build-in identifiers
	-events asynchronous event-driven javascript runtime
	-allows node to push intensive operations off to separate thread 
	-only very fast non-blocking operations happen on main thread
	-


Shortcut keyboards:
-ctrl + A (select all)
-ctrl + C (copy)
-ctrl + V (paste)
-ctrl + X (cut)
-ctrl + Z (undo)
-ctrl + W (close window)
-ctrl + H (replace)
-ctrl + Z (undo)
-ctrl + O (open)
-ctrl + P (print)
-ctrl + S (Save)
-ctrl + N (New workbook)
-ctrl + U (underline)
-ctrl + R (fill right)
-ctrl + W (close windows)
-ctrl + T (new tab)
-ctrl + I (italic)
-ctrl + J (justify)
-ctrl + K (hyperlink)
-ctrl + E (alignment centre side)
-ctrl + G (group & go to)
-ctrl + L (alignment left side)
-ctrl + Q (quit)


Wifi calling:
-voice service to make & receive calls over wireless internet connect
-must be connected to wifi, 4G SIM card inserted


Strong digital footprints:
-be careful about what, where & with whom you share
-be smart about site you visit, emails you click, links you clicks


Measurement of data speed:
-audio -kbps (kilo per second)
-internet -megabits per second(100000p/s)
-network -gigabits per second (10000000000p/s)
-type of computer -super -parallel processing
                  -server -stores/access data/program
                  -workstation -expensive specialised 
                  -PC -personal computer, very common
                  -microcontroller -tiny, specialised
-internet -device--modem--router--domain name server--router--modem--device (DNS--web server)
-content delivery network -faster & smoother user experience, sites pay CDNs, CDNs pay ISPs


Safety:
-2 factor authentication -provides at-least 2 pieces of information to access account (username, 
 password, OTP)
-password manager (username1,2,3)
-use strong password -mixture of numbers, characters, alphabets
                     -A1abam@9 (34 bits of entropy --> 2^34 = 0.52 seconds (33.1 billion guesses/sec)
                     -(Diamond flag cabine eagle) (111 bits of entropy --> 2^111 = 2,485 trillion year)
-choose password easy to remember but hard for computer to guess
-don't install software you don't trust
-install regular software update
-check for authentic web address
-hacker uses fake website to get your info
-attack comes from many computer at once
-hacker overwhelm website with too many requests
-hackers can steal data, control program & remote operations
-fake message of emergency security update 
-botnet
-hacked, highjacked, compromised, stolen
-scammers don't want to hack single profile
-respond to attack -don't panic --> don't shut down computer --> completely disconnect from any 
 internet --> write down what happened so far --> call for help 


[tailsOS] 
[who nix]
[UbesOS]


Daemon:
-processes (instance of running program)
-ps -aux | grep sublime
-daemons (networking, printing, SSH) --> background processes --> servers
-systemd (master daemon) (service manager, initialisation system "init")
-boot --> kernel --> systems (mounting file system, starting all services)
-pstree
-systemd --> units = daemons 
-systemctl stop sshd
-sudo systemctl start sshd
-sudo systemctl status sshd
-sudo systemctl disable ntp
-sudo systemctl status ntp
-sudo systemctl list-units | grep nginx
-sudo systemctl list-units-files | grep nginx
-sudo systemctl list-unit | grep nginx
-sudo systemctl status ngnix
-sudo systemctl list-units | grep journal
-ps (linux processes)
-ps -u htb-ac15625 | grep firefox
-ps -u htb-ac15625 
-kill firefox
-ps -u htb-ac15625 | grep firefox


Kali Linux:
-Nmap -open-source network scanner
      -discover hosts, ports, and services along with their versions over a network
      -ends packets to the host and then analyses the responses
      -host discovery, operating system detection, or scanning for open ports
      -
      -ping hostname (get IP address)
      -nmap -sV ip_address
      -nmap <target IP or hostname>
      -nmap <target1> <target2> <target3>
      -nmap <starting IP>-<ending IP>
      -nmap <IP address/CIDR>
      -nmap -iL <filename>
      -nmap -sS <target>
      -nmap -sT <target>
      -nmap -sU <target>
      -nmap -sN <target>        # Null Scan (no flags set)
      -nmap -sF <target>        # FIN Scan
      -nmap -sX <target>        # Xmas Scan
      -nmap -p <port>
      -nmap -p 80-100 <target>
      -nmap -sV <target>
      -nmap -sV <target>
      -nmap -O <target>
      -nmap -A <target>
      -nmap -oN <filename> <target>    # Save in normal format
nmap -oX <filename> <target>    # Save in XML format
nmap -oG <filename> <target>    # Save in grepable format
nmap -oA <basename> <target>    # Save in all formats (normal, XML, grepable)
      -nmap -v <target>      # Enable verbose mode
nmap -vv <target>     # More verbose output
      -nmap -T<0-5> <target>
      -nmap --min-parallelism <num> <target>
nmap --max-parallelism <num> <target>
      -nmap -f <target>
      -nmap -S <spoofed IP> <target>
      -nmap --spoof-mac <MAC address or vendor> <target>
      -nmap -r <target>
      -nmap -sC <target>
      -nmap --script <script_name> <target>
      -nmap --script <script_name> --script-args <arguments> <target>
      -nmap --script <category> <target>
-Burp suite -web application security testing software
	    -
-Wireshark -network security tool used to analyse or work with data sent over a network
	   -used to analyze the packets transmitted over a network
	   -packets may have information like the source IP and the destination IP, the protocol 		
	    used, the data, and some headers
	   -packets generally have an extension of “.pcap” which could be read using the Wireshark
	    tool
	   -
-
-SQLmap -sqlmap -u <URL> [options]
        -sqlmap -u "http://example.com/index.php?id=1"
        -sqlmap -r [file]
        -sqlmap -u [url] --batch
sqlmap -u [url] --method=POST
sqlmap -u [url] --data="param1=value1&param2=value2"
sqlmap -u [url] --cookie="SESSIONID=abcd1234"
sqlmap -u [url] --user-agent="Custom User-Agent"
sqlmap -u [url] --headers="X-Forwarded-For: 127.0.0.1"
sqlmap -u [url] --proxy="http://localhost:8080"
sqlmap -u [url] --tor --tor-type=SOCKS5 --check-tor
sqlmap -u [url] --dbs
sqlmap -u [url] --tables -D [database]
sqlmap -u [url] --columns -D [database] -T [table]
sqlmap -u [url] --dump -D [database] -T [table]
sqlmap -u [url] --dump-all
sqlmap -u [url] --dump -D [database] -T [table] -C [column1,column2]
sqlmap -u [url] --search -T [table] -D [database] -C [column] --search -s "string"
sqlmap -u [url] --users
sqlmap -u [url] --privileges
sqlmap -u [url] --roles
sqlmap -u [url] --passwords
sqlmap -u [url] --technique=[B|E|U|S|T]
sqlmap -u [url] --technique=B
sqlmap -u [url] --technique=E
sqlmap -u [url] --technique=U
sqlmap -u [url] --technique=S
sqlmap -u [url] --technique=T
sqlmap -u [url] --technique=BEUST
sqlmap -u [url] --fingerprint
sqlmap -u [url] --identify-waf
sqlmap -u [url] --random-agent
sqlmap -u [url] --delay=[seconds]
sqlmap -u [url] --retries=[number]
sqlmap -u [url] -v [level]
sqlmap -u [url] --tamper="[tamper_script]"
sqlmap -u [url] --tamper="[script1,script2]"
sqlmap -u [url] --dns-domain=[domain]
sqlmap -u [url] --timeout=[seconds]
sqlmap -u [url] --payload="[custom_payload]"
sqlmap -u [url] --time-sec=[seconds]
sqlmap -u [url] --referer="[referrer]"
sqlmap -u [url] --param-name="[parameter]"

-Metasploit -
-Social engineering toolkit -
-John -john password_file
      -john --format=[format] password_file
      -john --show password_file
      -john --list=formats
      -john --list=rules
      -john --wordlist=wordlist_file password_file
      -john --incremental password_file
      -john --incremental=[mode] password_file
      -john --external=[mode] password_file
      -john --restore=[session_name]
      -john --session=[session_name]
      -john --single password_file
      -john --users=[username_list] password_file
      -john --groups=[group_list] password_file
      -john --shells=[shell_list] password_file
      -john --uids=[uid_list] password_file
      -john --verbose password_file
      -john --incremental=charset password_file
      -john --rules=password_file
      -john --fork=[N] password_file
      -john --pot=[file_name.pot]
      -john --status=[session_name]
      -john --mask='?a?a?a' password_file
      -john --max-run-time=[seconds] password_file
      -john --progress-every=[seconds] password_file
      -john --jumbo password_file
      -john --make-charset=custom.chr
      -john --incremental:custom=custom.chr password_file
      -john --format=nt password_file
      -john --format=opencl --device=[device_id] password_file
      -


Linux:
-ls -F (argument/flag modifying command behaviour)
-whoami
-which networkchuck
-man ascii 
-ascii -d
-pwd (print working directory)
-.cfg for configuration 
-ls -F data (relative path)
-ls -F /data
-ls -F -a
-C:\Users\vlad (c = driver letter)(each driver is separate file system)
-\ (separator) & unix uses to escape special character in name like my\file.txt
-windows are case insensitive (c:\uSerS\vLad, C:\USERS|VLAD)
-windows s/cygdrive/c/Users/vlad (map drive letters to "directories" & use / not \)
-windows can't put backup.txt & Backup.txt in directory
-. (current directory), .. (parent directory)
-ls tmp
-ls -a tmp
-ls -s (size reported in disk blocks)
-ls -s -h (human friendly output number of bytes)
-computer stores things in disk blocks of 512 bytes
-wc *.pdf
-wc -l *.pdb (-w for words & -c for character)
-keyboard ---- shell ---- monitor
-programming model (pipes & filters (transform stream of input into stream of output)
		   (pipe connects 2 filters) 
		   (program read lines of text from standard input & writes lines of text to 		
		    standard output)
-user can belong to 0 or more groups 
-list usually stored in /etc/group
-user (read & write only), group (read only)
-ls -l (last modified, group owner, permissions, user owner)
-chmod u=rw file.grd
-ls -l file.grd
-chmod g=r file.grd; ls -l file.grd
-chmod a= file.grd; ls -l file.grd
-unix has permissions defined by access control lists (ACLs)
-(-rwxr-xr-x) (- is file type regular) (rwx is user owner permission) (r-x is group owner 
 permission)  
 (r-x everyone else permission)
-find (finds files rather than lines in files) 
-find . -type d 
-find . type f
-find . -perm -u=x
-find . -perm -u=x -type
-find . -name *.txt
-find . -name '*.txt' (prevents shell from expanding wildcards) (to get patterns)
-wc -l `find . -name '*.txt'` (replacing things inside with output from running command)
-find . -name '*.txt'
-wc -l `find . -name '*.txt'` 
-command line power lies in combining tools
-find . -name '*.txt'
-wc -l `find . -name '*.txt'`
-wc - l *.pdb | sort | head -1 (shell --> wc --> sort --> head)
-process is running program
-ps (lists all processors)
-PID (process ID & unique at any moments)
-PPID (process parent ID)
-PGID (process group ID)
-TTY (what terminal tty is running or is it running)
-UID (user ID of process owner) (controls what process can read, write, execute)
-COMMAND (program process is executing)
-shell is program, it has variable, changing their values, change behaviour
-set (with no argument shows all variables & their values)
-all values are string program must convert to other types when necessary
-echo HOME 
-echo $HOME 
-echo Ankur is the best
-remote shell require username & password
-./analyze results*.dat 
-./analyze results*.dat & (& run in background) (shell returns right away instead of waiting for  
 program to finish)
-fbcmd events (can run other programs in foreground while waiting for background process to finish)
-jobs (show background processes)
-fg (bring background job to foreground) (use fg, %1, %2, etc if several background jobs)
-bg %1
-kill %1
-create variable by assigning to it change values by reassigning to existing variable
-SECRET_IDENTITY=Dracula
-echo SECRET_IDENTITY
-SECRET_IDENTITY=Camilla
-echo $SECRET_IDENTITY
-ssh vlad@moon
-ssh vlad@moon:/home?vlad/cheese.txt
-source * destination are user@computer:path
-scp -r vlad@moon:/home/vlad/dark_side (-r is directory & its content)
-df -h
-df -h > usage.txt
-scp vlad@moon:/home/vlad/usage.txt
-ssh vlad@moon 'df -h'
-ssh vlad@moon 'df -h' >> usage.log
-ls -F
-ssh-keygen -t rsa
-grep (global regular expression print) -finds & prints line in files that match pattern
-grep not file.txt
-grep day file.txt
-grep -w day file.txt
-grep -n it file.txt (n profit with line number)
-grep -w -n it file.txt (use multiple flags to combine effects)
-grep -i -v the file.txt (-i for case insensitive) (-v invert & print non-matches) 
-scp (secure copy)
-scp file.txt server2:/tmp (secure copy file to remote host /tmp folder)
-rsync -a /home/apps /backup/ (synchronise source to destination)
-


-zsh is more interactive & customisable than bash, has floating point support
-hash data structures are supported in zsh that are present in bash
-invocation features is better in bash


IDE vs code/text editor:
-IDE -full fledge software environment consolidates basic developer tools required to build & test 
      software
     -reconfiguring them to specific needs ---> waste of time
     -more easily done in text editor
     -IDE are platform specific
     -requires more disk space, more memory, faster processor
     -more functions, integrated plugins, extensions for development
     -text editing, compiling, debugging, GUI, syntax highlighting
     -Intellij, Eclipse, Xcode
-editor -program & tools used for editing plain text 
        -take input & change it & produce some output
        -require fewer hardware resources to run
        -notepad, worded, sublime text


Code editor comparison:
-MIT licence
-zed -super fast with rust, feature (only those that you need), customisation (flexible with plugins & 
      looks), new but growing community
-VS code -slow, lots of feature, highly customisable, big & active community
-atom -slow, plenty but fewer than VS code, changeable with extras & looks, Preet good community
-sublime -pretty fast, lots features but needs plugins, very flexible, very supportive community


Single vs dual vs quad core:
-single -uses less power --> less heat generated
-dual -wastes power --> performs faster
-quad -lower battery life --> multitasking


-Core i1,i5,i7,i9:
-i3 -2 cores (desktop/mobile)
    -4 threads (desktop/mobile)
    -3.4GHz (max base clock frequency)
    -not applicable (max turbo boost frequency)
    -no intel turbo boost 2.0
    -intel hyper threading included
    -best desktop processor (intel core i3 2130)
    -low graphics, 32nm silicon, not supported turbo boost
    -max smart cache size (3MB)
-i5 -4 cores (desktop) & 2 cores (mobile)
    -6 threads (desktop) 4 threads (mobile)
    -2.4GHz (max base clock frequency)
    -3.8GHz (max turbo boost frequency)
    -intel turbo boost included
    -intel hyper threading (only mobile processors)
    -low graphics, 32nm silicon, supported turbo boost
    -best desktop processor (intel core i5 2550K)
    -max smart cache size (6MB)
-i7 -4-6 cores (desktop) & 2-4 (mobile)
    -8-12 threads (desktop) & 6 threads (mobile)
    -2.9GHz (max base clock frequency)
    -3.8GHZ (max turbo boost frequency)
    -intel turbo boost included
    -intel hyper threading 
    -best desktop processor (intel core i7 3930K)
    -low graphics, 32nm silicon, supported turbo boost
    -max smart cache size (12MB)
-i9 -8 cores (desktop/mobile)
    -16 threads
    -5.3GHz (max base clock frequency)
    -4.5GHZ (max turbo boost frequency)
    -3.0
    -intel hyper threading 
    -best desktop processor (intel core i9 10900K)
    -max smart cache size (20MB)


Mac:
-ps -ax | grep thisascript
-kill -9 62779
-


Linux:
-ctrl + l (clear terminal)
-ctrl + d (logout)
-ctrl + c (terminates running command)
-ctrl + alt + t (open terminal)
-ctrl + r (recall command matching search)
-ctrl + a (cursor to start of line)
-ctrl + e (cursor to end of line)
-ctrl + u (delete left of cursor)
-ctrl + k (delete right of cursor)
-ctrl + w (delete word on left)
-!! (report last command)
-finger user (display info of user)
-whereis app (show possible location of app)
-which app (which app run by default)
-install from source -.configure
                     -make
                     -make install
                     -dpkg -I pkg.deb (install package Debian)
                     -rmp -Uvh pkg.rpm (install package RPM)
-du -h (disk usage of foler)
-du -ah (disk usage of files & folder)
-du -sh (only shows disk usage of folder)
-ctrl + y (past (after ctrl u,k,w)
-rm file.txt (delete file)
-rm -i file.txt (ask fro confirmation)
-rm -f file.txt (force deletion of file)
-rm -r folder (delete folder)
-ln file1 file2 (physical link)
-ln -s file1 file2 (symbolic link)
-ssh user@host (connect to host as user)
-ssh -p port user@host (connect to host using specific port)
-telnet host (connect to system using telnet port)
-ps (display currently active processes)
-kill pid (kill process with pid)
-killall proc (kill all processes named proc)
-bg (lists stopped/background jobs, resume stopped jobs in background)
-fg (bring most recent jobs to foreground)
-fg n (brings job n to foreground)
-whereis app (show possible location of app)
-which app (show which app will run by default)
-uptime (show uptime)
-cal (calendar)
-date (date)
-ssh user@host (connect to host as user)
-ssh -p port user@host (connect to host on port as user)
-ssh-copy-id user@host (add key to host for user-to-enable)
-uname -a (show kernel configuration)
-du (show directory space usage0
-df (show disk usage)
-chmod octal file (change permission of file) (4-->read(r), 2-->write(w), 1-->(execute(x))
-chmod 777 (rw for everyone)
-chmod 755 (rw for owner, rx for group/world)
-mozilla Firefox, VLC, Libre, JITSI, GIMP, Stacer, Htop, Notepadqq, App outlet, Deadbeef, Virtualbox 
 Vim, Natron, davinci resolve, photodetector, lightworks, openSCAD, blue fish, raw therapee


-socket -socket = IP address + port number (client Ip 192.168.1.10, port 5000 & web server Ip 
         10.0.0.10, port 80)
        -Ip (192.168.1.1)-----(192.168.1.1:443 socket)-----port (443)


Customisation on linux for supercomputers:
-drivers for high speed interconnect, support OS bypass & memory registration for RDMA
-tick-less/ synchronised timer interrupts to avoid OS interference on large jobs
-special parallel file systems like lustre
-enabling support for hug pages & HugeTLBFS
-GPU drivers support offloading compute to GPU
-ECC enabled, memory system NUMA setup
-ruthless omission of any needed cruft
-enabling of remote statistic & event collection (ECC error)
-central collection of console & syslog output, domes
-full remote control of bios & boot feature 


[ChatGPT (chat generative pre-trained transformer)]
[men are like bluetooth ----> connected to you are nearby but teaches for other devices when you are 
 away]
[women are like wifi ----> sees all devices but connects to strongest one]


Switch:
-device has multiple ports that accepts ethernet connection from network devices
-OSI model (open system interconnection) software from 1 device -----> software to another device
-data communication in 7 layers
-layer 2 switch operates at data link deals with MAC address & most common switches
-devices connect to layer 2 switch ---> stores MAC address in table ---> forward data to intended 
 port, cheaper, fast
-switch table (port number, device, MAC address)
-layer 3 switch operate at network layer deals with IP address, multiple switches, also operate at  
 layer 2, requires complex configurations, more expensive, slower
-VLANs separate network traffic (VLAN10, VlAN20), devices in each VLAN can't communicate with device 
 in other VLAN
-inter-VLANs routing -SVIs (switch virtual interfaces) allows data to routed between VLANs


Express:
-server-side framework 
-flexible web framework for Node.js helps build REST APIs, web apps, backend services
-used for both server rendered apps & API/Micro-services
-extremely light, fast, free
-full control of request & responses
-great use with client side framework 
-handling requests/routes is simple
-app.get(), app.post(), app.put(), app.delete(),
-access params, query string, URL parts
-storing routes in separate files & export
-parse incoming data with body parser
-express middleware -functions that has access to request & response object, has build-in 
 middleware  
 but also comes from 3rd party packages as custom middleware (execute code --> make changes to  
 request/response object --> end response cycle --> call next middleware in stack)
-npm i express
-npm init -y
-node index
-npm i -D nodemon
-npm run dev


Setting up home server:
-using Ubuntu linux great server OS 
-using desktop version instead of server version
-setup VNC 
-sudo apt-get install proftpd
-sudo apt-get install gproftpd
-sudo apt-get install apache2
-


Facts:
-magnetic tape -0 bit & 1 bit & recording channels
	       -15000000 bits = 2 MB
-magnetic core memory
-tape device
-winRAR
-my computer -3.5 floppy, local disk, new volume, new volume, compact disc, control panel
-crack application -tool break software protection, stolen product key
                   -disables licence mechanism
                   -software piracy
-our smartphone is 100000X more powerful than computers used in Apollo 11 mission, apollo guidance 
 (AGC) has 32768 bits of RAM 72KB of ROM & processor of 0.043 MHz
-apollo 11 guidance computer = 12250 flops, CRAY-2 supercomputer = 1.9 billion flops, iPhone 12 = 11 
 trillion flops
-90% of time system gets hacked not by security bug but by human mistake
-server handles millions of requests
-hacker can take over millions of computer world wide
-haveieverbeenpwned.com
-tinycore is lightest linux distro
-computer operating machine purposely used for technological educational research
-at-least 51% of comic book is art than story comes (art matters most)
-voices comes before animation starts
-action read line --> edit into shot --> animator starts to animate to li-sync 
-lot of anime --> dubbed after but for articulated mouth style of animation
-aluminium foil blocks magnetic fields
-password (only characters) ---> takes lightning strike 2-3 times to crack
-password (character + ASCII + lowercase + uppercase + numeric) ---> 14 years to crack
-QWERTY, AZERTY layout
-linux is not OS but kernel
-android runs on modifies linux kernel
-military is big linux user (submarine, unmanned aerial vehicles, missile systems)
-world banking systems, NYSE (New York stock exchange) also use linux
-95% code in C & 2.8% assembly language of linux
-1 million = 10^6
-1 billion = 10^9
-1 trillion = 10^12
-SMS -short message service
-IMEI -international mobile equipment identify
-OK -objection killed
-HDMI -high definition multimedia interface
-DP -display picture
-ATM -automated teller machine
-USB -Universal Serial Bus
-GPS -Global Positioning System
-AIM -ambition in mind
-coding -tedious, boring, frustrating, long time to get good at, not that easy
-code name allocated to all kernel versions -wet seal, stable penguin, tossup baby fish, affluent 
                                             albatross, sliding snow leopard, suicidal squirrel
-hacking wifi with pringle can


Changing file system of drive on windows 10:
-file system on drive decides how data is stored & read from drive


[BIOS & UEFI]


DaVinci resolve for cinematic movie:
-


DaVinci resolve:
-end to end post production program
-edit + colour + fair-light + fusion
-use on powerful computer with good RAM & graphic card, MacBook M1
-.dra (DaVinci resolve archive) file formate -project file (timeline, bins, composition, colour grades)
                                             -media file (video, audio, photos, SFX)
-add project library 
-export project ---> .drp (indicates daVinci resolve project)
-every page dedicated to specific post production task
-cloud lets editors, colourists, VFX artists, animators, sound engineers work together simultaneously 
 from anywhere in world 
-media sync with Blackmagic cloud store
-media pool, bin list
-timeline, tools (modes, functions, timeline zoom settings)
-source editor -display unedited footage
-timeline viewer -display edited in timeline
-media files often go offline as moved, renamed on original storage ----> prevent use media
 management tool ----> relink media button
-using bins & smart bins
-bin -access clips inside each bin, organise bins inside other bins
-smart bin > keywords > time-lapse 
-disable audio scrubbing by choosing timeline > audio scrubbing (shift-S)
-locate clip gas.mov to live preview clip ----> drag clip from media pool into source viewer
-sort menu to display sort order of clip
-metadata view -half-way b/w thumbnails view & list view
-audio clip > select empty timeline > new timeline 
-editing sound bites
-click Go To First Frame button or press Up Arrow key to return small playhead to start of clip
-timeline viewer
-timeline zoom -full extent zoom, detail zoom, custom zoom
-options menu (displayed as three dots) in upper-right corner of source viewer & select show zoomed 
 audio waveform
-set In point at this location (I)
-set Out point at this location (O)
-timeline toolbar, click Overwrite Clip button
-press Up Arrow to move your timeline playhead back to edit b/w 2 interview clips
-choose Playback > Play Around/To > Play Around Current Selection or press / (forward slash) to review 
 edit
-ensure timeline playhead still on edit point b/w 2 interview clips & drag clip to insert overlay in 
 timeline viewer
-source view > type +300 & press return (enter) to jump playhead forward 3 seconds
-03:01 (3 seconds & 1 frame)
-press F9 to insert clip into timeline at playhead position
-removing & trimming timeline clips
-move timeline playhead to start of middle interview clip > click Detail Zoom button
-chain icon (linked clips)
-select video part of interview clip & choose Edit > Ripple Delete or press Shift-Delete (backspace)
-click Linked Selection button again to enable linked selection for timeline
-click Full Extent Zoom button & play through last clip on timeline
-click Detail Zoom button to zoom in on playhead location
-from timeline toolbar, click Blade Edit mode button or press B
-timeline toolbar, click Selection mode button or press A
-Selection mode enabled, click unwanted middle portion of clip just added edit points
-timeline toolbar, click Trim Edit mode button or press
-place playhead on cut b/w last 2 clips & click Detail Zoom
-press . (period) twice to add 2 extra frames to outgoing clip
-press , (comma) to trim same edit point back until waveform has disappeared
-, (comma) key to add frames to clip & . (period) to remove frames (because you selected different
 side of edit)
-when you think have good audio edit, press / (forward slash) to play around selected edit, listening 
 to changes 
-refine ----> edit sound as natural as possible
-adding music
-move playhead back to beginning of timeline
-use disclosure arrow to open AUDIO CLIPS bin & then select Music bin
-open clip Music Score for Trailer.wav in source view
-waveform at top of whole clip & zoomed-in portion below to make seeing waveform & adding any required 
 In or Out points easier
-whole audio clip, so theres no need to add any In or Out points here
-Drag this clip from the source viewer to the Place on Top overlay in the timeline viewer.
-Use the volume overlay line on the Music Score for Trailer.wav audio clip to lower the
clip’s volume by about -18 dB.
-Adding the Final Cutaways
-From the start of the clip, type +200 and press Return (Enter) to jump forward
2 seconds.
-Type +500 and press Return (Enter) and set an Out point.
-Press F10 to overwrite the clip into the timeline.
-Right-click the selected clips in the timeline and choose Change Clip Duration or press
Command-D (macOS) or Ctrl-D (Windows).
-Type 600 in the Duration field and click Change.
- tails (ends) of each of the clips are trimmed so they are all 6 seconds long, and
because you were in Trim Edit mode when you clicked Change, no gaps are left in
the timeline.
-shuffle insert edits
-quickly change order of these 3 clips in timeline ----> shuffle insert edit (swap insert edit)
-start by shuffling clip backward
-press A or click selection mode button to return to selection mode
-timeline, select last clip, gas.mov
-press Shift-Command-, (comma) in macOS 
-selected clip quickly switches position in timeline with clip just before it
-select clip & press Shift-Command-. (period) in macOS to shuffle
-Place the timeline playhead at the edit point between the Interview clip and the South
Pole clip and click the Detail Zoom button.
-Ensure that Linked Selection is turned off and click the Trim Edit mode button
or press T.
-Place your mouse pointer over the center of the edit point so it displays the trim icon.
4 Click and drag left to trim the start of the clip back by just over 1 and a half seconds
(about -01:15 in the tooltip) over the previous interview clip, so it starts just after Brian
says the word “…right…” as indicated in the waveform
-Trim the end of the 04 SOUTH POLE.mov clip back until the gray tooltip reads 04:00,
which indicates a 4-second duration and the timeline ripples.
-Trim 1 second off the beginning of the 07 KENYA.mov clip to remove the yellow plane
from the top of the frame, tidying up this shot.
-Click the Full Extent Zoom button so you can see the entire timeline.
-Slipping and Sliding Clips
-Slipping a clip doesn’t mean that you’re adjusting the clip’s length in
the timeline; instead, you’re moving the content of the clip within the clip on
the timeline.
-Place the timeline playhead over 05 ST MAARTEN.mov clip and click the Detailed
Zoom button. Use Option-mouse scroll (macOS) or Alt-mouse scroll to adjust the
timeline zoom if necessary.
3 Click the Trim Edit mode button or press T.
4 Position you mouse p
-Click to select the clip and slowly drag the clip to the left.
-e timeline viewer switches to a four-up display. The top two images display the start
and end frames for the clip you have selected (St Maarten), and the bottom two
images represent the end frame of the previous clip (Kenya) and the start frame of the
next clip (Credits) in the timeline
-Continue dragging left until the plane in the St Maarten clip has flown out of shot in
the top right image.
-scroll timeline so it is centered around the 07 KENYA.mov clip, and then place the
mouse pointer over the Kenya clip’s filmstrip to switch to the slip icon.
9 Click and hold on the clip 07 KENYA.mov and slip the clip backward by about 18
seconds (-18:00 in the tooltip) to reveal the part of the clip where the plane flies over a
flock of flamingos.
-Slipping shots like this is very powerful and very intuitive in DaVinci Resolve, as you can
clearly see and understand what is happening as you make changes in the timeline.
Next, you will just refine the position of the Kenya clip in relation to the two clips on
either side of it. To do this, you will slide the clip.
10 Adjust the timeline scroll and zoom so you can clearly see the
08 AERIAL ALASKA.mov, 07 KENYA.mov and 05 ST MAARTEN.mov clips
-Ensure that you are still in Trim Edit mode and position you mouse pointer over the
07 KENYA.mov clip. This time, though, place it in the lower part of the clip below the
filmstrip and over the bar that displays the clip’s name
- icon changes shape to the slide icon. This will allow you to slide the clip backward
and forward between its neighbouring clips.
12 Click and hold the clip.
The same four-up display appears in the timeline viewer.
13 Drag the clip slightly to the left a few frames.
This time, the top two images remain still, but the bottom two images are changing.
This indicates that the clip you have selected is not being affected, but the two clips on
either side are.
14 Slide the clip back by 1 second (-01:00 in the tooltip).
-Press A or click the Selection Mode button to return to Selection mode.
Play back to review the changes. The Kenya clip lines up much nicer with the beats of
the music. However, it might not be perfect, so continue making further adjustments if
necessary until you’re happy with the results.
-adjusting pacing
-move your playhead to start of 04 SOUTH POLE.mov clip
-76


-colour correction
-setting tone of visuals
Setup Your Workflow
Set Color Science → DaVinci Resolve → Preferences → Color Management → DaVinci YRGB / DaVinci YRGB Color Managed
Set Timeline Color Space → Use Rec.709 Gamma 2.4 for standard output
2️⃣ Import & Organize Clips
Use Media Pool → Import footage
Apply LUTs (if needed) → Right-click on a clip → 3D LUT → Select a LUT
Create a Timeline → File → New Timeline
3️⃣ Basic Color Correction (Fix the Image)
Use the Color Wheels Panel (Color Page → Color Wheels)

Step-by-Step:
✅ Exposure (Lift, Gamma, Gain, Offset)

Increase Lift (Shadows) if too dark
Decrease Gain (Highlights) if too bright
Adjust Gamma (Midtones) for skin tones
Use Offset for overall exposure
✅ Contrast & Pivot

Increase Contrast to deepen shadows & highlights
Adjust Pivot to balance contrast distribution
✅ White Balance (Temperature & Tint)

If too blue → Increase Temperature
If too green/magenta → Adjust Tint
✅ Saturation

Boost for more vivid colors, but don’t oversaturate
4️⃣ Fine-Tuning with Curves
Use Custom Curves (Curves Tab) → Drag points to tweak contrast
Hue vs Saturation → Reduce overly saturated skin tones
Hue vs Hue → Shift specific colors (fix skin tones, sky color, etc.)
5️⃣ Secondary Corrections (Fix Specific Parts)
✅ Power Windows (Selectively Adjust Areas)

Color Page → Window Tab (Circle, Rectangle, Custom)
Use a Mask to isolate an object and adjust separately
✅ Qualifier Tool (Select Specific Colors)

Select a color (e.g., skin tones) and fine-tune with HSL Qualifier
Adjust softness (Denoise & Blur) to avoid harsh edges
6️⃣ Add Filmic Look (Final Polish)
✅ Use Color Warper → Shift hues for a stylized look
✅ Apply Film Grain (Effects Panel → OpenFX → Film Grain)
✅ Use Glow (OpenFX → Glow) for Highlights
✅ Add Vignette (Power Window + Softening Edges)

7️⃣ Export in High Quality
✅ Deliver Page → Format: MP4 / ProRes
✅ Codec: H.264 / H.265 for web, ProRes for professional work
✅ Resolution: Match timeline (1080p, 4K)
✅ Color Space Tag: Rec.709 Gamma 2.4


DaVinci resolve:
-editing in edit page -importing project > file > import project
                      -select .drp (DaVinci resolve project) file
                      -choose import as new or update existing project
                      -relinking media > if media files missing > media pool > right-click on missing 
                       clip > relink selected clips
                      -navigate to correct media folder & select files
                      -automatically match them to timeline
                      -working with media pool
                      -adding media -drag & drop files into media pool from system
                      -organising clips -create bins for better organisation (right-click > new bin)
                      -metadata management -use clip attributes to adjust frame rates, resolution, 
                                            audio channels
                      -building timeline in edit page -drag clips from media pool into timeline
                                                      -arrange clips in order you want
                                                      -use snapping (S) to align clips easily
                                                      -use A selection mode & B blade (cutting tool)
                      -editing sound bites -select interview/dialogue clips & trim them for clean edit
                                           -use J, K, L keys for playback control (J rewind, K pause, L 
                                            to fast-forward)
                                           -use blade tool (B) to cut clips & remove unwanted sections
                      -inserting B-Roll -drag B-Roll clips above main dialogue track
                                        -use V to enable/disable clips
                                        -match B-roll to dialogue for visual storytelling
                      -removing & trimming timeline clips -select clip & hit delete to remove it
                                                          -use ripple delete (shift + delete) to close 
                                                           gaps automatically
                                                          -trim edges using trim tool (T)
                      -using trim edit mode -activate by pressing T
                                            -adjust start & end points of clips smoothly
                                            -helps refine transitions & pacing
                      -adding music -import audio track into timeline
                                    -adjust volume using audio mixer
                                    -sync music beats with visual cuts
                      -adding final cutaways -review timeline & insert additional cutaways
                                             -use cutaways to emphasise emotions or actions
                      -shuffle insert edits -select clip, press Shift + Cmd/Ctrl + drag to reposition 
                                             without affecting other clips
                      -finessing B-roll -adjust opacity & blending modes for creative effects
                                        -use transform (inspector panel) to resize or reposition
                      -slipping & sliding clips -slip (S) -change in/out points of clip without moving 
                                                           its position
                                                -slide (shift + S) -move clip along timeline while 
                                                                    keeping its content intact
                      -adjusting pacing -analyse rhythm & timing of cuts
                                        -trim, extend, adjust clips to maintain engagement
-audio, effects, titles (edit page) -setting up project
                                   -configure project settings before editing (file > project settings) 
                                   -choose right frame rate, resolution, colour space
                                   -duplicating timeline -right-click on timeline > duplicate timeline
                                   -use this to experiment without altering original sequence
                                   -adding voiceover & sound effects
                                   -drag audio files into timeline
                                   -adjust levels using audio mixer
                                   -apply fade-in & fade-out effects for smooth transitions
                                   -mixing soundtrack, balance dialogue, music, sound effects
                                   -use equaliser (EQ) to enhance vocal clarity
                                   -apply compressor to even out volume levels
                                   -replacing shots -drag new clip onto existing 1 while holding Alt
                                   -changing clip speed -right-click on clip > change clip speed
                                                        -adjust % for slow-motion or fast-motion
                                                        -use optical flow for smoother slow-motion
                                   -changing shot framing -use transform controls in inspector
                                                          -adjust zoom, position, rotation
                                   -adding transitions -open effects library > video transitions
                                                       -drag & drop transitions b/w clips
                                                       -adjust duration in inspector panel
                                   -adding filters -open effects library > OpenFX
                                                   -drag effects (sharpen, gaussian blur, glow clips)
                                   -adding fusion titles -open effects library > titles
                                                         -drag title onto timeline & customise text, 
                                                          font, animation
-performing primary colour corrections
-exploring colour page interface -nodes panel -each node represents colour adjustment
                            -scopes panel -waveform, parade, histogram, Vectorscope for colour analysis
                            -primary wheels -lift (shadows), gamma (midtones), gain (highlights)
-understanding video scopes -waveform -displays luminance levels
                            -parade -RGB colour channels
                            -Vectorscope -shows colour balance
-colour correcting -lift -adjust shadows
                   -gamma -adjust midtones
                   -gain -adjust highlights
-making automatic adjustments -auto balance adjusts contrast & colour temperature
                              -manual tweaking is always recommended
-understanding nodes -serial nodes -sequential adjustments
                     -parallel nodes -separate adjustments blended together
-using curves for primary colour corrections -adjust brightness & contrast selectively
                                             -hue vs saturation adjusts colour intensity
-making secondary colour adjustments -masking areas with windows
                                     -power Windows allow selective adjustments
                                     -track masks with tracker to follow moving objects
                                     -using windows to adjust lighting
                                     -adjust exposure in specific parts of frame
                                     -selecting areas with qualifier
                                     -select specific colour range & modify it
-grade management -identifying ungraded clips -use clip index to track graded & ungraded clips
                  -working with LUTs -apply look-up tables (LUTs) for cinematic colour grades
-project setup & preferences -working with automatic smart bins
                             -organise media automatically using Metadata filters
                             -exploring keyboard shortcuts
                             -use Cmd/Ctrl + Shift + L to customise shortcuts
-mixing audio in fairlight -use noise Reduction (Fairlight FX) to clean audio
                           -apply reverb & delay for creative sound design
-creating effects in fusion -use nodes for VFX compositing
                            -masking, keying, motion tracking for complex effects 
-delivery & media management -exporting final video
                             -deliver page > render settings
                             -choose H.264 for web or ProRes for high-quality exports
                             -use adaptive bitrate for efficient compression


Technical presentation:
-


Technical writing:
-UI docs, developer docs, deployment docs
-clarity -use simple words — never sacrifice meaning for fancy vocabulary
-conciseness -eliminate unnecessary words without losing context
-accuracy -ensure facts, instructions, terminology are 100% correct
-consistency -use same terms, format, style throughout your writing
-audience-first -adapt style for your reader —beginner, intermediate, expert
-research skills -gather reliable sources -official docs, peer-reviewed articles, RFCs (protocols)
                 -verify facts by cross-checking sources
                 -planning & outlining -define purpose (tutorial, API doc, bug report)
                                       -introduction -what document is about
                                       -prerequisites -what reader should know
                                       -steps -broken down with examples
                                       -conclusion -summary & next steps
                 -version control -use git to manage drafts
                                  -document changes clearly with meaningful commit messages
-user manuals -introduction, installation, configuration, usage, troubleshooting, FAQs
-API documentation -authentication, endpoints, request/response examples, error codes, rate limits
-tutorials -goal, prerequisites, step-by-step guide, code samples, test cases
-tools of trade -writing -markdown (for GitHub, Jupyter)
                         -LaTeX (for math-heavy docs)
                -diagrams -Mermaid.js (flowcharts, sequence diagrams)
                          -PlantUML
                -proofreading -Grammarly, ProWritingAid
                -documentation generators -Doxygen (C/C++ projects), Sphinx (Python projects)
                -API docs -swagger/ OpenAPI
-style guides & standards -google developer documentation style guide —for tech docs
                          -microsoft writing style guide —for clear, concise docs
                          -RFC 2119 —defines key terms like "MUST," "SHOULD,", "MAY" for spec writing
-advanced techniques -error messaging -bad -something went wrong
                                      -good -error 404 -file not found, please check path
                     -code samples -provide working examples in small, testable chunks
                                   -comment code for clarity
                     -diagrams & visuals -use sequence diagrams to explain complex workflows
                                         -flowcharts for decision trees


VFX movie:
-pre-production -concept development & storyboarding
                -plan movie, outline scenes, sketch storyboards
                -Krita -digital painting & storyboarding
                -Storyboarder —intuitive storyboarding software
                -GIMP —image editing & concept art
-workflow -write down story idea, break it into scenes
          -sketch rough storyboards for each scene
          -create mood boards using GIMP for visual style inspiration
-production -filming -capture live-action footage
            -OpenCamera (android) —manual camera control
            -OBS studio —green screen or direct-to-digital capture
            -shoot footage with green screens for compositing later
            -record high-quality audio separately using Audacity
-post-production -3D modeling & animation
                 -create CGI elements, characters, environments
                 -blender —industry-standard for 3D modelling, animation, and physics simulations
                 -MakeHuman —generate 3D human models easily
                 -design 3D models in Blender, animate characters, props using keyframes & rigging
-compositing & VFX -merge CGI with live footage, add explosions, particles, other visual effects
                   -natron —powerful node-based compositing software (like Nuke)
                   -blender (compositing tab) —advanced effects & camera tracking
                   -track live footage using blender motion tracking tool
                   -combine CGI elements (explosions, creatures) into live footage with Natron
                   -use green screen keying to remove backgrounds
-editing & colour grading -cut scenes, arrange clips, adjust colours for cinematic look
                          -DaVinci Resolve —pro-level video editing & colour correction
-sound design & mixing -add sound effects, dialogue, music
                       -audacity — record and mix sound
                       -LMMS —compose original soundtracks
                       -add foley sounds (footsteps, rustling leaves)
                       -mix music tracks to fit dramatic moments
                       -sync audio perfectly with video using DaVinci Resolve
-rendering & export -compile all scenes into high-quality video
                    -Blender —render 3D animations using Cycles, Eevee engines
                    -HandBrake —compress videos without losing quality
                    -render all CGI shots in Blender
                    -export final edits from DaVinci Resolve in MP4 or MOV
                    -use HandBrake to optimise for streaming platforms


Animation production pipeline:
-modelling (blender) -----> UV mapping -----> rigging (gives characters ability to move & special 
 controls for animators to use) -----> look (appearance skin, hair, clothing) -----> texture & reaction  
 to light -----> animation (encoded into geometry format preserving each pose for every frame) -----> 
 simulation (secondary elements, water, hair, cloth) -----> rendering (generating images to create 
 sequence, shading, texture mapping, translucency, depth of field, reflection, shadows, motions blur) 
 -----> compositing (finishing touches, colour correction)


DaVinci resolve:
-interface overview -media page -import & organise footage
                    -cut page -quick & simplified editing
                    -edit page -full-fledged timeline editing
                    -fusion page -advanced VFX & motion graphics
                    -colour page -professional colour grading
                    -fair-light page -audio editing & mixing
                    -deliver page -exporting project
-starting new project -go to file ---> project settings
                      -set timeline resolution (1920x1080 or 4K)
                      -set frame rate (24, 30, 60 fps)
-importing media -drag & drop files into media pool or use file ---> Import Media
                 -organise media into bins (folders)
-timeline editing -drag clips from media pool to timeline
                  -use blade tool (B) to cut clips
                  -rearrange clips by dragging & dropping
                  -use trim tool (T) for fine adjustments
                  -transitions -go to effects library ---> video transitions
                               -drag & drop transition (cross dissolve) b/w 2 clips
                  -titles -go to effects library ---> titles
                          -drag title (Text+) onto timeline & customise it
                  -speed control -right-click clip ---> change clip speed
                                 -adjust speed, reverse, or freeze frames
-fusion -use nodes (flowchart-based system) -mediaIn -input your clip
                                            -transform -adjust position, rotation, scale
                                            -Text+ -add animated text
                                            -media-out -output your final composition
        -connect nodes like pipeline
-colour grading -primary grading -adjust lift, gamma, gain for shadows, mid-tones, highlights
                                 -use curves for precise tonal adjustments
                                 -apply colour wheels for saturation & contrast
                -secondary Grading -use qualifier tool to isolate specific colours
                                   -adjust specific areas using power windows (masks)
                -LUTs -go to LUTs panel & apply LUT for specific look
-audio editing -drag clips to audio tracks
               -use inspector to adjust volume, pan, pitch
               -add noise Reduction effect (Fairlight FX)
               -adjust thresholds & attack/release
-audio mixing -use mixer panel to adjust levels for individual tracks
-key features -Multicam editing -right-click multiple clips → create new Multicam clip
                                -edit multiple angles in real-time
              -stabilisation -select clip ---> go to inspector ---> stabilisation
              -keyframes -use inspector to add animation (position, scale)
              -tracking -use tracker tool in colour page to track objects
-delivering/exporting -select preset (YouTube, Vimeo, MP4)
                      -resolution (1080p or 4K)
                      -codec (H.264 for smaller size, H.265 for higher quality)
                      -set output location ---> click add to render queue ---> click render all
-shortcuts -ctrl/cmd + B -blade tool (cut)
           -ctrl/cmd + Z -undo
           -shift + scroll wheel -horizontal timeline scroll
           -alt/option + drag -duplicate clip
-best practices -save your project frequently (Ctrl/Cmd + S)
                -use proxies for smoother editing with large files
                -organise media & timelines using colour labels


Natron:
-open-source, cross-platform compositing software for VFX & motion graphics
-similar to tools like after effects or Nuke
-compositing, VFX, green screen keying, colour grading, motion graphics
-interface layout -viewer displays composition
-node graph -workflow control using nodes
-properties -adjust settings for each node
-toolbar -add nodes or effects
-ensure have enough RAM (8GB minimum, 16GB+ recommended)
-basics of node-based workflow -building blocks that perform specific tasks (colour correction,
                                blending, etc)
-key nodes -read node -imports media (images, videos)
           -merge node -combines multiple layers
           -transform node -resizes, rotates, and moves elements
           -write node -exports the final composition
           -import media ----> process with nodes ----> export final output
-creating basic composition
-import media -read node to load images or videos
-layering -merge nodes to layer & blend different elements
-transformations -transform node to adjust position, scale, rotation
-colour grading -add nodes like grade or ColorCorrect for colour adjustments
-export -add write node, set output format, render
-green screen/chroma keying -add keyer node (Primatte or Keyer) to remove backgrounds
-motion tracking -tracker node to track objects & apply effects to moving elements
-rotoscoping -roto node to create masks for isolating elements
-text & titles -add text node for creating titles or captions
-3D compositing -work with 3D spaces using camera & Card3D nodes
-animation -keyframes -right-click any property ----> add keyframe
           -graph editor -adjust animation curves for smooth transitions
-ParticleEmitter node to create smoke, fire, or other effects
-colour grading -LUTs (lookup tables) or ColorLookup node for cinematic colour grading
-2D to 3D conversion -add depth using Card3D & adjust with camera node
-lens effects -add nodes like lens distortion or defocus for realistic effects
-file ----> add write node ----> set file format (.mp4, .png sequence)
-set render settings (resolution, frame rate)
-movies -use chroma keying for green screen scenes
        -add cinematic colour grading with ColorCorrect node
-games -create 2D/3D assets using particle effects & export in game-compatible formats
-anime -combine hand-drawn elements with rotoscoping & motion graphics
       -Roto node to create dynamic character animations
-plugins & resources -OpenFX plugins


Natron:
-composting -combining of visual elements from separate sources into single images to create illusion 
             that all those elements are parts of same scene
            -superimposition of character filmed on green background over scene shot in another place, 
             at another time or computer-generated scene
            -manual detouring of element in video to embed it in another video, possibly with different 
             motion
            -artistic modifications of video, after shooting live-action scene or rendering CGI scene,  
             in order to modify its lighting, colours, depth of field, camera motion, remove noise or 
             add film grain
-video compositing software is not 3D computer graphics software, Blender or Maya, but for combining  
 computer-generated elements produced by other software with live-action video or 2D animation
-32 bits floating point linear colour processing pipeline
-file formats supported -EXR, DPX,TIFF, PSD, SVG, Raw, JPG, PNG
-support many free & open-source OpenFX plugins
-fast optimised multi-threaded rendering pipeline & support for proxy rendering 
-render multiple graphs at same time & make use of 100% of compute power of CPU
-very large image sizes (tested on 27k x 30k images)
-offers real-time playback by RAM/Disk cache technology
-image viewing software (little bit slow)


Natron tutorial:
-node graph -file of script
-importing .mp4 file from disk to project
-remove thumbnail ---> node > turnoff preview (makes faster)
-tab --> choose (viewer)
-control > colorspace section > srgb
-if error in playing ----> use image sequence (all frames broken) instead of .mov, .mp4 file
-shortcuts -B -blur, G -grade, R -read, cmd + A (select all), M -merge, D -disable
-refresh button (recycle)
-key-framing -create node colour wheel & transform
             -RC on scale ---> make keyframe
             -
-


Natron:
-compositing -node-based compositing software, connect different nodes to modify & combine images
             -read node –loads images or video
             -merge node –combines multiple images using blend modes
             -transform node –moves, scales, rotates elements
             -keying nodes –removes backgrounds (green/blue screens)
             -roto/ roto-paint Nodes –manual masking & painting
             -import footage using read node ---> apply transformations, keying, roto ---> merge 
              elements together ---> colour correct to match elements ---> export final result using 
              write node
-managing projects -natron uses projects (.ntp files) to store work
                   -file ---> save project ---> saves .ntp file contains node setups
                   -use relative paths (preferences ---> general) to keep assets linked correctly
                   -set project resolution in project settings (Ctrl+Shift+P)
                   -use write node to render final output (PNG sequence, MOV)
-reformatting elements -if footage doesn’t match project settings
                       -use reformat node to adjust resolution & aspect ratio
                       -use crop node to trim unwanted areas
                       -transform node used for scaling if needed
-channels in natron -images contain different channels
                    -RGBA = red, green, blue, alpha (transparency)
                    -depth ---> used for 3D compositing (Z-depth)
                    -motion vectors ---> used for motion blur
                    -working with channels
                    -shuffle node ---> rearranges channels
                    -ChannelMerge node ---> merges different channels
                    -premult/ unpremult node ---> controls alpha transparency
-merging images -use merge node to combine images
Common Merge Modes:
Over → Puts one image on top of another.
Multiply → Darkens based on brightness.
Screen → Brightens (good for glow effects).
Add → Adds brightness (for fire, explosions).
Difference → Subtracts colors (useful for tracking).
How to Merge:

Add a Merge Node.
Connect A (Foreground) and B (Background) inputs.
Adjust blend mode and opacity in properties.
6. Noise Removal (Empty)
To reduce noise in Natron:

Use Denoise Node (Basic denoising).
Use Blur Node with a small radius.
Convert to YUV (ColorSpace Node) and blur only the chroma channels.
Use Temporal Filtering (If working with video, average multiple frames).
7. Keying (Empty)
Keying removes backgrounds like green/blue screens.

Best Keying Nodes in Natron:
Keyer Node (Basic keying)
ChromaKeyer Node (For green/blue screen removal)
Primatte Node (Advanced keying)
How to Key in Natron:

Add ChromaKeyer Node.
Connect it to your image.
Pick the background color (green/blue).
Fine-tune with Erode/Dilate (to refine edges) and Premult (to apply transparency).
8. Using Roto / Rotopaint
Roto and RotoPaint are used for manual masking and painting.

Roto Node → Creates masks for keying or adjustments.
Rotopaint Node → Used for painting directly on the footage.
How to Roto:

Add Roto Node.
Draw a shape around the object.
Animate the shape using keyframes.
Connect it to Merge or Mask input.
9. Tracking & Stabilizing
Tracking follows movement in a scene.

Types of Tracking:
Point Tracking (for following small objects).
Planar Tracking (for surfaces like screens).
Stabilizing (to reduce camera shake).
How to Track in Natron:

Add Tracker Node.
Select a feature in the footage.
Track forward or backward.
Apply the tracking data to another node (Transform for stabilization, CornerPin for screen replacement).
10. Transforming Elements
To move, scale, or rotate elements, use the Transform Node.

Translate – Moves an object.
Scale – Resizes an object.
Rotate – Rotates an object.
Shear – Skews the image.
How to Use:

Add a Transform Node.
Adjust position, scale, or rotation in properties.
Use keyframes for animation.
11. Working with Color
Color grading makes elements match.

-useful colour nodes -
ColorCorrect Node → Adjust brightness, contrast, saturation.
Grade Node → Advanced color correction
HueCorrect Node → Adjust specific colors
ColorSpace Node → Convert between sRGB, Linear, Rec.709
-colour correction -use colour correct node for overall adjustments
                   -use grade node to balance highlights, mid-tones, shadows
                   -convert footage to linear colour space before compositing
-stereoscopic compositing -3D stereoscopic work, need to handle left & right eye images separately
                          -workflow -use shuffle node to separate left/right eye images
                                    -composite each eye separately
                                    -merge back using JoinViews Node
                                    -use anaglyph node for previewing in red/cyan 3D


Softwares:
-3D icon -Unblast
-photos -pexels
-analytics -analisa


-open -a "android file transfer" 


Partition your drive for ubuntu:
-set aside at least 20GB for ubuntu to live in & boot from
-open disk manager & click C drive & select shrink volume
-select at least (20000) 20GB for ubuntu & click shrink
-assign letter to new volume, right click & select new simple volume
-follow wizard & assign letter to drive & follow rest 
-list of drive will appear
-confirm that PC BIOS mode comes as UEFI


Activity monitor:
-CPU -implementer, architecture, variant, part, revision
-processor (0,1,2,3,4,5,6,7)
-bogoMIPS 
-memory -total RAM, available & total internal storage, available & total external storage (GB)
-battery -percentage (%), technology (Li-ion), temperature (31.9°C), voltage (3800 mV), health
-SIM -country, carrier, number of active SIM, country, ISO, ICC ID, data roaming, MNC, sim slot
-NFS -present, enabled
-display -resolution (2131x1080), screen density, size (6), refresh rate (60 HZ)
-RAM stat -free RAM (%, GB), total RAM, min/max
-traffic -received (200 bytes/seconds)
-transmitted -(200 bytes/seconds), min/max 


Light weight website:
-identify most active page ---> build new version of that page from scratch with singular focus on 
 optimisation ---> assemble all HTML, CSS, javascript into single hyper light HTML page ---> server 
 page behind CDN with compression & HTTP/2 pipelining 
-server real content (dynamically), responsive layouts at minimum common breakpoints, responsive image, 
 sprites, SVG graphic optimised responsibly, accessibility
-stop -ads & social media trackers
      -CMS integration
      -javascript libraries
      -CSS layouts via frameworks
      -lazy loading content, except images
      -data URIs, unless absolutely certain
      -javascript & CSS compilation
      -custom web fonts
-measuring performance -sitspeed.io, build performance budget


Quantum computer:
-


Optimise hard drive for more portion space:
-speeds up computer during boot time & run smoother
-process will defragment hard drive & make free space more available for partitioning
-ensure bootable drive is inserted into your windows 10 PC
-right click on start, hold shift & select restart
-select use device
-select ubuntu or flash drive company
-install ubuntu & try before installing 


51% attack: 
-majority attack, majority hash power
-security vulnerability that occur in blockchain based system, cryptocurrency
-situation when single entity/ group fo entities gains control of more than 50% of total computational 
 power (hash rate) on network
-double spending -attacker with majority hash power create alternative blockchain in secret different 
 from main blockchain ---> alternative chain allows attackers to spend their crypto & also retaining 
 original fund
-chain reorganisation -attacker continue to mine blocks in secret on their alternative chain, surpass 
 length of existing legitimate blockchain, once become longer ---> attacker reveals it to network
-network acceptance -nodes on network accept it as valid chain, discarding original blockchain ---> 
                     transactions on original chain being invalidated (funds spend, received)


How camera works:
-taking picture of giant banana you need big cardboard box
-when light hit banana --> scatters light
-putting hole in box ---> makes banana upside down
-saving that projection as picture (take paper & paint that with chemicals that don't like light & 
 change brightness based on how much light it perceives) (outdated method)
-aperture, shutter & black magic sensor
-more aperture --> lighter image & less aperture --> darker image
-shutter -mirror box (scaled down super precise mirror room 
-image sensor made up of pixels (micro lens, colour filer & photo diode)
-photo diode is mini solar panel (generate certain amount of electricity depends on how much light 
 hits it)
-voltage per pixel as 0s & 1s


How touch screen work:
-2 layers plastic at top & glass at bottom both are slathered in conductive material in grid pattern
-knows where we touch
-send electricity to processor 
-glass + 2 clear diamond shaped grid with clear insulator between them
-grids are made up of material ITO that holds electricity really well
-electrons generate negative electron field --> causes top layer tons of positive charges 
 (capacitor)
-putting some conducts electricity close to capacitor --> messes up electric field --> changes 
 amount of positive charge on top layer
-processor get signal (there is change in charge in x55 & y67 in diamond 4)


How bluetooth works:
-connection through light (121nm-124nm) --> passes through walls also
-sending 1s & 0s & receiving 1s & 0s (happens around 1000000 times/second)
-79 different channels between 121 & 124 & each channel has its own wavelength 0s & 1s)
-takumi on channel 37 & you on channel 73 
-earbuds is like lock --> clicking pair button onset earbuds --> actively sends key through its 	
 antenna --> all keys visible in phone settings --> choosing 1 key --> beginning of each package 0s  
 & 1s --> earbuds changes its lock --> using old key give new key to lock 
-phone & earbuds don't just stay in 1 channel but use frequency hopping (hover around from channel  
 to channel 1600 times every second)


Inside CPU:
-power supply, power cable, case fan, CPU fan, input/output, RAM, daughter board, CD-ROM, case, hard 
 disk drive, floppy disk drive, data cables, motherboard, battery


Back of CPU:
-PS/2 port, keyboard, mouse
-USB, sound out/in, microphone, MIDI game port, main power, video card, network card, modem
-SMPA fan, case cooling fan, ethernet port, parallel port, power port, serial port, VGA port, audio 
 port, expansion slots
-serial 115k bps, parallel 500k bps, USB 480M bps (2.0), USB 4800M bps (3.0), ethernet 100M, 1000M bps, 
 tel. Modem 56k bps, firewire (1394), 400M bps, 800M bps, 3.2G bps (=3200M bps), VGA (monitor), DVI, s-
 video HDMI
-reader all in 1 terminal


Php:
-general purpose scripting language for web development, interpreted server-side 
-fast, flexible, pragmatics
-procedural & OOP
-embedded directly into HTML
-runs on server & not users web browser
-XAMPP server -X ideographic letter referring to cross-platform
              -A apache/ expanded from apache HTTP server
-simplicity, flexibility, speed
-php hypertext preprocessor
-used with relational databases mysql, PostgreSQL, SQL server, oracle
-XAMPP server -cross platform web server solution stack (contains apache server, mysql, php)
-used with relational databases like MySQL
-used by Wordpress (content management system for creating websites) & larval (powerful & full 	
 featured web framework for creating apps & APIs of any size)
-used with LAMP stack, XAMPP & MAMP & MySQL database
-setup production server on web host like Linode
-browser <----http request/ response----> server <----SQL query/ response----> database


Java vs python:
-java -general purpose solving programming language (write once, run anywhere)
      -uses static typing 
      -faster than python
      -less productive than python & time consuming
-python -high level programming language, code readability & shorter syntax
        -uses dynamic typing
        -more productive


Java vs C++:
-java -no support pointer concept
      -no support multiple inheritance
      -no include structures/ unions
      -java includes automatic garbage collection
      -method overloading, no operator overloading
      -platform independent programming language
      -used for design web based application & desktop apps
      -use compile & interpreter both
      -high level programming language
-c++ -support pointer concept
     -support multiple inheritance
     -include structures/ unions
     -require explicit memory management
     -support overloading & operator overloading
     -platform dependent programming language
     -used in design desktop apps, OS, compiler
     -use only compiler
     -more near to hardware then java


Fitting 2TB fit in microSD:
-Inside packed with memory cells (0 & 1)
-channels contains with many electrons
-positive charge attracts negatively charged electrons
-electron sendup in charge trap because of insulation (only 75-100 atoms thick)
-voltage is applied to gate & if charge trap is empty ---> electron in channel begins to flow
-most memory cells have 16 different levels (level 1 (no e-) & level 16 (full of e-))
-smallest memory cells are now 20-30nm length & 40-60nm in height
-volume of cylinder & volume of cuboidal 
-SD association defines 4 category of microSD -standard (0-->2GB), high (2GB-->32GB), extreme (32GB  
 -->2TB), ultra (2TB--> 128TB)


-reboots into bio & memory can be changed
-shutdown /r /fw /f /t (restart computer & restart into system)
-route delete 192.168.40.0
-route add 192.168.40.0 mask 255.255.255.0 (customise way computer reaches certain network)
-netstat -e -t 5
-tracert networkchuck.com
-ping networkchuck.coffee
-netsh wlan show wlanreport (wireless report about wireless)
-tasklist | finder script
-taskkill
-chkdsk /f
-assoc .mp4=VLC.vlc
-energy-report.html for more details
-nslookup -type=ptr networkchuck.com
-nslookup -type=txt networkchuck.com
-nslookup networkchuck.coffee 8.8.8.8
-nslookup networkchuck.com


Tracerouter:
-command line utility
-used to show route data packets takes (travel across internet --> destination)
-internet is global network of routers
-bottleneck problem -when connection to server is lagging
-ping -sends more data packets to destination & back to our computer, tells general connectivity, 
 how long trip took (ms)
-trace-route -also pings each router on way ---> destination
-more trip time -some problem, long distance between routers
-3 data packets are sent to isolate false issue
-TTL -time to live (how long live before they discarded) (30 hops)
     -prevent data packet from travelling endlessly around internet
-traceroute <hostname/IP>
-traceroute -m <max_hops> <hostname/IP>
-traceroute -w <timeout> <hostname/IP>
-traceroute -q <number_of_probes> <hostname/IP>
-traceroute -s <packet_size> <hostname/IP>
-traceroute -I <hostname/IP>
-traceroute -T <hostname/IP>
-traceroute -s <source_address> <hostname/IP>
-traceroute -f <ttl_value> <hostname/IP>
-traceroute -p <port> <hostname/IP>
-traceroute -n <hostname/IP>
-traceroute6 <hostname/IP>
-traceroute -A <hostname/IP>
-traceroute -i <interface_name> <hostname/IP>
-traceroute -v <hostname/IP>
-tracert <hostname/IP>
-tracert -h <max_hops> <hostname/IP>
-tracert -w <timeout_in_ms> <hostname/IP>
-tracert -d <hostname/IP>
-traceroute -I google.com
-mtr <hostname/IP>
-mtr -c <number_of_packets> <hostname/IP>


Host:
-finds domain name associated with IP address & vice versa
-returned IP address is either IPv4 & IPv6
-host google.com
-host 31.13.78.35


Nmon:
-nigel's performance monitor
-handy tool for graphing & monitoring live system statistics (CPU, memory, disks, network, processes, 
 temperature)


Ethtool:
-view 7 modify settings of network interface card (NIC) in linux
-replaced old tool named mii-tool
-view current speed & duplex setting of NIC 
-ethtool env0s3
-hostname (display current hostname of system)


Route:
-displays & manipulate routing table in line
-information about how network packets should be routed through network
-route
-shows destination mask, flags, metric, gateway, reference count, interface
-adding & deletion routes from network with IP address
-rout add -net 192.168.90.0/24 gw 10.0.0.1 (subnet mask=24 & gateway="10.0.0.1")


Preventing computer crashes:
-cool computer, clean dust, check hardware connections, check hard disk bad sectors
-replace & upgrade hard drive (if its upgradable)
-upgrade RAM, extend C drive, update drives


Evolving/upgrade system:
-upgrade specifications of system -(4GB RAM, i3 processor, 1TB disk) ---ram/disk/processor---> (8GB 
 RAM, 2TB disk, i7 processor)
-connect multiple systems together -all computers are connected to each other


Java constructor vs method:
-constructor -block of code which instantiate newly created object
             -create instance of class, creating object
             -invoked implicit doesn't have any return type
             -doesn't have any return type
             -if no constructor than default constructor is created by compiler itself
             -name should be same as class name
             -uppercase letter
-methods -collection of statements, always return value
         -basic function execute java code
         -no default method provided
         -invoked explicitly
         -many return value
         -name should no be same as class name
         -lowercase letter


Green data centre:
-save energy by boost airflow, consolidate servers, improve processing technology, improve air 
 management, find optimal environment





Tabulation vs memoization:
-tabulation -state transition relation is difficult to think
            -code gets complicated when lot of conditions are required
            -fast & directly access previous states from table
            -if all subproblems must be solved at least once, bottom-up dynamic programming algorithm 
             usually outperforms top-down memoized algorithm by constant factor
            -starting from 1st entry, all entries filled 1 by 1
-memoization -state transition relation is easy to think
             -code is easy & less complicated
             -slow due to lot of recursive calls & returns statements
             -subproblems in subprogram space need not be solved at all, memoized solution has 
              advantage of solving only those subproblems that are definitely required
             -unlike tabulated version, all entries of lookup table are necessarily filled in memoized 
              version, table is filled on demand


Data packets:
-data is broken down into smaller chunks (data packets)
-independently travels across internet through various devices & network & arrive at destination
-makes internet more smoother & efficient
-structure -header section (source IP, destination IP, port numbers, sequence)
           -payload section (contains actual data)
           -trailer section (informs dest, reaching end/ error checking)


Old CPU:
-DVD, floppy, DVD-RW
-IIRC light-scribe used detchable disks, plextor
-defunct cards
-esata, usb, firewire
-2 CD/ DivaDee drives, floppy disk drives (FDD), USB, earphones/ desktop microphone jacks, printer 
 hookup  
 SATA ports, volume knob
-SSD, Hard drive, 2x 8GB DDR3 RAM, Intel P8H77-V-LE motherboard, Radeon HD3450
-No lockable removable HDD
-CD reader, writer, and a floppy desk reader
-Hard drive bay
-Combo CDR/DVDR drive
-Combo CDR/DVDR drive
-Multi-port bay
-Restart button
-Floppy drive
-Empty drive slot
-Power button
-Card reader
-Lolcat sticker
-Asus sticker
-LCD screen
-Intel i5 sticker
-LCD buttons
-USB drawer
-Hard drives were smol so having a hot-swappable bay was a luxury
-Having two CDR/DVDR drives installed was definitely for burning CD's and DVD's really quickly
-The multi-port bay was long before SD cards were prevalent, and has a firewire port which was useful for early networking!
-TRS80
-RJ45
-Audio jack
-2 HDMI ports
-6 USB ports


System design:
-distributed system communication -different parts of distributed systems need to be able to talk
                                  -require agreed upon format/ protocol
                                  -lot of things can go wrong -client can't find server, server 
                                   crash mid request, server response is lost, client crashes
                                  -more reliable, fault tolerant, scalability, lower latency, 
                                   increased performance, cost efficient
-scalability -ability of system to grow & managed increased traffic
             -increased volume of data/ request
             -probability system will fail during period of time
             -slightly harder to define than hardware reliability
-mean time b/w failure = (total elapsed time = total downtime)/ number of failures
                       = (24hrs -4hrs downtime)/ 4 failures = 5hrs MTBF
-availability -amount of time system operating during period of time
              -poorly designer software requiring downtime for updates is less available
              -availability % = (available time/ total time) * 100 
                              = (23hrs/24hrs) * 100 = 95.83%
              -99% (3days,15hrs, 40min), 99.9% (8hrs, 46min), 99.99% (52min,36sec), 99.999% (5.26min)
-efficiency -how well system performs, latency & through often used as metrics
-manageability -speed & difficulty involved with maintaining system
               -hard to track bugs, difficulty in deploying updates
-char (1 byte), integer (4 bytes), UNIX timestamp (4 bytes)
-latency -avoid network calls whenever possible, use CDNs to reduce latency
         -replicate data across data centres for disaster recovery & performance
         -keep frequently accessed data in memory rather than seeking from disk, caching
-key data -500hrs of video uploaded per, 1 billion hours of video watched
-capacity estimates -storage, bandwidth
-requirements -video upload, view uploaded video, search for videos, track stat for videos, comment on 
               videos
-reliable vs available -reliable system is always available system
                       -availability can maintained by redundancy, but system many not be reliable
                       -reliable software will more profitable, providing same service requires less 
                        backup resources
                       -requirements will depend on function on software
-Mapreduce IRL
-traffic estimates -total number of requests app will receive
                   -average daily active user X average reads/writes per user
                   -10 million DAU * 30 photos viewed = 300 million photos requests
                   -10 million DAU * 1 photos viewed = 10 million photos requests
                   -300 million requests // 86400 = 3472 million photos requests
                   -10 million writes // 86400 = 115 writes per second
-memory -read requests per day * average request size * 0.2
        -300 million requests 8 500 bytes = 150 gigabytes
        -150GB * 0.2 (20%) = 30 gigabytes
        -39GB * 3 (replication) = 90 gigabytes
-bandwidth -requests per day * request size
           -300 million requests * 15 MB = 450000 gigabytes
           -450000GB // 86400 seconds = 5.2GB per second
-storage -writes per day * size of write * time to store data
         -10 million writes * 1.5MB = 15 TB per day
         -15 TB * 365 days * 10 years = 55 petabytes
-server --> CPU
        --> memory
        --> I/O
        --> bandwidth
-load balancer -balance incoming traffic to multiple servers
               -software/ hardware based
               -used to improve reliability & scalability of apps
               -Nginx, HAProxy, F5, Citrix
-simple website -user ---> internet ---> web server ---> application
-basic LB setup -user --> internet --> load balancer ---> web servers ---> application
                                                     ---> web server ---> application
-LB routing -round robin -simplest type of routing
                         -result in uneven traffic
            -least connections -route based on number of client connections to server
                               -useful for chat/ streaming applications
            -least response time -routes based on how quickly servers respond
            -IP hash -routes client to server based on HP
                     -useful for stateful sessions
-L4 vs L7 -layer-4 -only access to TCP & UDP data
                   -lack of information leads to uneven traffic
          -layer-7 -full access of HTTP protocol & data
                   -SSH termination
                   -check for authentication
                   -smarter routing options
-redundant LB setup -user --> internet ---> [load balancer [example.com][passive]] ====> web servers 
                     ----applications
-use of cacheing -improve performance of application & save money
-working of caching -client ---> app server <---> cache <---> database
-speed & performance -reading from memory is much faster than disk, 50-200x faster
                     -serve same amount of traffic with fewer resources
                     -pre-calculate & cache data
                     -most apps have far more reads than writes, perfect for caching
-caching layers -DNS, CDN, application, database
                -DNS server <------> client ----> ()()()CDN ---> app layer <------> cache ---> database
-distributed cache -works same as traditional cache
                   -build-in functionality to replicate data, shard data across servers, locate proper 
                    server for each key
-cache eviction -needed for 2 reasons -preventing stale data
                                      -caching only most valuable data to save resources
-TTL (time to live) -set time period before cache entry is deleted
                    -prevent stale data
-LRU/LFU -least recently used -once cache is full, remove last accessed key & add new key
         -least frequent used -track number of times key is accessed
                              -drop least used when cache is full
-caching strategy -cache aside (most common), read through, write through, write back
-cache consistency -maintaining consistency b/w database & cache efficiently
                   -importance depends on use case
-key information -most web apps are majority reads, around 95%+ (Facebook, twitter, google)
-scaling techniques -indexes, denormalisation, connection pooling, caching, vertical scaling
-vertical scaling -get bigger server, easiest solution when starting out
-indexes -index based on column, speeds up read performance, writes & update become slightly slower, 
          more storage required for index
-denormalisation -add redundant data to tables to reduce joins
                 -boost read performance, slows down writes
                 -risk inconsistent data across tables, code is harder to write
-connection pooling -allow multiple application thread to use same DB connection
                    -saves on overhead of independent DB connections
-caching -not directly related to DB, cache sits in front of DB to handle serving content
         -can't cache everything
         -client <-------> cache -------> DB 
         -Redis, Memcached
-replication & partitioning -read replicas -create replica servers to handle reads
                                           -master server dedicated only to writes
                                           -handle making sure new data reaches replicas
-vertical partition -divide schema of database into separate tables
                    -divide by functionality
                    -best when most data in row isn't need for most queries
                    -[rD][username][email][address] -----> [rD][username]  [email][address]


Cool things to do with home server:
-store backup of your files
-install LAMP server to run website
-install SMTP server to send emails
-use it as database backup server
-test your apps on this server before deploying them
-create private git repository server
-save videos & music & stream them over web
-for machine learning save your training data on this server & train your model (requires high end 
 server)
-use it as ftp server
-install nginx to run & test web apps
-download & install own cloud 


Setting up home server:
-install linux (not windows), fast, machine with 4GB RAM, intel core 2 duo processor, 512GB HDD
-select Ubuntu server (most server works on RHEL (red hat enterprise linux), centOS, fedora)
-making live bootable USB & setting storage configuration (hard drive partitions (OS & GTUB bootloader)
-changing root password -sudo -i (ask for password)
                        -passwd (type your root password twice)
                        -exit (exit as root)
                        -su (to login as root)
-connecting server with wifi -ethernet plugged in, install rfkill, wireless-tools, net-tools, 
                              wpasuapplicant
                             -sudo apt install ....
                             -after reboot plug out ethernet cable run -ifconfig (view private IP)
                             -from another (windows) download putty & Mac (ssh username@ip_addr)
-installing webzine -web-based interface for sysadmins
                    -setup user accounts, apache, file sharing
                    -webmin removes need to manually edit unix configuration /etc/passwd & lets manage 
                     system from console & remotely


Programming fundamentals:
-conversional programming (1950) -execute 1 statement after other
        -uses GOTO to jump
        -single entrance, single exit
        -subroutine (GOSUB) -provided natural division of labor
                            -can be reused in other programs
                            -elimination of spaghetti-code
-programming paradigm -set of coherent abstraction used to effectively model problem/domain
                      -mode of thinking
                      -procedural -program = algorithms + data good for decomposition
                                  -individual statements (FORTRAN, ALGOL60, ALGOL68, cobol, pascal, C)
                                  -imperative (command driven)
                      -functional -program = functions (function good for reasoning)
                                  -LISP, scheme, CLOS, ML, Haskell)
                                  -declarative (rule based)
                      -logic programming -program = facts + rules good for searching
                                         -inference engine drives things (prolog, GHC)
                                         -declarative (rule based)
                      -objects oriented -program = objects + messages good for encapsulation
                                        -bring together data & operations (C++, Eiffel, python, java)
                                        -imperative (command driven)
-common constructs -basic data type (numbers), variables, expressions, statements, keywords, control 
                    constructs, procedures, comments, errors
-uncommon constructs -type declarative, special types (string, arrays, metrics), sequential execution, 
        concurrency construct, packages/ modules, objects, general function, generics, modifiable state
-forth generation languages (1980)
-non-procedural languages (problem-oriented) -user specifies what needs to be done & accomplished
                                             -less user training is required
                                             -designed to solve specific problems
-diverse types of 4GLs -spreadsheet languages, database query, decision support system, statistics, 
                        simulation, optimisation, decision analysis, presentation graphics systems
-high-level procedural languages makes programming easier 
-second generation -interpreters & virtual machine language (speed coding, UNCOL)
                   -intermediate b/w statements & operators of high level programming languages & 
                    register number & operation codes of native machine programming language
                   -virtual language source code --pseudocode compiler--> virtual machine language file   
                    -----> Macintosh interpreter, UNIX interpreter, PC interpreter ----> machine code
                   -each CPU has its own specific machine language
                   -program must be translated into machine language before executed on particular type 
                    of CPU
-5 generation -1st machine language (machine codes)
              -2nd assembly language (symbolic assemblers)
              -3rd high level procedural languages (machine independent) imperative languages
              -4th non-procedural languages (domain specific application generators)
              -5th natural languages 
              -each generation is at higher level of abstraction
-procedure based programming -only 4 programming constructs -sequence, selection, iteration, recursion
                             -modularisation
-structured programming -divide & conquer -break large scale problems into smaller components that are 
                         constructed independently
                        -program is collection of procedures, each containing sequences of instructions
                        -functional decomposition
                        -main --> task1,2,3 ----> sub task1.1, 1.2, 1.3 ---> sub task 1.2.1
                        -its rarely possible anticipate design of completed system before its 
                         implemented
                        -larger system, more restricting takes place
                        -data moved around, argument/parameter associations
                        -data was global, works fine for tiny programs, not good when variables number 
                         in hundreds      


Tools for hackers:
-raspberry pi, rubber ducky USB, wifi pine apple, proxy mark 3 kit, LAN turtle, Ubertooth one


How headphone & speakers make sound:
-sound is just vibrations & eardrum makes vibration lets you hear sound
-recording voice by ballon & pencil
-focusing sound on diaphragm --> attaching needle on wax record --> chemical bath for hardening
-scotch tapes 
-diaphragm vibrates --> changes energy --> fluctuation in electricity
-diaphragm connected to capacitor (fancy plate) 
-change in electricity --> change in magnetic field on tape surface --> create pattern of 
 magnetisation --> exactly replicates original sound wave
-In CD we take electricity --> 0s & 1s (represent original sound waves) --> voltage high 1 & low 
 0 --> laser pointing at disc to put that 0s & 1s on disc --> (pit 1 & land 0) --> bouncing of 
 laser to read CD --> digital analog converter (DAC) --> generate certain amount of electricity 
-record players 


[source --> amplifier --> volume control --> speaker --> speaker --> speaker]
[source --> microphone --> mixer --> amplifier --> speaker]


VPN protocols:
-PPTP -fast, encryption & secure browser, stability, media sharing, compatible with (OS & device)
-L2TP -fast, encryption & secure browser, stability, media sharing, compatible with (OS & device)
-IPSec -fast, encryption & secure browser, stability, media sharing, compatible with (OS & device)
-OpenVPN TCP -medium, encryption & secure browser, stability, media sharing, compatible with (OS & 
              device)
-OpenVPN UDP -fast, encryption & secure browser, stability, media sharing, compatible with (OS & 
              device)
-SSTP -medium, encryption & secure browser, stability, media sharing, compatible with (OS & device)


IPv4 vs IPv6:
-IPv4 -117.145.14.56
      -32 bit numeric address written in 4 numbers separated by period
      -each octal ranges (0-255) produces 4 billion IP addresses
      -computer only understand IP in binary form 
      -4th & initially widely used version of internet protocol
      -charge of distributing data packets throughout network
      -maximum unique addresses are 4294967296
      -network address & host address are 2 components of each address
      -each octet (8 bits) of address is represented by its decimal value
-IPv6 -2001:0DB8:3C4D:7777:0260:3EFF:FE15:9501
      -next generation of IP addresses
      -128 bit hexadecimal address
      -produces 340 un-decillion IP address
      -made up of 8 sets with 16 bits
      -each hexadecimal character represent 4 bits (8,4,2,1)
      -offers enhanced security features like integrated authentication & encryption
      -spread among websites, internet service providers
      -hexadecimal, double digit number needs to represented by single alphabet (A(10)-F(15))


Node -each computer on network is node


-nano eldenring.sh
-chmod +x eldenring.sh
-ls -al


MPLs:
-multi protocol cable switching


Metro ethernet:
-


NIC:
-network interface card connects computer to network
-circuit board with network adapter installed on computer
-converts incoming serial data into parallel data 
-cyber security IDS/IPS
-acts as interface through which computer connected to network
-converts data in electronic signals & transfer them through cable 


802.11 wireless:
-IEEE is international organisation for advancement of technology related to electricity
-5 wireless standards -A (54Mbps, 5GHz), B (11Mbps, 2.4GHz), G (54Mbps, 2.4GHz), N (600Mbps, 5 &  
                       2.4GHz), AC (6933Mbps, 5GHz)


Monitoring website parameters:
-page size
-broken links
-time to 1st byte
-CPU utilisation
-database performance
-SSL certificate
-domain name expiration dates
-SEO


Internet bandwidth:
-bandwidth -measurement in bits/seconds (bps) & measurement of how much data is transferred (capacity)
-100mbps (100 megabits of data can be transferred over network in 1 second)
-AOL dialup connection (America online) using 56kbps connection using phone line
-calculations are just on paper, real world has internet traffic, lags
-ISP only gives 100mbps download speed not upload speed (maybe 10mbps)
-speed -rate at which data is being transmitted in network
       -depends on network reception capacity, server's ability to handle data transfer to multiple 
        clients, low network bandwidth impacts network speed (bandwidth limitation)
-25 Mbps 4k ultra -HD video streaming with service like Netflix, YouTube
-5 Mbps -HD 1080p video streaming with service like Netflix, YouTube
-3 Mbps -720p video calling, AS zoom meeting
-1.5 Mbps -broadband
-0.5 Mbps -livestreaming (webinar)
-150 Kbps -screen sharing
-80 Kbps -VoIP calling


NAS vs SAN:
-Nas -network attached storage (storing data in centralised location & can be accessed from all 
      devices)
     -having multiple hard drives in RAID configuration
     -has network interface card & directly attached to switch & router 
     -data can be accessed over network
     -can be accessed by other devices (desktop, laptop, servers, shared device)
     -used in homes & medium size businesses 
     -single point failure 
-San -storage area network (special high speed network that stores & provides access to large  
      amount of data)
     -dedicated network used for network storage
     -network consists of multiple disk arrays switches & servers
     -fault tolerant because of more than 1 devices
     -data shared among several disk arrays
     -when server accesses data on San --> access data on local hard drive
     -highly scalable & adding more storage space is easy --> without interrupting on network 
     -high speed network, all devices are interconnected, very expensive
     -interconnected using fibre channel
     -2GB/seconds --> 128GB/seconds
     -iSCSI (internet small computer system interface) -cheaper alternative to fibre channel, not 
      fast as fibre channel


File system:
-provides way for how data is stored & organised on storage device
-file & partition size limit
-FAT32 -file allocation table
       -most compatible
       -4GB file & 2TB partition limit
       -flash drive, memory cards, external drives
       -no special features
-exFAT -extended file allocation table
       -not compatible as FAT32
       -compatible will all version of windows & other modern OS
       -compatible with windows & with other modern device & OS
       -limitless
       -flash drives, memory card, external drives
       -no special features
-NTFS -new technology file system
      -only fully compatible with windows
      -least compatible among 3
      -Macs & some version of linux can only read NTFS
      -support more features than FAT32 & exFAT
      -support limitless partitions size
      -windows OS device & drives only accessed by windows
      -security, encryption, disk quotas, proves versions


FAT vs FAT32 vs NTFS:
-file system structure
-FAT -[reserved area][1st FAT area][2nd FAT area][boot directory][data area]
-FAT32 -[reserved area][1st FAT area][2nd FAT area][data area]
-NTFS -[$MFT (master file table)][$MFT (mirror image of FAT)][$Volume (volume file)][....][$boot (boot 
 file)][....][directory][data area]


DVD/CD:
-burn starts near the centre and moves to the outer edge of the disc
-blank DVD disc is usually purplish in colour ( for -R, + and RWs) you can easily see in the light, 
 the now greyish tracing of the burned surface


Types of SD cards:
-SD -full SD, mini SD, micro SD (less than 16GB)
-SDHC -full SD, mini SD, micro SD (4GB-64GB)
-SDXC -full SD, mini SD, micro SD (64GB-2TB)
-types of SIM card -full SIM, mini SIM, micro SIM, nano SIM, embedded SIM
-connects device to mobile network
-allows user to make calls, send text, connect to internet
-components -I/O, optional pad for USB, clock, reset, Vcc, GND, Vpp
-application on modern SIM card -basic function -identification (IMSI), authentication (KI & hash fun)
                                -simple file system -address book, SMS messages, session key
                                -custom java app (JVM) -roaming mgmt, payment, tracking


Storage devices:
-flash drive -portable storage device use NAND flash memory & used for data transfer & backup due to 
              small size
-memory cards -used in cameras, smartphones, portable devices, memory cards (SD, microSD, compact 
               flash)
-optical drive -less common, CD, DVD, blue ray drives used to read & write data optical discs
-tape drive -used for long term archival storage due to low cost per gigabyte, high capacity, 
             reliability
-NAS -network attached storage, specialised storage appliance connected to network, used for shared 
      storage & backup
-DAS -directly connected to single computer, server, USB, eSATA, thunderbolt
-enterprise storage arrays -high capacity storage systems used in data centres, RAID for redundancy & 
                            performance
-magnetic tape libraries -libraries house multiple tape drives can store vast amounts of data
-NVMe storage -non volatile memory express, SSDs use faster interface providing extremely high speed    
               storage for workstations & server
-microSD card -smaller memory cards primarily used in mobile devices (smartphones & tablets)


Parts of computer:
-monitor, mouse, microphone, USB ports, optical drive, solid state drive, GPU, keyboard, speaker, 
 webcam, power button, CPU socket, chipset, power connector, expensive card, display port, HDMI 
 port, VGA port, Audio jack, hard disk drive, external drive, CPU cooler. Trackball, wifi modem, 
 CPU, motherboard, RAM, power supply unit, sound card, video card, network card, floppy disk, 
 card reader, processor, modem, barcode reader, ethernet cable, VGA cable, router, printer, 
 ethernet port]


-jobs              (lists active jobs running in background)
-kill -9 18517     (forcefully kills process of PID 18517 using signal 9 (SIGKILL))
-kill -9 21374     
-kill -19 21374    (stops process of PID 21374 using signal 19 (SIGSTOP))
-sleep 900         (pauses terminal for 900 seconds (15 minutes))
-ps                (displays currently running processes)
-kill -l           (lists all available signal)
-ping -c 300 hackthebox.eu &  (sends 300 ICMP ping packets to hackthebox.eu & runs command in 
 background)
-PING hackthebox.eu 
-bg3               (moves job 3 to background)


-echo $OLDPWD
-echo $PWD
-C:\Windows\system32 (windows)----> /lib/bin/home/mnt/root (linux)


-wget localhost:7600
-curl -v localhost:8080
-curl -I localhost:8080
-curl -o coolwebsite localhost:8080
-sudo nano /etc/apache2/ports.conf
-systemctl start apache2
-php -5 127.0.0.1 (loop-break address) (NIC)
-cd website/
-nano index.html
-python -m http.server 7600
-ls
-python -m http.server


-ping -c 100 networkchuck.com
-ps --help simple
-ps -auz | grep firefox
-ps -aux 
-adduser thor
-usermod -h
-su - ironman
-cd downloads
-dpkg -I discord-0.0.15.deb
-dpkg (low level), apt (high level)


-sudo twint -u networkchuck --since "2020-10"
-sudo twint -u networkchuck --near Dallas


Collision vs broadcast domain:
-collision -part of network where data packets can collide with each other
           -slows down device because to wait random amount of time to resend data
           -hubs are being used, hubs are half duplex
           -every port on hub makes 1 bit collision domain
           -switches are better, full-duplex 
-broadcast domain -ports of network when devices can receive broadcast from other devices on same 
                   network
                  -both hubs & switches forward broadcast
                  -placing router in b/w to separate out broadcast domain into 2 BD
                  -broadcast cannot pass routers


Guest network:
-allows visitors to have internet access without giving primary password/ access to device of home
-spreading of virus & security risk
-dividing network into guest wifi & home wifi
-SSID & password
-both guest wifi & home wifi are broadcasted from same radio frequency band (not 2 separate band)


How computer works:
-every information can be represented in terms of 0s & 1s (on or off)
-circuits in computers are way way faster
-computer circuits are microscopic nowadays
-smaller circuit = less electrical circuit
-pixel/ resolution/ millions of RGB triplets/ 
-transistor -small semiconductor acts as gate (either turned off/on)
-CPU has millions, billions, zillions of transistors in it
-high end processors installed with plain lined chip
-logic gates 


Primary vs secondary memory:
-primary -main memory where data & information are stored temporarily
         -data is directly accessed by processing unit
         -volatile memory measuring data can't be retained in case of power failure
         -stored in semiconductor chips (expensive)
         -categorised into cache memory & random access memory (RAM)
         -relatively faster than secondary memory (volatile nature)
         -holds data, information currently being used by processing unit
         -accessed by data bus, expensive 
-secondary -external memory where data is stored permanently
           -data can't be accessed directly by processor
           -non-volatile memory so data can be retained even after power failure 
           -memory is stored in external storage device (hard disks, flash drivers) 
           -permanent storage device (CD, DVD, HDD, floopy disk)
           -slower than primary memory (backup memory) 
           -stores substantial amount of data & information ranging from GB to TB
           -cheaper, accessed by I/O channels


How graphics card works:
-36 trillions calculations in second to play cyberpunk 77
-ideal for video game graphics, crypto mining, neural network
-less flexible than CPU, can't run OS, interface, input devices on networks
-printed circuit board (PCB) -large chip (Die) guid from 28 billion transistors, processing cores 
 (hierarchical organisation), chip divided into 7 graphical processing cluster (GPCs) --> 12 
 streaming multiprocessors (SMs) --> 4 wraps & 1 ray tracing core --> 32 Cuda/ shading cores & 1 
 tensor core
-entire GPU has 10752 CUDA cores, 336 tensor cores, 84 ray tracing cores
-CUDA core -simple binary calculator (+,*, etc)
           -410000 transistors, 50000 transistors performs calculation A*B+C (fussed multiply FMA)
           -common operation performed by graphics card, 1/2 of CUDA core execute FMA using 32-bit   
            floating point numbers & other 1/2 use 32 bit integers or 32 bit floating point numbers 
           -other sections solves negative numbers, bit shifting, bit masking, collecting incoming 
            queuing & instructions ----> output in result
           -single core = simple calculator with multiple functions
           -1 multiple & 1 addition in 1 clock cycle  
           -10496 cores & 1.7 GHz clocks ----> get 0.6 trillion calculations/ second
-GA1O2 chip -12 graphics memory controller, NVLink controller, PCIe interface, 6MB SRAM memory cache, 
             Gigathread engine, manages all graphics processing cluster & streaming multiprocessor 
             inside
-tensor core -matrix multiplication & addition calculator, geometric transformation, working NN
-ray tracing -largest size but fewest, executing ray tracing algorithm 
-on edges of chip 12 memory graphics controllers, NVlink controller & PCIe interface
-on bottom 6-megabytes level 2 SRAM memory cache, Gigathread engine
-3080, 3090, 3080Ti, 3090Ti all use same GA102 chip design (manages all graphics processing clusters & 
 streaming multiprocess inside 
-display ports & HDMI port
-12V incoming power connector
-PCIe pins plug into motherboard, voltage regulator module (converts 12V ---> 1.1Volt) & provides 100s  
 of watts of power to GPU
-4 heat pipes carry heat from GPU to radiator fins ---> fans remove heat
-24GB of graphics memory chip (GDDR6X SDRAM)
-24 chips transfer combine 384 bits at time = bus width, bandwidth = 1.15TB/sec
-to render video game ---> different chunks of scene continuously being used transferred b/w graphics 
 card & GPU
-GPUs are data hungry machines & needs to be fed terabytes of terabytes of data
-2 calculations per core x10495 cores x1.7Hz = 35.6 trillion calculations/second
-these 24 chips transfers combines = 384 bits at time (bus width)
-total data transferred = 1.15 terabytes of data/ seconds (bandwidth)
-sticks of DRAM that supports CPU only have 64-bit bus width & maximum bandwidth closer to 64GB
-GDDR7 -uses 3 different encoding schemes to combine binary bits into ternary digits
       -3 bits ---> 2 ternary digits, 11 bits ---> 7 ternary digit, 2 bits ---> 1 ternary digits
       -PAM3 symbols with voltages 0s, 1s, -1s, reduce encoder complexity, improve signal/ noise ratio,
        improve efficiency
       -PAM4 to send 2 bits of data using 4 different voltage levels
-high bandwidth memory -surrounds AI chip, stacks of memory chip, uses TSVs (through silicon vias) & 
                        connect stack into single chip
                       -single cube = 24-36GB memory (total 192GB memory) around AI chip
-AI accelerator system -make sure use HBM3E uses 30% less power
-embarrassing parallel operations -computer problem with little or no effort needed to divide problem 
                                   into several tasks
                                  -video game rendering & bitcoin mining
                                  -SIMD (single instruction multiple data) when same instruction/ step 
                                   repeated across 1000s & millions of different numbers
                                  -
-computational architecture -each instruction completed by thread, this thread match to single CUDA 
                             cores, threads bundled into groups of 32 (wraps)
                            -same sequence of instructions issued to all threads in wrap
                            -wraps grouped into thread blocks handled by streaming multiprocessor
                            -threads blocks grouped into grids computed across overall GPU
                            -all computations managed & scheduled by Giga thread engine (efficiently 
                             maps thread blocks to available streaming multiprocessor)
                            -newer GPU use SIMT (single instruction multiple thread)
-bitcoin mining -


[13% of new Linux users encounter hardware compatibility problems due to outdated kernels in Linux 
 distributions]
[NVIDIA hated so much by linux users]


Server for website hosting:
-hosting small business website with dozens of pages with 100 visitors/ day traffic
-site can be easily hosted with old PC & even raspberry pie
-e-commerce website with shopping cart system with 1000 visitors/ day
-database & security on e-commerce site put much strain on compute, storage & memory resources
-running linux
-multiple CPUs & as much RAM server 
-expandable storage
-processor -server-grade CPU with multiple cores (good balance b/w performance & power consumption
-memory -sufficient RAM for smooth multitasking & handling data-intensive tasks, at least 8GB RAM, 
         scale upto 16GB/ 32GB 
-storage -reliable hard drives, (SSDs), RAID configurations for data redundancy & performance
-network connectivity -multiple gigabit ethernet ports to support fast & stable network 
-rack-mounted server & tower server
-DELL PowerEdge T40 (Intel Xeon E-2224G processor, upto 64GB of ECC DDR4 RAM)
-DELL PowerEdge T340 (offers a range of processor, upto 64GB of ECC DDR4 RAM)
-DELL PowerEdge R240 (Intel Xeon E-2224 processor, upto 64GB of ECC DDR4 RAM)
-HPE ProLiant MicroServer Gen10 Plus (AMD Athlon 3000-series processor, upto 32GB of ECC DDR4 RAM)
-HPE ProLiant ML30 Gen10 (64GB of ECC DDR4 RAM)
-HPE ProLiant DL20 Gen10 (Intel Xeon E-2100 processor, upto 64GB of ECC DDR4 RAM)


-How computer hardware work:
-CPU -cover on top (integrated heat spreader), small metal package, integrated circuit (Die) mounted 
      on printed circuit board distribute 1200 connection points to landing pads, interface with 
      landing grid array on motherboard 
    -integrated circuit board has 10 cores (run programs & instructions)
    -transistors are very small (few nano meters) performing billions of operations every second
    -shared L3 memory cache, ring interconnect, integrated graphic processor, memory controller, 
     system agent-platform I/O
-motherboard -massive printed circuit board with 1000s of wires running inside
             -variety of microchips, components, sockets, ports, slots, headers, connectors soldered
             -chipset -expensive, connect directly to system agent section in CPU 
                      -data flowing through ethernet, data going to & from SSD & hard drives plugged 
                       into SATA ports, some PCIE slots, keyboard, mouse, USB devices  
             -voltage regulator module (VRM) -power supply ---> VRM ----> 1.3Volts used by CPU 
             -heat sinks are placed on top, CPU consumes power = 16 LED bulbs 
             -CPU cooling uses pump to circulate liquid through tubes into radiators channel, pump is 
              brushless DC motor made by PCB, control chip, stator on dry side, barrier, magnetic rotor
             -no mechanical connection b/w rotor & stator 
-power supply -main transformer reduces voltage & bridges isolation boundary b/w primary side high 
               voltage & secondary side lower voltage
              -control PCB ensures stable output voltage & sends adjustment signals to switching power
               transistor on primary side using opto isolator 
-CPU communicate directly with DRAM through memory channels running inside motherboard
-mouse -scroll wheel, infrared light, image sensor, multiple lenses with amazing details
-keyboard -plastic traces carry electricity to each key & pressing completes circuit sensed by 
           processor 


Essential mathematics for game development:
-CPU based ray tracing -slow (single frame in toy story takes 60-160 hours hours)
                       -image order rendering 
-object order rendering -faster, drawing each object 1 after other, better GPU
-line-plane intersection
-orthographic projection -vulken's canonical viewing volume
-perspective transformation
-homogeneous coordinate division
-constructing the perspective matrix
-non-linear z depths & z fighting 
-perspective projection transformation


Wireless access point & wifi router:
-wifi router -separate device/ built into modem
             -allows multiple wired & wireless devices to join in LAN
             -connects directly to modem 
             -has build-in switch to connect with multiple ports using ethernet cable 
             -able to connect with both wireless & wired devices
             -has firewall
             -build-in DHCP service (automatically assigns IP addresses to devices)
             -has WAN (internet) port 
             -used in homes & small businesses
-wireless access point -relays data b/w wired network & wireless devices
                       -further extend existing wireless signal 
                       -no firewall
                       -wireless hub used by wireless devices to connect with existing wired 
                        network
                       -wireless AP connect to router connected to modem 
                       -used by medium to large organisations
                       -WAP are strategically placed & each connects to router using ethernet cable
                       -all networks are managed by 1 single router 
                       -using wifi routers makes it harder to manage (WAP makes easy)


[user] [((shell, application)(low level utilities(kernel(hardware))))]
[hardware][kernel>OS>shell][terminal][user]


Half duplex vs full duplex:
-half -network where point to point system where 2 devices are connected to each other using 
       network cable & can communicate bot direction but 1 direction at time
      -walkie-talkie, hub
-full -communicate with both direction at same time, 2X bandwidth of full duplex
      -telephone communication, switch


Networking tools:
-cable stripper to cut end of cable --> arranging wire in correct order --> attaching RJ45
-wire crimping crimps connectors to twisted pair cable
-cable tester -verifying continuity & if wires arranged correctly
	      -connecting both ends of cable into connector
	      -cycle through all pins in cable --> make sure cable is properly wired & connected
-tone generator -used for tracing cable from 1 end to other 
	        -patch panel has multiple cable plugged into it & this patch panel is located in 
		 different part of building
	        -helps in finding which cable is connected to which by generating tone through 
                 cable to other end & jump probe cable to cable to find right 1
-time domain reflectometer -TDR (electronic equipment used to test cables (twisted pair & coaxial 
			   cable)
			  -transmitting signal though cable & signal reflected back to TDR
			  -pin points if problem in any point 
			  -problem -conductors, loose connectors, shorts, crimps, bends 
-optical time domain reflectometer -same as TDR but for finer optics & transmits light
-light meter -simpler than OTDR & measures how much light is going though fibre cable
-RJ45 loopback adapter -performs loopback test to see problems with network ports or connection 	
		       issues, wire in network cable are arranged in certain way into RJ45 
		       connector, transmitted signal is looped backed into same connector
-butt set -carried by lot of telephone technicians, device that resembles telephone & used to test 
	   monitor lines
          -problems like noise & diaton
-punchdown -tool that resembles screw driver, used to punch wires into punch down block 
	   -punchdown clock is used with telephone equipment where wires are installed 
	   -blocks makes it easy to connect wires
-multimedia -used test electric circuit 
            -measure voltage & network devices, check power outlets, continuity & network cable
            -analog & digital signals


NAT:
-network address translation
-expensive, unnecessary, waste of public IP addresses
-router can assign our device private IP addresses
-translates private to public & public to private
-helps preserve limited amount of IPv4 public IP address
-IPv4 address (67.123.45.67)
-4 billion public IPv4 addresses available
-engineers develop private IP address & NAT
-types of IPv4 -public -publicity registered on internet (66.94.234.13)
                       -public IP to access internet 
               -private -not publicly registered (10.0.0.1)
                        -cannot directly access internet with private IP
                        -only used internally


Subnetting:
-creating subnet -manageability, security, improve performance
-IP address -identifier for computer or device on network
            -every needs IP address to communicate over internet (IPv4)
            -192:168:1:0 -separated by periods called octet (0-255)
            -host address & network address (assigned to network) 
-subnet mask resembles IP address used for network by masking network portion of IP address
-255:255:255:0 --> 11111111:11111111:11111111:00000000 (network:network:network:host)
-8bit octet chart (128,64,32,16,8,4,2,1)
-1 -number it represents is count
-0 -number it represents is not count
-networks are broken down into smaller networks by using routers (breaking in sub networks)
-subnetting -by changing default subnet mask by borrowing some of bits from host portion
-class A (1st octet address 1-126, default subnet mask 255.0.0.0)
-class B (1st octet address 127-191, default subnet mask 255.255.0.0)
-class C (1st octet address 192-223, default subnet mask 255.255.255.0) (can produce 254 hosts)
-CDIR (classes inter domain routing (192.168.1.0 /24) --> 24 1s (24 bits in length)
-IP address = like phone number for our devices
-ipconfig
-ifconfig
-router is like Oprah of your IP addresses (gives your devices IP address (DHCP)
-subnet mask look similar to IP address
-each dot in-between = octets
-3 numbers = network portion & last 1 = host 
-2 parts of IP addresses are untouchable (broadcast address & network address)
-4.3 billion IP address 
-there are large group of IP addresses that we can't even use
-subnet mask = determines how big network is & Numbers IP address stays same & changes
-government entities & big companies need lot of IP addresses
-some big tech companies own 16 million IP addresses
-IANA (internet assigned number authority) (allocate or assign  IP addresses to network)
-cutting huge IP addresses & cutting them into small sizes (big massive --> sub-smaller net)
-default subnet mask = 2550000 (minimum)
-converting decimal --> binary & vice versa
-8 bits = 1 bit
-subnet mask = every IP address has subnet mask (tells all secrets about network)
	       managing IP addresses in large & small companies is really hard
	       0 tells us which bits are host bits
-converting 1 network into 4 subnetworks = we would need 2 bits (for 17 we need 5 bits from host)
-we will hack bits & flip them (1 -> 0 & 0 -> 1)
-each of network will have subnet mask of 255.255.255.192
-regular version & inside notation & ranges
-0s are host bit & 1s are network bits
-1st address & broadcast address of our network are reserve
-reverse engineering subnet situation can also occurs (what network address, what broadcast address 
 & what network range are you on)
-subnet can be of different sizes 


Process vs thread:
-process -any program is in execution
         -takes more time to terminate
         -takes more time for creation
         -takes more time for context switching
         -process is less efficient in terms of communication
         -multiprogramming hold concepts of multiprocess
         -process is isolated
         -heavyweight process
         -process switching uses interface in OS 
         -1 process blocked ---> not affect execution of other processes
         -has its own process control block, stack, address space
         -changes to parent process don't affect child processes 
         -system call is involved & process doesn't share data with each other
-thread -segment of process
        -take less time to terminate
        -takes less time for creation
        -takes less time for contesting switching
        -more efficient in terms of communication
        -don't need multi programs in action of multiple threads
        -shares memory, lightweight as each thread in process shares code, data & resources
        -switching doesn't require calling OS & cause interrupt to kernel
        -user level thread is blocked ---> all other user-level threads are blocked
        -parents PCB its own thread control block & stack & common address space
        -no system call involved, created using API, share data with each other


Cores vs threads:
-threads -sequences of commands given to cores 
         -conveyors belts of products being sent to worker
         -logical units created by OS for parallel processing
         -dependent on cores, sharing core’s resources
         -threads allow for concurrency, not true parallelism unless more cores are available
         -multi-threading improve performance but less effective than adding more cores
         -multiple threads run on single core but share resources
         -share core resources like cache, CPU cycles, registers
         -hyper-threading or SMT
-core -physical processing units within CPU
      -multiple cores enable true parallelism
      -adding more cores significantly increases performance
      -1 core = 1 task (support multiple threads)
      -cores dedicated resources (registers, cache)
      -quad-core processor (4 cores)
-physical core -hardware on CPU
-logical core -like code, more like threads of computer
              -like pathways that computer has to process information
-4 physical core x 1 threads = 4 logical cores
-4 physical core x 2 threads = 8 logical cores
-thread > core gives process efficiency
-single core CPU -single core which used to processing data, oldest PCU, performs 1 task at time
-dual core CPU -2 cores + single integrated circuit
-quad core CPU -2 dual core & single integrated circuit


Clock speed:
-how many clocks cycles can CPU perform in 1 second (Hz)
-GHz (1 billion Hz) 
-clock cycle is single electrical pulse in CPU (basic task, accessing memory, data)
-core speed = (bus/base speed) * multiple = 100MHz * 35 = 3500MHz
-base clock is used with RAMs, graphics card, any other chip
-overclocking -raising clock speed higher than manufacturing settings (Pc might crash)
-overclocking comes with over vaulting ---> more heat


Wifi card:
-802.11ac WiFi (2x2 MU-MIMO) + Bluetooth 4.2
-wifi card enables your pc to connect to wifi, ASUS ROG STRIX Z370-E, you get built in wifi + 
 bluetooth
-PCI-E card that you open up your case and install like this one, or a USB adapter that you just 
 plug in to your PC like this one
-PCI-E combo adapter


CPU vs GPU:
-CPU -central processing unit
     -traditional programming written for CPU sequential execution
     -low compute density
     -complex control logic, large cache (L1$/L2$)
     -low latency tolerance, newer CPU have more parallelism
     -shallow pipelines (<30 stages)
     -fewer execution units (ALUs)
     -4-8 cores
     -good for serial processing
     -quickly processes task require interactivity
-GPU -graphical processing unit
     -100-1000 cores
     -break job into separate tasks to process simultaneously
     -require additional software to convert CPU function to GPU functions for || execution
     -high compute density
     -high computation per memory access
     -many parallel execution units (ALU)
     -graphics is best known case of parallelism
     -high throughput
     -high latency tolerance
     -better flow control logic 
     -scatter/gather memory access
     -don't have 1 way pipeline anymore
     -deep pipelines (100s of stages)


Wifi vs bluetooth:
-bluetooth -used for connecting devices to each other
           -bluetooth uses FHSS (frequency hopping spread spectrum)
           -signal hops b/w 79 different channels
           -bluetooth is low power, wireless technology uses short range radio provides way to 
            connect nearby devices each other
           -changes channels 1600 times per second
           -range 30 feet (10m), bandwidth 800kbps
           -frequency 2.4GHz, power consumption & cost is less
           -slower transfer rate & shorter range
           -connecting keyboard, mouse, monitor 
           -uses less power/ longer battery life
           -less vulnerable to interferences
           -simpler to use/ no passwords
-wifi -used to connecting devices to internet 
      -uses radio waves allows devices to be ask to connect to internet
      -faster transfer rate & longer range
      -range (100-300 feet (31m-91m)), bandwidth 1.1mbps
      -frequency 2.4GHz, power consumption & cost is more
      -phone, AirPods, speaker
      -uses more power/ shorter battery life
      -vulnerable to interference
      -require password
-both operate at 2.4GHz


Telnet:
-teletype network
-terminal emulator program used to access remote servers
-used for virtual terminal service given by ISO, enable 1 local machine to connect with another
-display anything performed on remote computer in local computer
-operates on client/ server principle
-only sends commands remote servers, not secure (no encryption), used to access device within LAN
-used to configure router & switches
-run program, create folder, delete files, transfer files, browser directory, start/stop service
-telnet rainmaker.wuderground.com
-telnet freechess.org 5000
-telnet towel.blinkenlights.nl
-used to test ports
-tenet 192.168.0.15 25
-SSH provides password & public key authentication
-protect data from being attacked or stolen
-may have to be used when working with older equipment


Dedicated server:
-server computer controls & provides services hardware & software resources to other computer on 
 network
-doesn't allow user to use as workstation
-pros -high availability, provide 100% uptime
      -better performance, handles high traffic, slowing down your site speed
      -better security, better control
-cons -higher cost, maintenance cost
      -require tech experience, need to operate & manage server by themselves
      -hosting deals with responsibility only in case of shared device


[Internet explorer, theworld, opera, safari, Mozilla Firefox, Maxthon, chrome, netscape, Tencent  
 traveler]
[amazon AWS, cloud-flare]
[Ipython, tableau, excel]


Javascript:
-stop & read --> google it --> logging --> debugger --> reproduce bug --> TDD --> types & linter
-dir -console.dir(), console.dir(document.location)
-levels -console.info()
-table -console.table(), console.table({name: "ankur", age: "18", gender: "male"})


Powerline networking:
-extremely convenient, no extra cable, no wifi
-same lines are used to carry electricity & network data at different frequencies
-works similar to DSL technology
-carry both data & voice on different frequencies
-power-line network adapter
-new technology give ability to network using existing electrical systems of building
-gives ability to ethernet networking over power


Coaxial vs fiber optic vs ethernet:
-coaxial -consists of central copper conductor surrounded by insulation & metal shield, helps transmit 
          electrical signal with minimal interface
         -multi-core & single core
-fibre -composed of glass/ plastic fibres transmits data with pulses, ideal for high speed data     
        transmission over long distance
       -single mode & multi mode fibre
-ethernet -connected over local area network & various speed depending on cable type
          -CAT5, CAT6, CAT5E, CAT6A


Internet access:
-cable network -high speed access technology uses cable modem with attached coaxial cable which 
                provides link to internet service provider
-broadband cable -provided by same provider that provides television cable to customers
                 -leverages existing infrastructure from cable TV to cover large geographical areas
                 -cable speed -25MB/sec to 400MB/sec
                 -modem with wifi router combo (gateway) receiving from ISP
                 -provided coaxial cable routed into home & attach it back of device
                 -switch & wifi router connect multiple wired & wireless devices 
                 -internet bandwidth has to shared with other neighbours
-DSL -digital subscriber line
     -used by businesses & home to access broadband data over internet
     -carry both voice & data at same time over phone line
     -DSL modem 
     -high speed connection, not fast as cable, no need to share bandwidth
     -has own dedicated connection
     -speed 5MB/sec to 100MB/sec
     -ADSL (asymmetric digital subscriber line) download speed > upload speed, cheapest form of DSL)
     -SDSL (symmetric digital subscriber line) download speed = upload speed
     -VDSL (very high bit rate digital subscriber line), very fast form of DS, uses copper wires
      3X faster than ADSL
-fibre -fastest internet speed, download & upload speed 1000MB/sec, uses light to send data
       -fibre can travel longer distances than DSL
       -signals in copper wires can be affected by electromagnetic interference
       -less vulnerable to interference


Ethernet cables:
-UTP -unshielded twisted pair
     -most common type of cable used today
     -consists of 4 pair of colour coated wires twisted around each other to prevent electromagnetic    
      interference
-STP -shielded twisted pair has foil shield to cover wires for extra protection
     -mainly used in industrial purposes
-custom cables -buying bulk roll of twisted pari cable 
               -wire them correctly & connect RJ45 connector on each end
               -remove protected shield from each end of cable to expose wire
               -different orders of wires depends on different purposes 
               -most common used in LAN -straight patch cable
               -568A (WG, G, WO, B, WB, O, WBrown, Brown) & 568B (WO, O, WG, B, WB, G, WBrown)
               -straight (patch) cable -when both ends of cables are wired using same standard
                                       -connect computers to hubs, routers, switches (dissimilar 
                                        devices together)
               -cross over cable -used on LAN (both ends of cable are wired using 2 different 
                                  standard 1 with A & other with B)
                                 -used to connect 2 similar devices
-types of twisted pair cables -difference b/w maximum speed they can handle without having any 
                               crosstalk (interference)
                              -number represents tightness of twist applied on wires
                              -CAT3 (10MB/sec), CAT5 (100MB/sec), CAT5e(1GB/sec), CAT6 (1GB/sec 
                               cable length under 100m), CAT6a (10GB/sec augmented), CAT7 (10GB/sec  
                               added shielding to wires) 


DHCP:
-dynamic host configuration protocol
-every computer needs to have IP address
-static IP -user assigns IP manually
           -opening computer network configuration page
           -entering DNS server, subnet mask, default gateway
-dynamic IP -computer gets IP address automatically from dhcp server
            -assign IP address, subnet mask, DNS server, default gateway
-ipconfig /all
-scope is range of IP address that DHCP server can hand out (start IP 10.0.0.1 --> end IP 0.0.0.100)
-values cane customised on increasing & decreasing range (depend network administrator)
-assigns IP address on lease (amount of time its assigned)
-after lease computer request to DHCP server to renew its lease
-make sure DHCP server not run out of IP addresses in its scope
-address reservation ensure specific computer/ device will always be given same IP address 
-reservation given to special devices/computer like network printers, servers, routers
-service runs on routers


DNS:
-domain name system -resolves names to numbers
-resolves domain names to IP address
-yahoo.com can also be accessed by IP address
-resolver server is like ISP (internet service provider) -----> send query to root server (top dns 
 hierarchy, 13 sets of root servers, placed around world, operated by 12 different organisations)
-each set has own unique IP address
-TLD (top level domain server) stores address information for top level domains (.com, .org, .net)
-particular TLD server manages dot com domain
-authoritative name server responsible for knowing everything about domain includes IP address


DDNS:
-dynamic domain name system
-DNS transforms domain name into IP address
-when IP address changes (YouTube.com 12.42.10.78 ---> YouTube.com 12.74:50:10)
-takes 24hrs to update database with new IP (when IP address changes)
-DNS used in static IP addresses & DDNS dynamic IP addresses
-DDNS allows to access devices in home (servers, routers, CCTV cameras)
-DDNS mainly used in homes
-Remote Desktop connection
-myhomepc.ddns.org (custom hostname created with DDNS)


DNS record:
-root servers, top level domain servers, authoritative name servers
-authoritative name servers -responsible for knowing everything about domain
-query goes to ----> root server (look for example.com) ----> top level domain server 
 (.com, .org, .net) -----> authoritative name server
-DNS database have zone file containing DNS records
-A record resolves domain names to IP addresses (IPv4) & 32-bit numeric address
-TTL (time to live)
-AAAA records resolves domain names to IP addresses (IPv6) & 128-bit alphanumeric address
-CNAME records resolves domain/ subdomain to another domain name
-computers read domain Fromm right to left
-subdomain(www.) 2nd level domain(example) top level domain(.com) root domain(.) (www.example.com.)
-MX record -mail exchange record, have 2 entries (primary server & secondary server) along with 
            priority number (lower PN means primary)
           -MTA (mail transfer agent) query ---> MX records example.com & look for email server
-SOA record -start of authority record stores administrative information about DNS zone
            -section of domain name space that certain administrative has delegated control over
            -DNS zone 1 (shop.example.com, blog.example.com less computers) & DNS zone 2 
             (support.example.com more computer) separate administrator to manage 
            -ns1.example.com (primary name server), admin:example.com (email address of 
             administrator zone), serial number (version in zone)
-NS record -name server, provides name of authoritative name server within domain
           -lists 2 name servers (primary & secondary)
-SRV record -service record point to server & service including port number 
            -service, port, weight
-PTR record -pointer record, reverse of A & quad A record
            -resolves IP address to domain name
            -attached to emails & used to prevent email spams
            -checks email address & its IP address
-TXT record -record contains miscellaneous information about domain (general/ contact info)


BIOS/ CMOS/ UEFI:
-BIOS -basic input & output system
      -blue screen, keyboard support
      -firmware built into computer motherboard
      -initialise computer hardware as computer is being rooted
      -search for booted device (optical/ storage device) to boot software like OS
      -power on self test (POST) -single beat (computer booting normally), multiple beats (failed 
       test)
      -BIOS software is stored on BIOS chip on motherboard
      -after computer turned off --> needs to maintain certain hardware settings, date & time, boot 
       sequence, hardware settings, fan speeds
      -BIOS settings are stored in CMOS chip (volatile chip), CMOS battery
-UEFI -unified extensible firmware interface
      -user friendly GUI
      -recognise larger storage drives, mouse support 
      -secure boot -stops malicious software like rootlet


Optical fibre connector types:
-FC (ferrule connector)
-ST (straight tip)
-LC (Lucent connector)
-SC (suscriptor connector)
-polishing type -PC (physical contact)
                -UPC (ultra physical contact)
                -APC (angled physical contact)
-connectors colour -62.5/124Um (skin), 50/125Um (black), 50/125Um laser optimised (sky blue),   
                    OMS (yellow), single mode (blue), single mode APC (green)


Modem vs router:
-modem -modem bring internet to home & business
       -maintain dedicated connection to intervene service provider to give access to internet
       -computer only reads digital signal, signal out on internet are analog
       -modem demodulates incoming anlog signal -------> digital signal & vice versa
       -modulator demodulator
       -cable -connected to home using coaxial cable
       -DSL modem -connected by typical phone line
-router -passes internet connection to all devices (computer, tablets, phone)
        -device in local area network needs to communicate with device on another LAN
        -must send traffic to specialised device connected to LAN
        -find best path for message to take to arrive at intended target device & send message along 
         its way following that path
        -routers regularly needs to communicate among themselves using protocol enable them to share 
         routing information
        -when device needs to send communication message to target device
        -each router port is configured with specific routing protocol associates with function
        -broder gateway protocol (BGP) & exterior gateway protocol (EGP)
        -interior routing protocols, enhanced interior gateway routing protocol (EIGRP)
        -interior gateway routing protocol (IGRp), open shortest path (OSPF), routing information 
         protocol 1 & 2 (RIP/RIP2)
        -broadband routers, wireless routers, edge router, subscriber edge router, inter provider 
         border router, core router
-modem router combination 
-most routers have built in switch inside 
        

2.5GHz vs 5Ghz:
-frequency band -how wireless data is transmitted b/w devices
                -bands are radio waves that carry data
-single band routers -transmit 2.4GHz 
-dual band routers -transmits both 2.4GHz & 5GHz
-microwave, cordless phones, bluetooth devices, wireless camera (uses 2.4GHz)
-wireless channel is just way to find tunes & alter frequency
-changing channels when experiencing different wireless devices 
-2.4GHz has 11 channels (only 3 are non-overlapping)
-5GHz (25 non-overlapping channels)
-2.4GHz transmits data at slower speed < 5GHz
-2.4GHz long range > 5GHz
-2.4GHz can penetrate objects better, vulnerable to interference


Hypertheading:
-technology developed by intel to increase performance of CPU core
-enables multiple threads (sequences of instructions to be run by each core to make CPU run   
 efficiently)
-CPU perform more tasks same amount of time
-thread ------[CPU]---> thread1
                   ---> thread2
-core is units that reads & executes instructions
-adding additional core to CPU (read & execute more instructions at time) (increase performance)
-OS will recognise each physical core 2 virtual/ logical cores
-virtually doubles amount of cores on CPU
-OS will schedule/ share workload b/w them
-increase amount of independent instructions in pipeline


Cloud computing:
-data & application being stored & run on cloud rather than stored on local computer 
-data on cloud accessed by internet
-cloud is big building filled with computer (server)
-giant data centre (running apps, storing data, hosting website, data processing)
-cloud provider
-maintain own physical server, high cost internet bandwidth
-reliability, redundant site & down site
-scalability (expanding by buying more server)
-AWS, Azure, google cloud platform, Alibaba, IBM
-IAAS -infrastructure as service, cloud provider manage servers, storage, networking, virtualisation
-PAAS -platform as service, cloud provider manage servers, storage, networking, virtualisation, OS, 
       middleware, runtime
-SAAS -software as service, cloud provider manage servers, storage, networking, virtualisation, OS, 
       middleware, runtime, application, data


I/O interfaces:
-motherboards is build with several input/output interfaces
-located on rear input & output panel on motherboard
-PS2 connector  -6 pin multi din connector (green for mouse & purple for keyboard)
-several USB ports -connecting many device & also supplies electricity to specific peripheral
-USB 1.0 (1.5Mb/sec), USB 1.1 (12Mb/sec), USB 2.0 (480Mb/sec), USB 3.0 (5Gb/sec)
-serial port -sending data 1 bit at time, technology
             -connecting terminal & modems 
             -replaced by faster USB interface
             -RS-232 standard uses D connector (DE-9)
-parallel port -connecting printers
               -replaced by faster USB port 
               -uses wide D-sub connector (DB-25)
               -sends data signals simultaneously over several || channels
-video adaptor -integrated video generates images from computer to monitor 
               -VGA (video graphic array) carries 15 pins divided into 3 rows & has blue colour
-IEEE 1394 -firewire, D-shaped
           -used in attaching devices printers & cameras 
           -similar to USB port, transfer speed 400Mb/sec)
-NIC card -used in networking purposes
          -designed for ethernet cable with RJ-45 connector 
          -transfer speed 10-10000Mb/sec
          -each NIC has own MAC address
-sound card -processes audio through computer speaker
            -port for speaker & port for microphone (input & output)
            -ports for subwoofer & surround sound
-eSATA -port for attaching external SATA drives
       -similar to USB & firewire port
       -transfer speed faster but require separate power plug 
       -combines data & transfer & power in all in 1 port


Adapters & expansion cards:
-circuit boards installed on into expansion slot of motherboard
-increase functionality of computer
-video cards, audio cards, storage cards
-video cards -generates images from computer to monitor
             -printed circuit board directly attaches to motherboard
             -graphic cards, graphic adapters
             -many components (GPU, memory chip, bus type, video ports
             -S-video (super/separate video) -analog transmitter (transmits 2 signal over 1 cable)
                                             -1 signal for colour & other for brightness
                                             -round & black colour
             -VGA (video graphics pin) -15 pins divided into 3 rows, blue colour, older
             -DVI (digital visual interface) -provide uncompressed high quality video to LCD monitor
             -DVI-A (sends only analog), DVI-D (sends digital signal), DVI-I (sends both analog & 
              digital) 
             -dual link & single link (has 6 pins extra ---> high resolution than single)
             -HDMI -high definition multimedia interface
             -deliver uncompressed video & audio data through single cable
             -display port -carries video + audio data 
-sound card -processes audio through computer speakers 
            -attaches into motherboard through bus slot
            -audio output port for attaching speakers & input port for microphone
-firewire card -adapter card with firewire ports
               -adds/ expands firewire capability to computer 
-USB card -adapter card with firewire ports
          -adds/ expands firewire capability to computer
-RAID card -creating hardware RAID array
           -used in data redundancy
           -in hardware RAID setup, OS is not aware of RAID implementation
-eSATA -external SATA ports, add capability of adding extra SATA hard drives
       -backing up & storing data
-video capture card -allows user to capture analog video (video camera ---> digital form ---> store)
-TV turner card -allows signals from TV to picked up by computer 
                -lot of TV cards acts like video capture card
-wireless NIC -connects to network wirelessly 
              -built in antenna used to wirelessly connected to network to send & receive data
-PCMCIA card -inserting PC card, expansion card for laptop & computer
             -adding capability wifi card, network card, modem card


Ports:
-not physical connection
-logical connection used by programs & services to exchange information
-pulling web pages, using FTP servers, accessing emails
-port has unique number to identify them (0-65535)
-port 80, 443 (common for web pages (http, https)
-port 21 (ftp (file transfer protocol))
-port 25 (emails SMTP)
-port number is always associated with IP address (works together to exchange data on network)
-port number determines which service/ program on server want to use
-netstat (network statistics) -display current network connections & port activity on computer
-netstat -n (port number)
-assigned by IANA (internet assigned number authority)
-0-1023 (system/ well known ports) (server side port)
-1024-49151 (user/ registered ports) (1102 adobe server, 1433 Microsoft SQL server, 1416 Novell, 
 1527 
 oracle) (server side port)
-49152-65535 (dynamic/ private port) (client side ports/ free to use) 
-netstat -an


Port forwarding:
-allows computer over internet to connect to specific computer within private network
-RDC (remote desktop condition)
-making computer accessible over internet
-telling router to send/ forward any request comes in with port 3389 & send request to our computer
-need to log into routers configuration page by typing in router internal IP address using web  
 browser
-sending request to our public IP address with specific port number
-port is not physical connection but logical connection to exchange information
-(IP address)42.42.53.38:42322(port number)
-computer1 message --> router (needs to know where to send message) --> computer2
-need to log into router configuration page by typing in router internal IP address using web 
 browser
-5344234243x210 (phone number x extension)
-ipconfig/ifconfig


Default gateway:
-default means designated device is 1st option that's looked upon when data needs to exit network
-subnet mask reveals how many bits in IP address used for network by masking network portion of IP 
 address
-forwards data from 1 network to another
-router, switch, computer
-router forward data to internet
-devices from 1 network communicate with device on another network
-any computer, device on network (192.168.0.2, 192.168.0.3, 192.168.0.4 can talk directly to each 
 other without exiting through default gateway)


DISM -deployment image servicing & management
     -repair system image
-system files checker scans OS files & repair them if corrupted
-ipconfig/all -displays TCP/IP network configuration for our computer, helps find issues associated
               with DHCP, DNS, default gateway, check IP address
-nslookup -name server lookup
          -looks up DNS information about domain
          -resolves domain names to IP addresses
          -computer don't understand names, only understand numbers


Mesh wifi:
-group of routers/ wifi points placed different locations inside home
-provides blanket of wifi coverage all throughout home
-communicate with each other wirelessly
-no cable involved
-modem =-------= 1 of mesh wifi using ethernet cable & placing other wifi points at different  
 locations throughout home (creates 1 large network)
-single SSID
-solves weak signal problems in home


Gateway:
-not hardware devices, its software firmware which save configuration setting of device
-mostly gateway address is 102.168.0.1/ 192.168.1.1
-acts as gate b/w 2 networks, may be router, firewall, server, other device enables traffic to flow in 
 & out of network
-protects nodes within network & also node itself


Brouter:
-bridging router is device which combines features of both bridge & router
-work either at data link layer, network layer
-capable of routing packets across networks & working as bridge, capable of filtering local area 
 network traffic
-bridge router is network device works as bridge & router
-operates at both network for routable protocol & data link layer for non-routable protocols
-continue to become more complex


Firewall:
-system to prevent unauthorised access from entering private network by filtering info comes in 
 from internet
-blocks unwanted traffic & permits wanted traffic
-create safety barrier b/w private network & public internet
-access control list (permission, IP address, protocol, destination, port) allows & deny
-firewall rules based on -IP address, domain names, protocol, program, ports, key words
-host-based firewall -software installed on computer (protects only that computer)
                     -zone alarm (3rd party HBF)
                     -lot of anti virus programs
-network based firewall -combination of software & hardware
                        -protects entire network
-stand alone firewall & routers built-in firewall


DMZ:
-demilitarised zone
-used to improve security of organisation's network
-segregating devices like computers, servers, opposite side of firewall
-perimeter network
-DMZ divides network into 2 parts (taking device inside firewall & putting them behind firewall)
-more secure firewall secure 2 firewall
-home router DMZ setup pages (linksys & netgear)
-DMZ device should be configured as static IP 


FTP:
-file transfer protocol
-standard protocol for transfer files b/w computer & servers over internet
-language computer uses to transfer files over TCP/IP network
-making file available to download for other people ---> upload files to FTP server
-configure own computer to act as FTP server
-using internet browser/ FTP client
-computer ---------- internet -------- FTP server (ftp.example.com)
-ftp server require account with username & password
-using FTP client to connect 
-transferring files b/w computers
-gives ability of website designers to upload  files to web server
-not secure protocol & data being transfers is not encrypted
-SFTP -secure file trasfer protocol
      -data is encrypted using secure shell, authenticates user & servers, uses port 22
      -SSH FTP, encrypts files & data ----> sends them over secure shell data stream 
      -used to remotely connect to other system
-both protocols are connection oriented, both use TCP for file transfer
-TFTP -trivial file transfer protocol, not used for sending files over internet, transferring files 
       within local area network, transfer configuration files & firmware images to network devices 
       like firewalls & routers, uses UDP instead of TCPm, no security 


Printers:
-allows ability to copies of documents & photos on paper
-inkjet printers -most common
                 -affordable & produce photo quality results 
                 -printhead moves back & forth across paper
                 -print head places on paper vey tinny dots
                 -ink, heating element, nozzle
                 -thermal bubble (used in HP & canon printer) 
                 -uses liquid in cartridges
                 -lower end printers comes with 2 ink cartridges (black & blue)
                 -lower end printers comes with 2 ink cartridges (black, cyan, magenta, yellow)
-laser printers -laser printers comes in different sizes (smaller 1s ----> larger 1s)
                -provides highest quality print
                -more expensive than inkjet printers
                -electric charge is placed on rotating drum & laser discharges lower electrical 
                 charge on drum
                -laser draws image that's going to be printed on drum itself
                -drum is coated with fine black power (toner)
-thermal printers -using heat & uses special print paper called thermal paper (has wax based ink)
                  -when heat is applied ----> turns black 
                  -becomes permanent when cold 
                  -used to print barcodes & labels
-dot matrix printers -non-existence today
                     -produces mediocre print quality compared to inkjet & laser
                     -printhead move across paper & pins on printhead strike against cloth ink   
                      ribbon
                     -producing each character in form on dots
                     -can print multi copy document (like carbon copy)
                     -durable & last long time
-printer -don't touch drum in ink carriage 
         -multi-size sheets input 
         -install driver from CD or internet
-Canon imageRUNNER 2525 -multifunction capabilities -offers printing, copying, scanning, optional 
                                                     faxing functionalities
                        -print speed -upto 25 pages per minute (ppm)
                        -paper capacity -standard 250-sheet cassette, expandable with additional trays
-cannon IR2525 -press power button ----> reset ----> select page size (A0, A1, A2, A3, A4) ----> start 
                                               ----> select 2 sides 
                                               ----> special features > ID card > next ----> density 
                                               ----> system monitor ----> status/ log
                                               ----> scanning ----> remote scan > online > done


Scientific calculator:
-(0-9) ---> number keys, (+, -, ×, ÷) ---> basic arithmetic, (=) ---> execute calculation
-AC (all clear) ---> clears everything
-DEL (delete) ---> deletes last entry
-( ) ---> group calculations correctly ((5 + 3) × 2 = 16)
-memory functions -M+ (add value to memory), M- (subtract value from memory)
                  -MR (memory recall), MC (memory clear)
-x² ---> square (5² = 25)
-x³ ---> cube (3³ = 27)
-xʸ ---> any exponent (2^4 = 16)
-√ (square root) ---> √25 = 5
-∛ (cube root) ---> ∛27 = 3
-x⁻¹ (reciprocal) ---> 1/x (1/5 = 0.2)
-log ---> base 10 logarithm (log(1000) = 3)
-ln ---> natural logarithm (ln(5) = 1.609)
-e^x ---> exponential function (e^2 = 7.389)
-10^x ---> power of 10 (10^3 = 1000)
-sin, cos, tan ---> trigonometric functions
-sin⁻¹, cos⁻¹, tan⁻¹ ---> inverse trigonometric functions
-HYP (hyperbolic mode) ---> activates sinh, cosh, tanh
-MODE (degree/ radian switching) ---> select DEG or RAD
-fractions & decimal conversions 
-a b/c ---> input fractions (3 1/2)
-S⇔D (fraction/ decimal toggle) ---> converts fractions to decimals
-n! ---> factorial (5! = 5×4×3×2×1 = 120)
-nPr ---> permutation (5P2 = 20)
-nCr ---> combination (5C2 = 10)
-° ' " (DMS Button) ---> converts degrees-minutes-seconds (45°30'15" -> 45.5042°)
-MODE ---> RAD / DEG ---> switch b/w radians & degrees
-π (Pi) = 3.14159
-e (Eulers number) = 2.718
-Ans (answer recall) recalls last result
-ENG (engineering notation) adjusts powers of 10
-Ran# (random number) ---> generates random number b/w 0 & 1
-RandInt(a, b) ---> generates random integer b/w a & b
-MODE ---> complex ---> enables complex numbers
-i (imaginary unit) ---> used for complex numbers (2 + 3i)
-Shift -allows access secondary functions of other buttons
       -sin⁻¹ ---> sin key
-Alpha -character input & variables
       -allows to enter letters (A, B, C), assign variables, access special commands
-Abs -absolute value, removing any negative sign
     -enter number (-5), press = to get 5


SMTP:
-simple mail transfer protocol, protocol for sending emails
-set of commands authenticates & direct transfer of emails
-uses header of mail to get email ID of recover & enters mail into queue of outgoing mail 
-once delivers mail to receiving email ID ---> removes email from outgoing list
-smtp server address = smtp.gmail.com
-smtp server --> send message to recipient email server also using smtp
-recipient download email from mail server (using POP/ IMAP)
-uses TCP protocol  & guarantees email delivery
-smtp also configured in email client (Microsoft outlook, Mozilla thunderbird)
-smtp server settings & smtp similar to mailbox


Tor vs VPN:
-tor -slower because of onion routing 
     -increases latency & decreases bandwidth
     -decentralised, not compatible with all devices
-VPN -faster compared to tor
     -VPNs can increases bandwidth but little decrease it typically
     -centralised, compatible with all device


Tor over VPN:
-device (VPN client & tor client) (encrypting data using VPN & tor protocols) ---(VPN encryption & Tor 
 encryption) --- ISP ---- VPN server (hiding IP & GEO-location) ---- tor entry node --- TOR relays ----
 tor exit nodes --- websites


POP3:
-great for users who want to view their email on 1 client
-email server ----> email client (phone)
              ----> email client (tablet)
              ----> email client (laptop)
-downloads email to email client for you to view, once downloaded, email no longer exist on server
-email download & view on 1 client ---> not even on another email client
-deleting email on 1 email client ----> won't delete on another email client
-used to retrieve email from email server
-post office protocol 
-has 2 message access agents (MAAs) where 1 is client MAA & other is server for accessing message from 
 mailbox
-helps retrieving & manage emails from mailbox on receivers mail server
-works on port 110 & port 995
-download email from person device to server
-only download that's in inbox folder does not synchronisation
-email is deleted from mail server once downloaded to device & no copy of email is kept on server
-pop.gmail.com
-retrieving email from 1 device
-downloaded email is viewable without internet connection
-saves storage space on main server
-need backup plan for emails in case of crash/lost
-more vulnerable to viruses since emails are fully downloaded


IMAP:
-great for users who wants to view their emails on multiple clients
-email server <----> email client (phone)
              <----> email client (tablet)
              <----> email client (laptop)
-emails are kept on server & viewed on multiple email clients
-email sync across all email clients
-deleting email on 2 email client ---> deleted on other clients
-internet message access protocol
-allows to view emails from multiple devices
-caches local copies of email onto all devices & synchronises all folders & everything 
-syncs inbox, deleted items, drafts
-imap.gmail.com
-all mail are stored on mail server
-able to see emails, draft, sent items, deleted items, any custom folder
-not viewable without internet connection (IMAP only caches local copies on devices instead of 
 downloading them)


Types of monitor:
-QLED -quantum dot LED
      -uses quantum dot layer in LED-backlit displays to enhance colour accuracy & brightness
      -brighter than OLED, more energy-efficient, with better colour volume
      -lacks true blacks of OLED, dependent on LED backlighting
-Plasma -uses small gas cells that emit light when electrically    
        -high contrast ratios, great for dark rooms, good colour depth, offers true black
        -heavy, high power consumption, risk of burn-in, largely phased out
-projection displays (DLP, LCD, LCoS) -scalable for large screen sizes
                                      -requires controlled lighting, lower resolution & brightness than 
                                       flat-panel displays
-CRT -cathode ray tube
     -bulky & very heavy monitors, takes lot of space
     -3 colours electrons gun, offers true black
     -redrawing of image called refresh rate measured in Hz (60Hz, 240Hz)
     -high refresh rate --> reduce eye discomfort, reduces motion blur
-LCD -liquid crystal display
     -lighter, thinner, use less power, takes up less space
     -flat panel display
     -produce image on liquid crystal on flat surface by using liquid crystal
     -1st used in laptop computers
     -fluorescent lamps for backlighting --> circular glass straight tubing type similar to regular 
      florescent lamps (create UV light when mercury vapour inside lamp ionised)
     -lower contrast ratio (600:0)
-LED -light emitting diode 
     -arranged in pattern displays images on screen
     -produce sharper & more accurate colour
     -higher contrast ratio (1000:1) --> white 1000x brighter than black
     -produce lighter white & darker black
     -consumes less power & made with thinner foam factor
     -LED is just LCD monitor uses LED backlighting
-OLED -organic light emitting diode
      -used in monitors, smartphone, high-end TVs
      -each pixel produce its own illumination without any backlight
      -new & more expensive, highest contrast ratio (100000:1)
      -produces own colour without using filters
      -prone to burn-in over time in static images
      -AMOLED (active matrix OLED) -improved refresh rates & efficiency
      -best viewing angle
-LCD/LED -TN -twisted nematic 
             -liquid crystal twisting light as comes through
             -most affordable, best performance, highest refresh rate & fastest response time
             -1ms (fast response time), 10ms (slower)
             -less monitor ghosting
             -inferior color reproduction
             -poor viewing angles
         -VA -vertical alignement
             -refresh rate & response time faster than IPS
             -better colour reproduction than TN
             -mixture of TN & IPS
         -IPS -in-plane switching
              -liquid crystal stay in place & aligned || with glass
              -better colour reproduction & better viewing angle
              -more expensive, lower refresh time, slower response time
              -lacks the deep blacks and contrast
-resolution -number of pixels used to display image on screen (pixel = smallest element in image)
            -higher resolution --> more pixel in image
            -1280x720 (HD), 1920x1080 (FHD), 2560x1440 (2K), 3840x2160 (4K)
-aspect ratio -ratio b/w width & height of monitor
              -wide screen (16:9), standard (4:3), ultra wide (21:9), supersede (32:9)


Hub vs switch vs router:
-Hub -connect all network devices together on internal network
     -works on layer 1, only broadcast message 
     -data arrives at 1 port & copies all other ports
     -has multiple ports & accepts ethernet connections from multiple ports
     -creates security concerns & unnecessary traffic, waste bandwidth
     -hub is not intelligent 
     -works on physical layer of OSI model
     -hub is broadcast device
     -all ports on hub fall into 1 domain collision
     -sends data in form of binary bits
     -only works in half duplex
     -only 1 device can send data at time
     -no storing any MAC address/ IP address
-switch -works on data link layer of OSI model
        -used in LANs
        -has multiple ports & accepts ethernet connections from multiple devices
        -sends data to only designated port unlike hub
        -works on layer 2, both broadcast & unicast message 
        -every port on router has its own separate domain collision
        -multicast device
        -used to connect devices in same network
        -faster bridge with many ports
        -intelligent device understand source & destination MAC address
        -all ports on switch fall into 1 broadcast domain
        -sends data in form of frames
        -works in full duplex
        -multiple devices can send data at same time
        -stores MAC address & keep record of MAC 
        -stores whole packet then forward packet
        -forwards only when CRC matches (15343434,15343434) otherwise discarded
        -smarter than hub
        -multi-port bridge (24/48 ports)
        -1 broadcast domain (except when VLAN is implemented), max speed 10-100 Mbps
        -more time when routing decision are complicated
        -transmission model -half & full duplex
        -destination address, source address, data packets
-router -works on data network layer of OSI model
        -used in LAN, MAN, WAN
        -works on layer 3, only unicast message
        -intelligent device & understand source & destination IP address 
        -every port on router has its own separate domain collision
        -routing device use to create route for transmitting data packets
        -routes data from 1 network to another based on IP address
        -gateway to network
        -data rejected by router sends off to another network
        -used to connect 2 or more different network
        -sends data in form packets
        -works in full duplex
        -multiple devices can send data at same time
        -stores IP address
        -networking device (2/4/8 ports)
        -every port has its own broadcast domain, max speed for wireless 1-10 Mbps, max speed for wired 
         connection is 100 Mbps, takes faster routing decisions
        -transmission model -full duplex


Hostspot:
-hotspot is location
-public hotspot precautions -turn off folder sharing/ password protect them
                            -install anti virus software
                            -turn on firewall
                            -install VPN
-mobile hotspot -available through major cell phones
-some public hotspots are free & some require $$$
-ISP =----= wifi router
     =----= wireless access points


Netstat:
-display routing tables, connection information, status of port
-works with linux subsystem
-displays content of /proc/net file defined in linux file system
-netstat -a
-netstat -l
-netstat -t
-netstat -u
-netstat -n
-netstat -e
-netstat -r
-netstat -i
-netstat -p
-netstat -s
-netstat -w
-netstat -c
-netstat -g
-netstat -i
-netstat -M
-netstat -v
-netstat -M
-netstat -p ip
-netstat -p ipv6
-netstat -s -p ipfirewall
-netstat -an | grep <port_number>
-netstat -an | grep <IP_address>
-netstat -i -M
-netstat -x


Bridge:
-divide network into separate collisions domain 
-hub ------ bridges ------ hub (reduces unimportant traffic b/w 2 segments)
-filtering data based on their MAC address
-bridge keeps record of MAC address of NICs connected to it (blocks all data from crossing over if  
 fails to meet requirement)


Repeater:
-device that amplifies incoming signals creates copy of it & transmits signals on network
-extends range of radio signals ---> cover larger distance 
-electronic device that receives signal & re transmits it
-used for wired medium (telephone line repeater, fibre optical cable, repeater) & wireless medium
-analog repeater, digital repeater, microwave repeater, satellite repeater, wifi repeater, WLAN 
 repeater, LTE repeater, optical repeater


Wifi repeater vs extender vs booster:
-different functions & connectivity system
-repeater -operates on single radio button
          -receives wireless signal from router & retransmits it, amplifying signal & increasing 
           coverage area
          -creates second network using same Wi-Fi frequency
          -Devices connect to either router or repeater based on signal strength
          -Simple, smaller areas where you need to extend coverage but don't want to deal with 
           complex setups
          -cut network speed in half due to repeating process on same channel for sending & receiving 
           data
-extender -Wi-Fi extender, like repeater, expands Wi-Fi coverage but operates differently by creating   
           new Wi-Fi network, use both wired & wireless methods to connect to main router
          -extender connects to router & broadcasts its own network, improves coverage in larger areas
          -extending range of network across larger spaces or across multiple floors in building
          -some extenders cause confusion as devices switch b/w router’s network & extender’s network
-booster -booster is more of general term used to describe any device that strengthens & extends 
          wireless signal, refer to both repeaters & extenders, amplifiers
         -amplify Wi-Fi signal, work as combination of extenders or repeaters
         -improving weak signals in targeted areas


Linux:
-most hardware is propriety & driver needs to be reverse-engineered by volunteers who can't violate 
 copyright
-linux can't provide full support for all functions of pieces of hardware
-windows is not less reliable than GNU/linux on desktop
-GNU/linux (OS), linux kernel 
-some problems -microphone & bluetooth, no anc setting for AirPods, SD card not detected, wifi signal 
 dropping, pulse audio, screen recording, wayland display manager, kernel module fails to load
-server needs much simpler hardware than desktops 
-servers are usually custom build means hardware can be selected for its driver support, Oems have 
 incentive to provide drivers for common linux distros
-Kedenlive & DaVinci resolve (everything is available, top tier discrete graphic card, over 8GB system 
 memory, core i7, high capacity SSD, fast rendering)
-KDE Plasma -highly customisable, visually polished & extensive tools for productivity
            -relatively lightweight despite offering advanced features, gaming & development, supports 
             window tiling, virtual desktops & variety of widgets for productivity, works well with  
             Steam & good support for gaming-related tweaks
-GNOME -clean & distraction-free interface, well-supported by tools like OBS Studio (for video 
        recording) & development IDEs, video editing & development, as GNOME handles multiple 
        workspaces & app management efficiently
       -heavier on resources but work well on modern systems with good GPU for gaming
-Cinnamon -stable, well-rounded environment feels intuitive & moderately light on resources
          -balanced option for gaming, development & even light video editing
          -not resource-hungry like GNOME but provides similar workflow
          -straightforward setup works well for gaming & compatible with most gaming software
-Xfce -although lightweight, highly stable & customisable, faster system or have mid-range setup
      -development & light video editing on less powerful machines
      -not specifically optimised for gaming but resource-efficient, which leave more power available 
       for games on less powerful systems
-for powerful system -KDE Plasma or GNOME for best feature set & support for demanding tasks
-for mid-range system -cinnamon offers solid balance b/w performance & usability
-for low-spec systems -Xfce provides excellent performance, freeing up resources for tasks like 
                       development & light gaming


Mac vs linux:
-customisation -Linux -full control over every aspect of OS, choose from numerous desktop environments, 
                       window managers & configuration options
               -Mac OS -limited customisation, highly consistent UI but restricts user modifications
-software compatibility -linux -great for open-source software, development tools, servers & scientific 
                                computing, limited compatibility with proprietary apps
                        -Mac OS -strong ecosystem for creative & productivity tools, support for 
                                 most mainstream software
-system resource efficiency -linux -lightweight, allow users to maximise performance on any hardware
                            -Mac OS -optimised for apple hardware but less efficient on non-Apple 
                                     devices 
-development environment -linux -preferred for backend development, web servers, scripting & system  
                                 administration, native tools like Bash, Python, networking 
                                 capabilities are deeply integrated
                         -Mac OS -strong unix-based terminal & good for cross-platform development 
                                  supports tools like Xcode for iOS development (exclusive to Mac)
-Security -linux -known for high security, with granular permissions & frequent updates 
                 -open-source transparency lets experts identify vulnerabilities quickly
          -mac OS -secure out of box with built-in protections, lacks granular control Linux offers
-system stability -linux -exceptionally stable, designed for long-term support (Debian, CentOS)
                          -rarely requires rebooting
                  -macOS -generally stable & reliable
-gaming performance -linux -limited but growing, Steam’s Proton & Lutris help run many Windows games, 
                            but not all titles are compatible
                    -MacOS -poor gaming support due to hardware constraints & limited game library 
                            compatibility
-hardware compatibility -linux -runs on almost any hardware but have driver issues on certain laptops & 
                                newer GPUs
                        -Mac OS -designed exclusively for apple hardware, no support outside ecosystem
-macBook touchpad is incredible (smoothest)
-community & support -linux -vast open-source community with extensive online resources & forums
                     -Mac OS -strong support from Apple & dedicated user community, but fixes often 
                              depend on Apple updates


Linux:
-treats all resources as files mounted in its directory structure
-/Dev/scd1, /Dev/scd2 (optic drives)
-/Dev/ttyLT0 (modem)
-/Dec/hda2, /Dev/hda3 (hard drives)


C vs D vs E:
-C-drive -default primary drive, almost always main drive where operating system (windows) installed
         -system & program files, contains system files, application programs, user’s main documents, 
          data, video, music, pictures 
          & settings & largest portion on local disk
         -its default boot drive, where computer starts up from
         -keep C drive empty for better performance
-D-drive -additional partition -another partition on same physical drive as C
         -used to separate personal data from system files
         -pre-built systems (like laptops), D-drive could be recovery partition
         -used to restore system to factory settings & store backup data
         -could also be letter assigned to CD/DVD drive
-E-drive, F-drive -represent additional internal drives, secondary SSD/ HDD
                  -when you plug in external storage device (USB drive), assigned next available drive 
                   letter, like E/F
                  -if connected to shared drive over network


Activity monitor/task manager:
-anything near 100% can be concerning
-process -CPU, memory, disk, network usage per process
-swap -portion of system memory management moves data b/w RAM & disk storage
      -excess use of swap can damage SSD
      -heavy swapping ----> slow down computer
      -memory pressure is high -----> system swapping more frequently
      -green (system handling memory well), yellow/red (high memory pressure with swap usage)
-compressed -physical memory use to store compressed version of data not being used recently
-wired memory -physical memory have data can't be compressed/ shaped with disk
-app memory -physical memory allocated by apps & system processes
-cache files -size of files cached by system into unused memory to improve performance
-CPU load, number of threads, processes
-energy impact
-network -packets in/out, data sent/received
-data -data read/written
-committed (GB), cached (MB/GB), paged-pool(MB), non-paged pool(MB)
-form factor (SODIMM), hardware received (MB), slots used, speed (MT/sec)
-L1,L2,L3 cache, virtualisation, logical processors, cores, socket, maximum speed


Network bridge vs switch:
-bridge -packet forwarding in bridge is performed using software
        -method of switching of bridge is store & forward
        -bridge has only 2 ports
        -bridge is rarely used
        -connects 2 LANs & control data flow b/w them
        -divides collision domain into 2 parts, creates collision domain, but not broadcast domains
-switch -packet forwarding in switch is performed using ASICS (application specific integrated 
         circuits), switch is hardware based
        -method of switching of switch can be store & forward, cut though, fragment-free
        -switch can handle many ports
        -switch is frequently used
        -learns which machine is connected to its port by using devices's IP address
        -used to connect work stations or computer system, if 20 workstations connected --> separated 
         collision domain for each nodes


32 bit vs 64 bit:
-difference in way to handle memory
-32 bit -2^32 bytes = 4GB (slower)
        -can address memory upto 4GB of RAM
        -cheaper
        -gives low efficient performance
        -less amount of data is managed in 32 bit OS
        -require more time to process & response
        -personal computer & run office routine tasks
-64 bit -2^64 bytes = 16GB (4 billion times more memory than 32 bit) (faster)
        -can address memory upto 16GB (exabytes) of RAM
        -provides highly efficient performance
        -large amount of data can be stored 
        -expensive
        -require minimum time to process & response
        -personal computer & video edition, server applications
-data loaded in slower hard drive ---> faster RAM ---> CPU can access data to run program
-4GB may not be enough to for CPU to read --> slower


AI tools:
-notion.ai, deep beat, neural text, looks, generative engine, originality.ai, sounddraw.io, GEP-GAN
-perplexity, idjourney, Hemingway, quill bot, sub magic, decrepit, flick.ai, adobe firefly, runaway,  
 murf, open clips, prides.ai, invideo, jitter, visit, going, ocoya, flex clip, radaar, craiyon.ai


Power supply:
-converting electricity into specific voltages computer needs
-square metal box with bunch of wires emerging from 1 end with connectors 
-located at top or bottom of standard tower case
-foam factor -ATX equip with different size of connectors
-P1 -main power connector connects directly with motherboard (20 or 24 pins)
-P4 -connects directly with motherboard located near CPU (4 pins) 
-P8 (EPS) -supplies more power to newer CPUs 
-6 & 8 pin PCI-express power connector -supply power to high end PCI video express card
-SATA -15 pin, supply power to storage & optical drives & case fans
-molex -4 pin socket connector, for older hard drives & optical drives
-wattages range from 200W-2000W
-modern PCs -500-600W, higher end PC (cooler fans, RGB lighting, multiple video cards) -1000W
-non-modular -all connector cables permanently attached to power supply
             -poor cable management, higher temperature
-semi-modular -only necessary cables are attached
-fully-modular -all connector cables can be attached/ detached to power supply
               -better cable management, lower temperature
-80 plus -at-least 80% energy efficiency (20%, 50%, 100%)
-600 watt power supply
-don't buy cheap power supply


Server:
-dedicated computer provides service on behalf of clients
-web server, database server, email server
-powerful centralised computer 
-ordinary desktop computer can be setup as server (file server) (not much powerful)
-desktop CPU -supports only single processor (intel core17)
-server CPU -supports multiple processor (intel xeon) 
-Xeon processor support ecc RAM (error-correcting code), support large amount of RAM, large cache 
 memory, higher core count
-RAID copy data on multiple disk
-server should not have swapped hard drive in RAID configuration
-ecc RAM mainly used in servers, detect data correctly processed
-server should have hot swappable hard drives in RAID configuration, RAID copies data on multiple  
 disks & redundant power supply, server OS robust & stable, able to handle 1000s of concurrent 
 connections 
-hard-rive don't catch fire


VPN:
-virtual private network
-secure & reliable connection (internet = insecure)
-internet activity routed through ISP server
-ISP can sell our info to government & advertisers
-online activity gets bypass through ISP server ----> redirected to another server
-disguise your identity by hiding IP address
-VPN encrypts & protect internet data, encapsulates data with extra layer of protection
-data travels in virtual tunnel
-provides secure connection for remote workers
-use VPN when using public hotspot


HTTP, HTTPS, SSL:
-HTTP -hyper text transfer protocol
      -all information is sent in clear text
      -vulnerable to hackers & not secure
      -data (personal sensitive info) ---> travels public internet ----> server 
-HTTPS -secure hyper text transfer protocol
       -encrypts data that is retrieved by HTTP 
       -use encryption algorithm + padlock symbol
-SSL -secure socket layer 
     -protocol ensure security to internet
     -uses public key encryption to secure data
     -SSL certificate authenticate identity of website
-TSL -latest industry standard cryptographic protocol
     -same as SSL


Ping:
-communicate with specific device over network
-sends interent control message protocol (ICMP)
-once packets received by destined computer, starts sending packets back
-provides details -number of packets transmitter, packets received, time taken by packet to return
-most widely used in utility in networking
-test network connectivity, test network interface card, test DNS resolution issue
-used to troubleshoot networking issues such as lag & network connectivity
-no reply -no network connectivity, computer is powered off, backing ping requests
-ping example.com (packets sent, received, lost)
-combine ping & trace route together = pathping
-find path data packet takes to its destination
-pings each router/ hop that data packets took to destination
-pathping example.com
-ping google.com
-ping <hostname_or_IP_address>
-ping -c <count> <hostname_or_IP_address>
-ping -i <interval_in_seconds> <hostname_or_IP_address>
-ping -f <hostname_or_IP_address>
-ping -w <timeout_in_seconds> <hostname_or_IP_address>
-ping -t <TTL_value> <hostname_or_IP_address>
-ping6 <hostname_or_IP_address>
-ping -s <packet_size_in_bytes> <hostname_or_IP_address>
-ping -D <hostname_or_IP_address>
-ping -M do -s <size> <hostname_or_IP_address>
-ping -D <hostname_or_IP_address>
-ping -A <hostname_or_IP_address>
-ping -b <broadcast_IP>
-ping -f <hostname_or_IP_address>
-ping -Q <tos> <hostname_or_IP_address>
-ping -R <hostname_or_IP_address>
-ping -q <hostname_or_IP_address>
-arping <hostname_or_IP_address>
-ping -I <interface> <hostname_or_IP_address>


Dig:
-domain information groper, tool used to find query information related to domain name & troubleshoot 
 DNS issue in linux
-provide various types of DNS records (CNAME, MX records, records)
-dig A google.com


VoIP:
-voice over internet protocol
-technology allows to make phone calls over internet connection instead of over standard 
 telephone lines
-flexible, inexpensive, more convenient to make phone calls
-conference calling, auto attendant, call analytics, voicemail, monitoring, logs, call recording
-not work in power outage, require stable internet
-security alarm capability
-traditional landline use PSTN (public switched telephone network)
-Voip uses standard internet connection (home & business)
-Voip service provider, internet connection, router/switch Voip phone
-Voip phone (internet connection) (RJ45), landline (phone line connection) (RJ11)
-special void adapter 
-softphone
-SIP protocol (SIP) -session initiation protocol
-SIP maps phone numbers to IP
-ADC (analog to digital convertor) ---> digital signal encapsulated into data packets
-RTP (real time transfer protocol) -standard protocol for transmission of audio & video over 
 network


Linux paths:
-/ 
-/bin (user binaries)
-/sbin (system binaries)
-/etc (configuration files)
-/dev (device files)
-/proc (process information)
-/var (variable files) -/tmp
                       -/log
                       -/cache
                       -/spool
-/tmp (temporary files)
-/usr (user sys resources) -/bin
                           -/local
                           -/sbin
                           -/include
-/home (home directory)
-/boot (boot loader files)
-/lib (system libraries)
-/opt (optional add on apps)
-/mnt (mount directory)
-/media (removable devices)
-/srv (service data)
-(users (applications (shell (kernel (hardware))))
-176250 lines of code
-10239 lines of code 


[Norse]
[programming is 10% writing code & 90% understand why its not working]
[running 100s of linux on cloud, running proxmox cluster running several linux VMs in home lab]


BIOS -basic input/output system executes MBR
MBR -master boot record executes GRUB
GRUB -grand unified boot loader executes kernel
Kernel -kernel executes/sbin/init
Init -init executes run level program
Runlevel -run-level programs are executed from /etc/rc.d/rc*.d/


Computer memory:
-internet -ROM -PROM, MROM, EPROM, EEPROM
          -RAM -SRAM -faster than DRAM, used for cache
               -DRAM -SDROM, RDROM, DDR (DDR1, DDR2, DDR3, DDR4)
          -cache memory
          -virtual virtual memory
          -sequential access
-external -optical -CD, DVD
          -magnetic -HDD (hard disk drive)
          -solid state -SSD (solid state drive), USB memory stick


Windows vs Linux:
-windows -administrator, OS, folder, not free, not open source
         -\ (c:\A\B\C)
-linux -root user, kernel, directory, are, open source package
         -/ (/X/A/B/C)


Cheap bluetooth jammer:
-using aluminium foil (+ + + + -------> - - - -[foil block]+ + + + -------> - - - -)
-metal cargo container & all openings covered with metal screens
-faraday cage
-for some frequencies chain link fence well grounded & gate well electrically connected to rest of 
 fence is enough


ARP:
-address resolution protocol
-display & modify ARP cache containing mapping of IP address to MAC address
-system TCP/IP stack uses ARP in order to determine MAC address associated with IP
-used to resolve IP address to mac addresses
-device needs mac address to communicate on local area network
-IP address (internet address) used to locate device on network & MAC address (physical address) 
 identifies actual device
-internal list called ARP cache
-arp -a (checking ARP cache)
-arp cache table ---> make network more efficient
-dynamic -entry is created automatically when device sends out broadcast message out in network
         -entries are not permanent, flushed out periodically
-static -manually enters IP to MAC address, reduce any unnecessary ARP broadcast traffic on network
-arp -s 10.0.0.3 90-02-7b-c2-c0-67
-arp -e


Wiring distribution:
-66 blocks -punchdown block where wires are inserted
           -wires inserted using punchdown tool
           -outdated
-110 blocks -modern day punchdown block 
            -supports higher frequency & uses less space
            -meets standard needed for category 5 UTP cable
-smart jack -network interface unit (NID)
            -located at demarcation point, terminate T carriers service wires at customers building
            -used for monitoring network for errors & connecting issues
            -LEDs indicate errors to network technician
-25 pairs -25 pairs of smaller wires inside
          -wires are colour coded to identify individuals conductor
          -each pair is uniquely coloured
-100 pairs -100 pairs of smaller wires
           -used in industrial jobs
           -each pair is uniquely coloured


Virtual memory vs cache memory:
-virtual -space allocation on hard disk, data can be stored for fast access
         -enlarges volume of RAM
         -OS has control over virtual memory
         -size of virtual memory is more than cache memory
         -larger program can be executed
-cache -small high speed, static RAM (SRAM) contains most recent accessed piece of main memory
       -takes less time
       -control over cache memory
       -size more than virtual memory
       -stores data items most frequency used by processor while whole program resides in secondary 
        memory


MAC address:
-media access control address -identifier that every network device uses to uniquely identify itself 
 on network, no 2 devices have same MAC address, 00-04-5A-63-A1-66, 6 byte hexadecimal number burned 
 into every NIC (network interface car)
-1st 3 bytes identifies ---> identify manufacturer of NIC (network interface card) (Linksys, 
                             Netgear, TPlink) 
-last 3 bytes identifies ---> number from manufacturer that identifies each device on network
-physical address & hardware address
-windows -00-04-5A-63-A1-66, ipconfig/all
-linux/Mac -00:04:5A:63:A1:66, ifconfig
-cisco -0004.5A63.A166
-network devices can communicate with each other through MAC address
-public & private IP addresses can periodically changes
-ARP (address resolution protocol) broadcast
-MAC used at each step on its way to final destination
-MAC address don't change (permanent)


Types of mouse:
-wired mouse
-wireless mouse
-trackball mouse
-optical mouse
-laser mouse
-gaming mouse
-vertical mouse
-pen mouse
-finger mouse
-joystick mouse


Circuits switching vs packets switching:
-switching -switching is process of data being transferred from 1 device to another
-circuit switching -method where communication happens through dedicated circuit/ channel
                   -connection oriented (connection happens before any communication takes place)
                   -channel remain dedicated to that particular session
                   -no other device can use that channel until session is complete
                   -used in telephone systems, data travels in correct path
                   -when channel is complete, other devices can use them
                   -better quality & stability of voice call
                   -low latency, bandwidth is fixed certain amount of allocation in each session
                   -bandwidth is not efficient
                   -data travel in same dedicated path in sequential order
-packet switching -used on internet where routers are used 
                  -not connection oriented, no session, channel established prior to data
                  -data is broken down into individual packets & -----> destination
                  -packets are independent & choose different routes
                  -receiving device reassemble data to read them
                  -carry video, web data & emails 
                  -voice calls (VOIP) but not as stable
                  -bandwidth not fixed, bandwidth changes dynamically depends on demands
                  -higher latency, used more efficiently


DRAM vs SRAM:
-DRAM -constructed of tiny capacitor that leak electricity
      -requires recharge every few milliseconds to maintain its data
      -inexpensive, slower than SRAM
      -storage capacity (1GB to 2GB)
      -uses separate capacitor to store each bit of data
      -need periodic refreshment to maintain charge in capacitors for data
      -simple than SRAM
      -store many bits per chip, uses less power
      -generate less heat, used for main memory
-SRAM -constructed of circuits similar to D file-flops
      -uses transistor to store single bit of data
      -doesn't need periodic refreshment to maintain data
      -storage capacity (1MB to 16MB)
      -complex than DRAM
      -holds content when power is available
      -expensive, faster than DRAM
      -can't store many bits per chip, uses more power
      -generate more heat, used for cache


RAM:
-random access memory
-stored on motherboard in modules called DIMMS (dual inline memory module)
-DIMM -2 independent rows of pins 1 on each side
      -have 168, 240, 184, 288 pins
      -RAM is installed on motherboard in memory slot
      -average motherboard have b/w 2-4 memory slots
-data 1st stored into hard drive -----> RAM -----> CPU
-when when memory is low, some data needs to be in hard drive (slows down computer)
-require constant electrical power to store data
-DRAM -dynamic ram contains capacitors (small buckets stores electricity & 1s & 0s)
      -needs to be refreshed with electricity constantly
      -SDRAM -synchronous dynamic ram used today in RAM DIMMs
-DIMMs -ranges from 128MB-32GBs per dim 
      -64 & 32 bit data path refers to number of bits of data transferred in 1 clock cycle
      -more bits transferred in 1 cycle ----> faster computer
      -transfer 64 bit data at time = 64/8 = 8 byte wide bus
-SIMMs -transfer 32 bit data path 
-PC-100 -100MHz = speed at which it operates
        -8 bytes wide bus 
        -100MHz * 8 bytes = 800MB/sec
-PC-133 -133MHz * 8 bytes = 1066MB/sec
-RIMM -ram-bus inline memory module
      -184 pins, looks alike DIMMs
      -bottom notch are near centre of module
      -speed 800MHz & only 2 byte wide bus ---> 8000 * 2 = 16000MB/sec
-DDR -double data rate
     -sends double amount of data in each clock signal
     -uses both rising & falling edges of clock signal to send data 
     -DDR-333 PC-2700 (clock speed & total bandwidth) ----> 333 * 8 bytes = 2700MB/sec
     -DDR2 faster than DDR & allows for higher bus speed, 240 pins
     -DDR3 2x faster than DDR2, 240 pins, bottom notch are in different places, not interchangeable 
      with DDR2, DDR, DDR4
     -DDR4 offers higher range speed than DDR3, 288 pins
-ECC -error correcting code 
     -detects if data was correctly processed by memory module
     -ECC (9 memory chips), non-ECC (8-memory chips)
-increasing RAM ---> faster performance
-DRAM packages -SO DIMM (72,100,144,200,204,260 pins), micro DIMM (172, 214 pins)
               -30-pin SIMM (FPM, EDO fast page mode, EDO)
               -72-pin SIMM (EDO/ SDRAM) (extended data out)
               -168-pin DIMM (SDRAM) (synchronous dynamic RAM)


Mouse:
-4800 DPI, 125Hz polling rate
-optical sensors, ergonomic, braided wire, silicon wire
-software support, RGB customisable
-mouse pad
-Dragon-war, Netgear, Lenovo, Ant Esports, Offbeat RIPJAW


Plenum vs non plenum PVC:
-PVC -depends on what outside of cable (outer jacket)
     -plenum, riser, general
-plenum cables -used in plenum areas (space/ building with open air flow)
               -more prone to fires, used in drop ceilings & under floor
               -cable must be fire resistance & not produce any fumes
               -CMP (communication multipurpose plenum)
               -special plastics & coated with teflon FEP (flame retardant made by Dupont)
               -more expensive
-non-plenum cables -PVC (polyvinyl chlorine) 
                   -cheaper & produces gases like HCL & dioxin)
-riser (CMR) -communication multipurpose cable riser
             -installed vertically rise in building
             -prevents fire from spreading in building & less expensive
             -used in walls b/w floors
-CM (communication multipurpose) -network cable for general use
                                 -minimum fire restrictions, used in rooms, lowest safety standards


Keyboard:
-device that used to input commands to computer (word processing)
-equipped with 2 connectors (8 pin dim/ USB)
-blue switch -clickiness & noisy
-red switch -smooth & less clicks
-brown switch -clicking & less noisy
-polycarbonate, wrist rest, palm rest
-TKL (10 key less)
-tap tile feedback


Media card:
-gives computer ability to read memory card from devices like camera
-USB cable connects with computer 
-has different slots accommodate different sizes of memory card (micro SD & mini SD)


Docking station:
-used for laptop computer
-used for turning laptop into desktop computer 
-connecting monitor, printer, keyboard
-specific to manufacturer & no general docking station


KVM switch:
-allows to control multiple computer from single monitor keyboard & mouse
-each computer has its own individual cable connection to KVM
-buttons to switch b/w different computers
-low end KVM (handles 2 computers), higher end KVM (handles 8 computers)


APIPA:
-automatic private IP addressing
-when DHCP server goes down then windows computer self assigns IP address ranges (169.254.0.1) 
-also assign 16 bit subnet mask 
-ipconfig
-every few computer check contact with DHCP


CPU:
-Intel -largest manufacturer of processor
       -286, 386, 486, Celeron, pentium
-AMD -advanced micro devices
     -K6, K5, Athion, Duron, Sempron
     -Athion 64, opteron, phenon


-Tap drive -inexpensive way to backup data from hard drive 
           -attached to computer using USB port
           -backed up sequentially to tape
           -restore data in same order as backed them up
-CD-ROM drive -standard component of computer
              -reads data from CD-ROM
              -compact disk read only memory 
-CD-RW drive -change/ write data to CD
             -moving laser assembly writes/ burns data onto CD
             -CD-R (only write once), CD-RW (allows data to re-write multiple times)
             -holds 700MB of data
-DVD-ROM drive -device that reads DVD disk 
               -largely replaced ordinary CD-ROM drive
               -large storage capacity of DVD disk
               -store upto 4.7GB of data
-DVD-RW drive -change & write data on DVD
              -writes data on DVD-R disk & rewrite data on DVD-RW disk
              -store upto 4.7GB of data
              -dual layer DVD-RW drive can burn dual layer DVDs
              -dual layer DVDs have 2 recordable layers & store 8.5GB of data
-blu-ray drive -hold 25GB of data (5x of DVD)
-BDR-R & BDR-E drive -burn data to Blu-ray Disc 1 time
                     -erase data & overwrite data on Blu-ray Disc
-thumb -use memory chip to store   
       -miniature storage device with USB interface
       -fast & convenient data storage 
-SD card -secure data cards popular type of flash memory
         -used in digital camera storing photographic & video
         -2GB-512GB
         -mini SD & micro SD (used in smartphone to add extra storage)
         -compact flash (used in DSLR camera) -provides quick & easy storage for pictures & videos)
         -non-standard SD card -non-standard card is old XD picture card
-eMMC memory -embedded inside smartphones & tablets
-hot spares -equipment can be swapped without need of turning off power
-cold spares -power must turned off before replacing piece of equipment


CD -compact disc (capacity 700MB), cover layer (1.2mm), NA: 0.45, laser wavelength (780mm), track pitch 
    (1.60 micro meter)
DVD -capacity 4.7GB, cover layer (0.6mm), NA: 0.60, laser wavelength (650mm), track pitch (0.74 micro 
     meter)
Blue ray -capacity 25GB, cover layer (0.1mm), NA: 0.85, laser wavelength (405mm), track pitch (0.32 
          micro meter)

 
Intel processor suffixes:
-R -desktop processor 
   -integrated graphics (Iris Pro graphics)
   -processor with higher-end version 
-H -high-performance processors 
   -gaming laptops/ mobile workstations
   -higher TDP (Thermal Design Power)
   -offer more power and performance
-U -ultra-low power consumption processors
   -designed for thin & light laptops/ ultrabooks
   -processors prioritise battery life over performance
-P -offer balance b/w performance & power efficiency
   -used in high-performance laptops require good battery life but handle demanding tasks
-G -integrated graphics of specific level, number attached (G7, G4)
   -higher number ----> better graphics performance
-K -unlocked processors, overclocked for higher performance (if system allows) 
-F -integrated graphics, require discrete GPU
   -cheaper than same model with integrated graphics
-T -low-power desktop processors, 
   -designed for small form factor/ energy-efficient desktops 
   -prioritise low power consumption & reduced heat generation
-X & XE -indicate extreme or enthusiast-grade processors
        -used in high-end desktop workstation (intensive workloads) (video rendering & 3D modelling)


Proxy vs reverse- proxy:
-proxy -someone/something authority to do something for another person/ thing
       -proxy is server & middleman b/w private network & public internet
       -private network -------> proxy server (retrieve data from people behalf) -------> internet 
       -safety barrier b/w private network & internet
       -regulates traffic, hides identity of client by masking their IP address
       -logs user activities
       -bypass restricted content
       -proxy can cache/ store copies of website
-reserve proxy -reverse of forward proxy 
               -regulates traffic coming into network
               -retrieving website, access database 
               -using reverse proxy creates single point of entry regulates incoming traffic
               -computers -----> 
                          -----> [reverse proxy + server]
                          ----->
               -hides IP address of server
               -block malicious traffic (DDOS attack)
               -load balancing & distributes traffic smartly


Patch panel:
-reduces clutter by keeping network cables neat & organised
-similar to keystone jack & wall plate
-large number of ports & installed on server rack near switch
-all computers are connected to switch
-removing RJ45 from ethernet cables & punched down at back of patch panel & short length wried used  
 to connect patch panel & switch
-easier in maintaining & trouble shooting
-keystone blank patch panel (supports standardise keystone jacks), coupler patch panel (cable 
 plugged into with RJ45 connectors)
-ethernet, fiberoptic, coaxial


Network types:
-depends on how large & how much area they cover geographically
-PAN -personal area network
     -uses wireless technologies (bluetooth, NFC, infrared)
     -connect by USB cables
-LAN -local area network 
     -group of devices (servers, computer, printers, switches) located in same building
     -close proximity to each other
     -ethernet LAN
-WLAN -wireless LAN but without using cables
-CAN -campus area network
     -joins 2 or more LANs together within limited area
-MAN -metropolitan area network
     -larger than CAN
     -spans over several buildings in city & town
-SAN -storage area network 
     -stores & provides access to large amount of data  
     -not affected by network traffic
-WAN -wide area network 
     -includes multiple LANS, MAN, CAN
     -country, continent, entire globe


Differential vs incremental backup:
-disaster recovery is process of rebuilding organisation data after disaster
-full -backs up all data
      -not efficient & time consuming
      -data can be restored in 1 session
-incremental backup -much faster than full backup
                    -backs up data that has been change since last full/ incremental backup
                    -mon --> full backup, tue --> tue data, wed ---> wed data, .......
                    -takes longest when to restore data
                    -full + incremental (correct order) = restore
-differential backup -faster than full but slower than incremental
    -backs up data that has been changed since last full backup
    -mon --> full, tue-fri --> differential 
    -full + last differential = restore 


Remote access protocol:
-services enables to connect to computer from remote location
-build into windows NT line of server software
-works in major network protocol (TCP/IP, Netbeul, IPX/SPX)
-SLIP -serial line internet protocol
      -data can transmit over serial ports & modem connections (phone line)
      -not support encryption & authentication 
      -all info sent in clear text
      -no support error checking & limited using only TCP/IP protocol
-PPP -point to point protocol, standard remote standard 
     -supports encryption & authentication, secure 
     -create direct connection b/w 2 communicating devices
     -2 devices authenticate with each other & exchange information with each other
     -most ISP use this protocol for customers (access internet through dial up connection)
-PPPoE -protocol use PPP over ethernet
       -used encapsulation PPP frame in ethernet frames
       -developed for DSL, cable modem, wireless connection to internet
       -connecting multiple users on LAN to remote site sharing common device 
-PPTP -creating VPN, ensures data transfer secure by creating secure tunnel
-GRE -used with PPTP in creation of VPN network
     -creating tunnel PPTP, encapsulates data in secure manner


Estimating requirements by website traffic:
-SSD highly recommended over HDD for speed
-higher traffic needs faster internet connection (10 Mbps low-traffic sites, 50 Mbps medium & 100+ Mbps 
 high traffic)
-low traffic (10,000 monthly visitors) -CPU (1–2 cores), RAM (1–2GB), storage (10–20GB SSD)
                                       -suitable for small blogs/ personal websites with static content 
-medium traffic (10,000–100,000 monthly visitors) -CPU (2–4 cores), RAM (4–8GB), storage (40–80GB SSD)
                                                  -e-commerce sites, small forums, moderate 
                                                   interactivity, dynamic content, multiple plugins
-high traffic (100,000+ monthly visitors) -CPU (4–8 cores), RAM (8–16GB), storage (100+GB SSD)
                                          -streaming services, sites with high interactivity


Networking commands:
-ssh router_IP (SSH into router, switch that supports SSH for remote management)
-telnet router_IP (telnet into older devices that use telnet for management (not secure))
-curl -u user:password http://router IP/config (accesses web-based configurations) 
-arp -a (lists IP & MAC addresses of devices connected to your network)
-nmap -sP your_subnet (discovers all devices on your local network) 
-ping -c 3 ip_address (checks if device is reachable (useful for all devices))
-dhclient interface (requests new IP address from router) 
-sudo route -n add destination gateway (manually add routes to specific device
-networksetup -setmanual service_name IP subnet_mask router (set IP for specific network service)
-networksetup -setdhcp service_name (set DHCP)
-iftop -i interface (monitoring of network bandwidth usage)
-nettop (monitoring network connections & bandwidth)
-vnstat (logs & tracks bandwidth usage over time)
-sudo tcpdump -i interface (capture & analyse packets on specified interface)
-cat /etc/resolv.conf (view DNS server settings)
-scutil --dns (view detailed DNS configuration)
-dig hostname (retrieve DNS information about domain)
-nslookup hostname (test DNS resolution for troubleshooting)
-ip route: View routing table and gateway on Linux.
-netstat -nr | grep default (shows default gateway)
-ping gateway_IP (check connectivity to router/ gateway)
-traceroute destination_IP/ URL (shows route packets take to reach destination)
-netstat -tuln (displays active connections & listening ports)
-lsof -i :port (lists processes listening on specific port
-networkQuality (measures network quality, download &upload speeds)
-ufw status (check firewall status)
-sudo ufw enable/ disable (Enable or disable firewall)
-sudo iptables -L (view iptables firewall rules)
-


Transferring files b/w computer & phones:
-system_profiler SPUSBDataType (list USB devices)
-system_profiler (list all hardware information)
-system_profiler SPThunderboltDataType (list thunderbolt devices)
-system_profiler SPPCIDataType (list PCI devices)
-networksetup -listallhardwareports (list network interfaces)
-ioreg -p IOUSB (detailed device tree)
-diskutil list (list mounted volumes)
-brew install android-platform-tools (install adb)
-enable developer options & USB debugging on android
-connect android phone to your mac with USB cable
-adb devices
-adb push /path/to/local/file /sdcard/Download/
-adb pull /sdcard/Download/file.ext /path/to/local/directory/
-Browse Files on Android
-adb shell


-freeCAD -Open-source and Free: No licensing costs; suitable for individuals and small businesses.
         -Parametric Modeling: Supports parametric design for easy modifications.
         -Modular: Has workbenches for different tasks, like Part Design, Draft, and Path.
         -Customizable: Users can add plugins, macros, and workbenches.
         -Learning Curve: Steeper for beginners; not as polished as other tools.
-solid-works -Industry Standard: Widely used in engineering and manufacturing
High Functionality: Advanced tools for simulation, rendering, and complex assemblies.
Extensive Community and Support: Large support network and training resources.
High Cost: Expensive, with subscription and licensing fees.
Windows-only: Not natively available on macOS or Linux.
-fusion 360 -allows collaboration & access from different devices
            -combines CAD, CAM & CAE in 1 platform
            -affordable for startups -free for students & hobbyists
            -cloud saves & versioning support team collaboration
Limited Offline Use: Mostly cloud-dependent, which may be a downside for offline work.
-OpenSCAD -Script-Based CAD: Models created by coding rather than visual manipulation
          -Precise Control: Great for parametric, programmatic designs
          -Free and Open-Source: Ideal for budget-conscious users and open-source enthusiasts.
          -Limited Features: No GUI for manipulation; lacks advanced tools like simulation.
          -Niche Use: Best for simple and algorithm-driven designs, less suitable for complex assemblies.


SSD vs Hard Drive vs Hybrid Drive:
-Magnetic hard drives -sealed case contains magnetic disks (actual data is stored on)
                      -disk rotate on high speed & actuator read & write on disk 
                       (5200,7200,10000RPM)
                      -uses serial ATA faster than outdated || ATA interface, ATA cable, average 
		      transfer 6GB/sec
                      -3.5 inches used in desktop & server, 2.5 inches used in laptop
-SSD -faster, short lifespan, more expensive, non-mechanical (flash), shock resistant, best for
      storing OS, gaming apps, frequently used files
     -more durable compared to HDD
     -0.1ms access time, backup takes about 6hrs, average I/O wait of 1%, consumes 2-5 watts,    
      failure rate less than 0.5%, delivers 6000io/sec
     -uses flash memory chips to store data, energy efficient, 2.5 inches & M.2 foam factor
-SATA -hard drive use serial ATA interface
      -newer standard faster than old parallel ATA
      -transfer speed averaging 6GB/sec
      -hot swappable, smaller cable
-SSHD -solid state hybrid drives, combines use of magnetic disk & flash memory
-HDD -slower, longer lifespan, cheaper, mechanical (moving parts), fragile, storing extra data, 
      movies, photos, documents
     -uses spinning disks to store data
     -5.5-8.0ms access time, backup takes about 20-24hrs, average I/O wait of 7%, consumes 6-15 
      watts, failure rate 2-5%, reaches upto 400Io/sec


Some reasons for computer crash:
-corrupted system registry files
-disorganised files
-malicious software
-too little available memory
-overheating
-problematic windows update
-outdated drivers
-faulty hardware (RAM, hard drive)


Some reasons for program crash:
-bigs
-compatibility issues
-corrupted files
-insufficient resources
-malware
-faulty error handling
-memory leaks
-infinit loops
-incompatible software components


Use home PC from anywhere:
-remote desktop software are programs allows to access 1 computer from another
-TeamViewer, AnyDesk, Microsoft Remote Desktop, Apple Remote Desktop {barely}, Chrome Remote  
 Desktop, DWService.net, and Parsec


Wifi extender:
-extends range of wireless signals from wifi router 
-acts like bridge between wifi router & wifi device outside range of wifi router signal
-connects to existing wifi network
-acts like wireless access points/ wireless devices to connect
-not strengthening signals but broadcasting its own signal
-SSID (service set identifier)


Wireless bridge:
-wireless bridges turn 2 LANs into LAN
-wireless bridge mode -feature built into wifi router wirelessly connects 2 network together
-wifi routers 
-setting up configuration page
-router is gateway/doorway to network (separates networks)
-firewall & NAT service is turned off when route no longer acting like router
-netgear (R6700AX) passes network connection to wired devices only
-linksys (EA6350V4) passes network connection to wired & wireless devices
-SOHO router (small office/home office) -built in switch, wired devices can connect using ethernet  
                                         cables


Inside smart phone:
-back case, battery, SIM card, bottom frame, loud speaker, back frame, audio port
-camera cover, fingerprint reader, back buttons, front facing camera, microchip shield, motherboard
-hardened glass, frame edge, touchscreen display, mid-frame, range finder, light sensor, top 
 speaker, microchip/ heat shield, back camera
-CMOS sensor, imaging microchips, motor coil, magnets, camera lenses, camera house
-speaker, plastic case, pole plates, voice coil, magnet, voice coil, diaphragm, spider, front cover
-motherboard, qualcomm WTR 3925 4G RG trascrivere chip, Broadcom BCM43455 wifi/bluetooth chip, SOC 
 (sistem on chip), snapdragon 808, quad core 1.4Ghz A53 w/ 4GB ram & adreno 418 GPU
-sandisk sdinadf4-64G 64GB SSD, SLC
-PCB, touchscreen display, hardened glass, capacitive touchscreen grid, display
-battery, anode, casing, separator, cathode, copper collector, aluminium collector, electrolyte


Disk defragmentation:
-reduces amount of fragmented files on hard drive
-recognises related data files & put them in same physical location
-data is dived into multiple chunks of data stored in hard drive 
-easy to fetch & no need to fetch different data from different area
-over time as data added/ deleted ---> free space on hard drive gets smaller & spread out in 
 different locations 
-defrag only happens in mechanical hard drives (spinning disks)
-SSDs don't need defrag


Cooling:
-computer (CPU & video card) generate lot of heat, cooling is important
-run slow, shut down, lock up, shorten life of computer
-case fans -intake fan & exhaust fan (active cooling)
-heat sink -aluminium block fins CPU 
           -increase surface area of CPU & make more air contact for cooling
           -fins on heat sink are designed to increase surface area for air circulation (passive)
           -using thermal compounds
-water cooling -pump, radiator, hosting
               -fixed on top of CPU
               -more expensive, better, less noise


Performance of app & website:
-speed & responsiveness -page load time –How long it takes for page to fully load
                        -time to first byte (TTFB) –how quickly server responds
                        -first contentful paint (FCP) –time when first visible content appears
                        -largest contentful paint (LCP) –how fast largest visible element loads
                        -time to interactive (TTI) –how long before page fully interactive
-user experience & engagement -bounce rate -percentage of users who leave after viewing 1 page
                              -session duration –average time user spends on app/website
                              -pages per session –how many pages user visits in 1 session
                              -scroll depth –how far users scroll down page
                              -core web vitals –google UX metrics (LCP, FID, CLS)
-conversion & business metrics -conversion rate –percentage of users completing desired action 
                                                 purchase, sign-up)
                               -cart abandonment rate –% of users who add items to cart but don’t 
                                                       complete purchase
                               -click-through rate (CTR) –ratio of users clicking on links/buttons
                               -retention rate –percentage of returning users over time
                               -customer lifetime value (CLV) –revenue business expects from customer
-backend & server performance -server response time –time taken by server to respond to request
                              -error rate –percentage of failed API requests
                              -uptime/downtime –availability percentage of website/app
                              -database query performance –time taken to execute database queries
-mobile & cross platform performance -app load time –time taken for app to open
                                     -crash rate –percentage of sessions that experience crashes
                                     -ANR rate (application not responding) -% of times app becomes 
                                                                             unresponsive
                                     -memory & battery usage –how much memory & battery app consumes


Wireless:
-omnidirectional antenna -transmits signal in all directions
-directional antenna -directs signal in 1 direction 
-interference -many wireless devices (microwave, cell phones, bluetooth devices) causes interference


Microservices:
-


-----------------------------------------------Questions-----------------------------------------------
-binary tree -Postorder Traversal (Iterative) -start with root ---> goto left sub-tree ---> goto 
                                               entire right-sub tree recursively ---> process root node 
                                               of subtree
                                              -when nothing there ---> pop back to parent tree
                                              -recursive solution uses call stack 
-reverse array/ string -2 pointers -one at start, one at end
                       -swap elements & move pointers inward until they meet in middle
                       -each element is visited once
                       -time complexity -O(n) —traverse array or string once (linear time)
-find maximum & minimum element in array -iterate through each element once
                                         -keep updating min & max
                                         -time complexity -O(n) —single pass through array
-find K-th max & min element of array -sort array -O(n log n)
                                      -access K-th element -O(1) (constant time)
                                      -time complexity -O(n log n) due to sorting
                                                       -use heap or quick select, reduce it to O(n)
-sort array of 0s, 1s, 2s -dutch national flag algorithm
                          -use 3 pointers -low, mid, high
                          -traverse array once, swapping elements in constant time
                          -time complexity -O(n) —linear time since each element processed exactly once
-move all negative elements to one side -two pointers -one scans from left for positives
                                                      -one scans from right for negatives
                                        -swap in constant time
                                        -time complexity -O(n) —each element is visited once
-union & intersection of 2 sorted arrays -time complexity -union -O(n + m) —each element processed once
                                                          -intersection -O(n + m) -both arrays are 
                                                                                   traversed once
                                                          -both arrays sorted, use 2 pointers, each 
                                                           pointer moves exactly once through arrays
-cyclically rotate array by 1 -time complexity -O(n) —each element shifted once
                              -loop runs n - 1 times, which simplifies to O(n)
-minimise maximum difference b/w heights -adjust heights by adding or subtracting k to minimise range
                                         -time complexity -O(n log n) —due to sorting
                                         -array sorted 1st (O(n log n)), then single pass O(n) to check 
                                          min/max differences
-largest sum contiguous subarray (Kadane’s algorithm) -time complexity -O(n) —each element visited once
                                                      -loop processes each element single time with 
                                                       constant-time operations inside
-minimum number of jumps to reach end of array -greedy approach 
                                               -time complexity -O(n) —each element processed once
                                               -single pass through array (linear time) with constant
                                                time operations inside
-duplicate in array of N+1 integers -array of N+1 integers where each integer is b/w 1 & N (inclusive) 
                                    -Floyd’s cycle detection -tortoise & hare algorithm
                                    -time complexity -O(n) —each element visited at most twice
                                    -cycle detection runs in linear time & don’t use extra space
-merge 2 sorted arrays without extra space -solution (gap method -shell sort concept)
                                           -time complexity -O((n + m) log(n + m)) —gap method similar 
                                                             to shell sort
                                           -number of comparisons decreases logarithmically
-Kadane’s algorithm (maximum subarray sum) -time complexity -O(n) —traverse array once
                                           -each element processed in constant time
-merge intervals -given overlapping intervals, merge them into 1
                 -sorting + merging
                 -time complexity -O(n log n) —sorting takes O(n log n), merging takes O(n)
                                              -Sorting is most expensive step
-next lexicographical permutation of sequence -time complexity -O(n) —make single pass to find pivot & 
                                               swap, each element is processed maximum of twice


x-----x----x----x----x----x----x----x----x---Use-full---x----x----x----x----x----x----x----x----x-----x
nano ~/.zshrc
vim ~/.zshrc
source ~/.zshrc
export PATH="/opt/homebrew/bin:$PATH"
[Enter brew = export PATH=/opt/homebrew/bin:$PATH]
[curl -LO https://github.com/neovim/neovim/releases/download/nightly/nvim-macos-arm64.tar.gz
tar xzf nvim-macos-arm64.tar.gz]
Run xattr -c ./nvim-macos-arm64.tar.gz (to avoid "unknown developer" warning)
Extract: tar xzvf nvim-macos-arm64.tar.gz
Run ./nvim-macos-arm64/bin/nvim
https://github.com/csanadszilagyi/platformerGame/tree/master
https://github.com/ayush714/ML001-Project-Sources-Code-and-Learning-Materials/tree/main
https://blackarch.org/tools.html
https://github.com/junegunn/vim-plu
cd neovim-init.vim/convenience
./install.sh
-ifconfig
-echo $PATH
-source ~/.zshrc
-brew --version
-rm -rf pack
-cp -r ~/backup_nvim ~/.config
-which coreutil
-echo $TERM
-curl wttr.in
brew install ossp-uuid autoconf automake pkg-config libuv lz4 json-c openssl libtool cmake
git clone https://github.com/netdata/netdata.git --recursive
cd netdata/
sudo ./netdata-installer.sh --install-prefix /usr/local
